C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYPM
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\cyPm.obj
COMPILER INVOKED BY: D:\dev_soft\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Generated_Source\
                    -PSoC3\cyPm.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\cyPm.lst) CD DB NOIP OT(2,SIZE) INCDIR(Gener
                    -ated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\cyPm.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: cyPm.c
   3          * Version 2.40
   4          *
   5          * Description:
   6          *  Provides an API for the power management.
   7          *
   8          * Note:
   9          *  Documentation of the API's in this file is located in the
  10          *  System Reference Guide provided with PSoC Creator.
  11          *
  12          ********************************************************************************
  13          * Copyright 2008-2011, Cypress Semiconductor Corporation.  All rights reserved.
  14          * You may use this file only in accordance with the license, terms, conditions,
  15          * disclaimers, and limitations in the end user license agreement accompanying
  16          * the software package with which this file was provided.
  17          *******************************************************************************/
  18          
  19          #include "cyPm.h"
  20          
  21          static CY_PM_BACKUP_STRUCT          cyPmBackup;
  22          static CY_PM_CLOCK_BACKUP_STRUCT    cyPmClockBackup;
  23          
  24          /* Convertion table between CyIMO_SetFreq() parameters and register's value */
  25          static const uint8 CYCODE cyPmImoFreqMhz2Reg[7u] = {
  26              CY_IMO_FREQ_12MHZ, CY_IMO_FREQ_6MHZ,  CY_IMO_FREQ_24MHZ, CY_IMO_FREQ_3MHZ,
  27              CY_IMO_FREQ_48MHZ, CY_IMO_FREQ_62MHZ, CY_IMO_FREQ_74MHZ};
  28          
  29          /* Convertion table between register's values and frequency in MHz  */
  30          static const uint8 CYCODE cyPmImoFreqReg2Mhz[7u] = {12u, 6u, 24u, 3u, 48u, 62u, 74u};
  31          
  32          /* Function Prototypes */
  33          /* Device is PSoC 3 */
  34          #if(CY_PSOC3)
  35          
  36              static void CyPmCtwSaveSet(uint8 ctwInterval);
  37              static void CyPmFtwSaveSet(uint8 ftwInterval);
  38              static void CyPmOppsSaveSet(void);
  39          
  40          #endif  /* (CY_PSOC3) */
  41          
  42          static void CyPmHibSaveSet(void);
  43          static void CyPmHibRestore(void) ;
  44          
  45          static void CyPmHibSlpSaveSet(void);
  46          static void CyPmHibSlpRestore(void);
  47          
  48          /* Device is PSoC 5 */
  49          #if(CY_PSOC5)
              
                  /***************************************************************************
                  * The PICU interupt event is not allowed to act as wakeup source for PSoC 5.
                  * To prevent accidental wakeup all the PICU interrupts are disabled before
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 2   

                  * Sleep and Hibernate low power modes entry. In case of Sleep mode registers
                  * values must be restored on wakeup, but in case of Hibernate low power mode
                  * there is no sense in saving/restoring registers values as the only wakeup
                  * source for this mode is external reset (XRES). For more information refer
                  * to the PSoC 5 device TRM.
                  ***************************************************************************/
              
                  static void CyPmSavePicuInterrupts(void);
                  static void CyPmDisablePicuInterrupts(void) ;
                  static void CyPmRestorePicuInterrupts(void) ;
              
              #endif  /* (CY_PSOC5) */
  66          
  67          /*******************************************************************************
  68          * Function Name: CyPmSaveClocks
  69          ********************************************************************************
  70          *
  71          * Summary:
  72          *  This function is called in preparation for entering sleep or hibernate low
  73          *  power modes. Saves all state of the clocking system that does not persist
  74          *  during sleep/hibernate or that needs to be altered in preparation for
  75          *  sleep/hibernate. Shutdowns all the digital and analog clock dividers.
  76          *
  77          *  Switches the master clock over to the IMO and shuts down the PLL and MHz
  78          *  Crystal. The IMO frequency is set to either 12 MHz or 48 MHz to match the
  79          *  Design-Wide Resources System Editor "Enable Fast IMO During Startup" setting.
  80          *  The ILO and 32 KHz oscillators are not impacted. The current Flash wait state
  81          *  setting is saved and the Flash wait state setting is set for the current IMO
  82          *  speed.
  83          *
  84          *  Note If the Master Clock source is routed through the DSI inputs, then it
  85          *  must be set manually to another source before using the
  86          *  CyPmSaveClocks()/CyPmRestoreClocks() functions.
  87          *
  88          * Parameters:
  89          *  None
  90          *
  91          * Return:
  92          *  None
  93          *
  94          * Reentrant:
  95          *  No
  96          *
  97          * Side Effects:
  98          *  All peripheral clocks are going to be off after this API method call.
  99          *
 100          *******************************************************************************/
 101          void CyPmSaveClocks(void)
 102          {
 103   1          /* Digital and analog clocks - save enable state and disable them all */
 104   1          cyPmClockBackup.enClkA = CY_PM_ACT_CFG1_REG & CY_PM_ACT_EN_CLK_A_MASK;
 105   1          cyPmClockBackup.enClkD = CY_PM_ACT_CFG2_REG;
 106   1          CY_PM_ACT_CFG1_REG &= ~CY_PM_ACT_EN_CLK_A_MASK;
 107   1          CY_PM_ACT_CFG2_REG &= ~CY_PM_ACT_EN_CLK_D_MASK;
 108   1      
 109   1          /* Save current flash wait cycles and set the maximum value */
 110   1          cyPmClockBackup.flashWaitCycles = CY_PM_CACHE_CR_CYCLES_MASK & CY_PM_CACHE_CR_REG;
 111   1          CyFlash_SetWaitCycles(CY_PM_MAX_FLASH_WAIT_CYCLES);
 112   1      
 113   1          /* IMO - save current IMO MHz OSC frequency and USB mode is on bit */
 114   1          cyPmClockBackup.imoFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
 115   1          cyPmClockBackup.imoUsbClk = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_USB;
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 3   

 116   1      
 117   1          /* IMO doubler - save enable state */
 118   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_F2XON))
 119   1          {
 120   2              /* IMO doubler enabled - save and disable */
 121   2              cyPmClockBackup.imo2x = CY_PM_ENABLED;
 122   2          }
 123   1          else
 124   1          {
 125   2              /* IMO doubler disabled */
 126   2              cyPmClockBackup.imo2x = CY_PM_DISABLED;
 127   2          }
 128   1      
 129   1          /* IMO - set appropriate frequency for LPM */
 130   1          CyIMO_SetFreq(CY_PM_IMO_FREQ_LPM);
 131   1      
 132   1          /* IMO - save enable state and enable without wait to settle */
 133   1          if(0u != (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG))
 134   1          {
 135   2              /* IMO - save enabled state */
 136   2              cyPmClockBackup.imoEnable = CY_PM_ENABLED;
 137   2          }
 138   1          else
 139   1          {
 140   2              /* IMO - save disabled state */
 141   2              cyPmClockBackup.imoEnable = CY_PM_DISABLED;
 142   2      
 143   2              /* IMO - enable */
 144   2              CyIMO_Start(CY_PM_IMO_NO_WAIT_TO_SETTLE);
 145   2          }
 146   1      
 147   1          /* IMO - save the current IMOCLK source and set to IMO if not yet */
 148   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_XCLKEN))
 149   1          {
 150   2              /* DSI or XTAL CLK */
 151   2              cyPmClockBackup.imoClkSrc =
 152   2                  (0u == (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO2X_SRC)) ? CY_IMO_SOURCE_DSI : CY_IMO_SOURCE_X
             -TAL;
 153   2      
 154   2              /* IMO -  set IMOCLK source to MHz OSC */
 155   2              CyIMO_SetSource(CY_IMO_SOURCE_IMO);
 156   2          }
 157   1          else
 158   1          {
 159   2              /* IMO */
 160   2              cyPmClockBackup.imoClkSrc = CY_IMO_SOURCE_IMO;
 161   2          }
 162   1      
 163   1          /* Save clk_imo source */
 164   1          cyPmClockBackup.clkImoSrc = CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO_OUT_MASK;
 165   1      
 166   1          /* If IMOCLK2X or SPC OSC is source for clk_imo, set it to IMOCLK */
 167   1          if(CY_PM_CLKDIST_IMO_OUT_IMO != cyPmClockBackup.clkImoSrc)
 168   1          {
 169   2              /* Set IMOCLK to source for clk_imo */
 170   2              CY_PM_CLKDIST_CR_REG = (CY_PM_CLKDIST_CR_REG & ~CY_PM_CLKDIST_IMO_OUT_MASK) |
 171   2                                      CY_PM_CLKDIST_IMO_OUT_IMO;
 172   2          }    /* Need to change nothing if IMOCLK is source clk_imo */
 173   1      
 174   1          /* IMO doubler - disable it (saved above) */
 175   1          if(0u != (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_F2XON))
 176   1          {
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 4   

 177   2              CyIMO_DisableDoubler();
 178   2          }
 179   1      
 180   1          /* Master clock - save divider and set it to divide-by-one (if no yet) */
 181   1          cyPmClockBackup.clkSyncDiv = CY_PM_CLKDIST_MSTR0_REG;
 182   1          if(CY_PM_DIV_BY_ONE != cyPmClockBackup.clkSyncDiv)
 183   1          {
 184   2              CyMasterClk_SetDivider(CY_PM_DIV_BY_ONE);
 185   2          }    /* Need to change nothing if master clock divider is 1 */
 186   1      
 187   1          /* Master clock - save current source */
 188   1          cyPmClockBackup.masterClkSrc = CY_PM_CLKDIST_MSTR1_REG & CY_PM_MASTER_CLK_SRC_MASK;
 189   1      
 190   1          /* Master clock source - set it to IMO if not yet. */
 191   1          if(CY_MASTER_SOURCE_IMO != cyPmClockBackup.masterClkSrc)
 192   1          {
 193   2              CyMasterClk_SetSource(CY_MASTER_SOURCE_IMO);
 194   2          }    /* Need to change nothing if master clock source is IMO */
 195   1      
 196   1          /* Bus clock - save divider and set it, if needed, to divide-by-one */
 197   1          cyPmClockBackup.clkBusDiv = ((uint16) CY_PM_CLK_BUS_MSB_DIV_REG << 8u) | CY_PM_CLK_BUS_LSB_DIV_REG;
 198   1          if(CY_PM_BUS_CLK_DIV_BY_ONE != cyPmClockBackup.clkBusDiv)
 199   1          {
 200   2              CyBusClk_SetDivider(CY_PM_BUS_CLK_DIV_BY_ONE);
 201   2          }    /* Do nothing if saved and actual values are equal */
 202   1      
 203   1          /* Set number of wait cycles for the flash according CPU frequency in MHz */
 204   1          CyFlash_SetWaitCycles(CY_PM_GET_CPU_FREQ_MHZ);
 205   1      
 206   1          /* PLL - check enable state, disable if needed */
 207   1          if(0u != (CY_PM_FASTCLK_PLL_CFG0_REG & CY_PM_PLL_CFG0_ENABLE))
 208   1          {
 209   2              /* PLL is enabled - save state and disable */
 210   2              cyPmClockBackup.pllEnableState = CY_PM_ENABLED;
 211   2              CyPLL_OUT_Stop();
 212   2          }
 213   1          else
 214   1          {
 215   2              /* PLL is disabled - save state */
 216   2              cyPmClockBackup.pllEnableState = CY_PM_DISABLED;
 217   2          }
 218   1      
 219   1          /* MHz ECO - check enable state and disable if needed */
 220   1          if(0u != (CY_PM_FASTCLK_XMHZ_CSR_REG & CY_PM_XMHZ_CSR_ENABLE))
 221   1          {
 222   2              /* MHz ECO is enabled - save state and disable */
 223   2              cyPmClockBackup.xmhzEnableState = CY_PM_ENABLED;
 224   2              CyXTAL_Stop();
 225   2          }
 226   1          else
 227   1          {
 228   2              /* MHz ECO is disabled - save state */
 229   2              cyPmClockBackup.xmhzEnableState = CY_PM_DISABLED;
 230   2          }
 231   1      }
 232          
 233          
 234          /*******************************************************************************
 235          * Function Name: CyPmRestoreClocks
 236          ********************************************************************************
 237          *
 238          * Summary:
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 5   

 239          *  Restores any state that was preserved by the last call to CyPmSaveClocks().
 240          *  The Flash wait state setting is also restored.
 241          *
 242          *  Note If the Master Clock source is routed through the DSI inputs, then it
 243          *  must be set manually to another source before using the
 244          *  CyPmSaveClocks()/CyPmRestoreClocks() functions.
 245          *
 246          *  PSoC3 ES3: The merge region could be used to process state when the megahertz
 247          *  crystal is not ready after the hold-off timeout.
 248          *
 249          *  PSoC5: The 130 ms is given for the megahertz crystal to stabilize. It's
 250          *  readiness is not verified after the hold-off timeout.
 251          *
 252          * Parameters:
 253          *  None
 254          *
 255          * Return:
 256          *  None
 257          *
 258          *******************************************************************************/
 259          void CyPmRestoreClocks(void) 
 260          {
 261   1          #if !(CY_PSOC5_ES1 || CY_PSOC3_ES2)
              
                      cystatus status = CYRET_TIMEOUT;
                      uint16 i;
              
                  #endif  /* !(CY_PSOC5_ES1 || CY_PSOC3_ES2) */
 267   1      
 268   1      
 269   1          /* MHz ECO restore state */
 270   1          if(CY_PM_ENABLED == cyPmClockBackup.xmhzEnableState)
 271   1          {
 272   2              /***********************************************************************
 273   2              * Enabling XMHZ XTAL. The actual CyXTAL_Start() with non zero wait
 274   2              * period uses FTW for period measurement. This could cause a problem
 275   2              * if CTW/FTW is used as a wake up time in the low power modes APIs.
 276   2              * So, the XTAL wait procedure is implemented with a software delay.
 277   2              ***********************************************************************/
 278   2      
 279   2              /* Enable XMHZ XTAL with no wait */
 280   2              CyXTAL_Start(CY_PM_XTAL_MHZ_NO_WAIT);
 281   2      
 282   2              /* Device is PSoC 3 and the revision is ES2 or earlier, or
 283   2              *  device is PSoC 5 and the revision is ES1 or earlier.
 284   2              */
 285   2              #if(CY_PSOC3_ES2 || CY_PSOC5_ES1)
 286   2      
 287   2                  /* Make a 130 milliseconds delay */
 288   2                  CyDelayCycles(CY_PM_WAIT_200_US * CY_PM_MHZ_XTAL_WAIT_NUM_OF_200_US * CY_PM_GET_CPU_FREQ_MHZ);
 289   2      
 290   2              #else
              
                          /* Read XERR bit to clear it */
                          (void) CY_PM_FASTCLK_XMHZ_CSR_REG;
              
                          /* Wait */
                          for(i = CY_PM_MHZ_XTAL_WAIT_NUM_OF_200_US; i > 0u; i--)
                          {
                              /* Make a 200 microseconds delay */
                              CyDelayCycles(CY_PM_WAIT_200_US * CY_PM_GET_CPU_FREQ_MHZ);
              
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 6   

                              /* High output indicates oscillator failure */
                              if(0u == (CY_PM_FASTCLK_XMHZ_CSR_REG & CY_PM_XMHZ_CSR_XERR))
                              {
                                  status = CYRET_SUCCESS;
                                  break;
                              }
                          }
              
                          if(CYRET_TIMEOUT == status)
                          {
                              /*******************************************************************
                              * Process the situation when megahertz crystal is not ready.
                              * Time to stabialize value is crystal specific.
                              *******************************************************************/
              
                              /* `#START_MHZ_ECO_TIMEOUT` */
              
                              /* `#END` */
                          }
              
                      #endif  /* (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
 322   2      
 323   2          }   /* (CY_PM_ENABLED == cyPmClockBackup.xmhzEnableState) */
 324   1      
 325   1      
 326   1          /* Temprorary set the maximum flash wait cycles */
 327   1          CyFlash_SetWaitCycles(CY_PM_MAX_FLASH_WAIT_CYCLES);
 328   1      
 329   1          /* The XTAL and DSI clocks are ready to be source for Master clock. */
 330   1          if((CY_PM_MASTER_CLK_SRC_XTAL == cyPmClockBackup.masterClkSrc) ||
 331   1             (CY_PM_MASTER_CLK_SRC_DSI  == cyPmClockBackup.masterClkSrc))
 332   1          {
 333   2              /* Restore Master clock's divider */
 334   2              if(CY_PM_CLKDIST_MSTR0_REG != cyPmClockBackup.clkSyncDiv)
 335   2              {
 336   3                  /* Restore Master clock divider */
 337   3                  CyMasterClk_SetDivider(cyPmClockBackup.clkSyncDiv);
 338   3              }
 339   2      
 340   2              /* Restore Master clock source */
 341   2              CyMasterClk_SetSource(cyPmClockBackup.masterClkSrc);
 342   2          }
 343   1      
 344   1          /* IMO - restore IMO frequency */
 345   1          if((0u != (cyPmClockBackup.imoUsbClk & CY_PM_FASTCLK_IMO_CR_USB)) &&
 346   1              (CY_IMO_FREQ_24MHZ == cyPmImoFreqMhz2Reg[cyPmClockBackup.imoFreq]))
 347   1          {
 348   2              /* Restore IMO frequency (24 MHz) and trim it for USB */
 349   2              CyIMO_SetFreq(CY_IMO_FREQ_USB);
 350   2          }
 351   1          else
 352   1          {
 353   2              /* Restore IMO frequency */
 354   2              CyIMO_SetFreq(cyPmImoFreqMhz2Reg[cyPmClockBackup.imoFreq]);
 355   2              
 356   2              if(0u != (cyPmClockBackup.imoUsbClk & CY_PM_FASTCLK_IMO_CR_USB))
 357   2              {
 358   3                  CY_PM_FASTCLK_IMO_CR_REG |= CY_PM_FASTCLK_IMO_CR_USB;
 359   3              }
 360   2              else
 361   2              {
 362   3                  CY_PM_FASTCLK_IMO_CR_REG &= ~CY_PM_FASTCLK_IMO_CR_USB;
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 7   

 363   3              }
 364   2          }
 365   1      
 366   1          /* IMO - restore enable state if needed */
 367   1          if((CY_PM_ENABLED == cyPmClockBackup.imoEnable) &&
 368   1             (0u == (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG)))
 369   1          {
 370   2              /* IMO - restore enabled state */
 371   2              CyIMO_Start(CY_PM_IMO_NO_WAIT_TO_SETTLE);
 372   2          }
 373   1      
 374   1          /* IMO - restore disable state if needed */
 375   1          if((CY_PM_DISABLED == cyPmClockBackup.imoEnable) &&
 376   1             (0u != (CY_PM_ACT_CFG0_IMO & CY_PM_ACT_CFG0_REG)))
 377   1          {
 378   2              CyIMO_Stop();
 379   2          }
 380   1      
 381   1          /* IMO - restore IMOCLK source */
 382   1          CyIMO_SetSource(cyPmClockBackup.imoClkSrc);
 383   1      
 384   1          /* Restore IMO doubler enable state (turned off by CyPmSaveClocks()) */
 385   1          if(CY_PM_ENABLED == cyPmClockBackup.imo2x)
 386   1          {
 387   2              CyIMO_EnableDoubler();
 388   2          }
 389   1      
 390   1          /* IMO - restore clk_imo source, if needed */
 391   1          if(cyPmClockBackup.clkImoSrc != (CY_PM_CLKDIST_CR_REG & CY_PM_CLKDIST_IMO_OUT_MASK))
 392   1          {
 393   2              CY_PM_CLKDIST_CR_REG = (CY_PM_CLKDIST_CR_REG & ~CY_PM_CLKDIST_IMO_OUT_MASK) |
 394   2                                      cyPmClockBackup.clkImoSrc;
 395   2          }
 396   1      
 397   1          /* PLL restore state */
 398   1          if(CY_PM_ENABLED == cyPmClockBackup.pllEnableState)
 399   1          {
 400   2              /***********************************************************************
 401   2              * Enable PLL. The actual CyPLL_OUT_Start() without wait period uses FTW
 402   2              * for period measurement. This could cause a problem if CTW/FTW is used
 403   2              * as a wakeup time in the low power modes APIs. To omit this issue PLL
 404   2              * wait procedure is implemented with a software delay.
 405   2              ***********************************************************************/
 406   2      
 407   2              /* Enable PLL */
 408   2              CyPLL_OUT_Start(CY_PM_PLL_OUT_NO_WAIT);
 409   2      
 410   2              /* Make a 250 us delay */
 411   2              CyDelayCycles(CY_PM_WAIT_250_US * CY_PM_GET_CPU_FREQ_MHZ);
 412   2          }   /* (CY_PM_ENABLED == cyPmClockBackup.pllEnableState) */
 413   1      
 414   1      
 415   1          /* PLL and IMO is ready to be source for Master clock */
 416   1          if((CY_PM_MASTER_CLK_SRC_IMO == cyPmClockBackup.masterClkSrc) ||
 417   1             (CY_PM_MASTER_CLK_SRC_PLL == cyPmClockBackup.masterClkSrc))
 418   1          {
 419   2              /* Restore Master clock divider */
 420   2              if(CY_PM_CLKDIST_MSTR0_REG != cyPmClockBackup.clkSyncDiv)
 421   2              {
 422   3                  CyMasterClk_SetDivider(cyPmClockBackup.clkSyncDiv);
 423   3              }
 424   2      
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 8   

 425   2              /* Restore Master clock source */
 426   2              CyMasterClk_SetSource(cyPmClockBackup.masterClkSrc);
 427   2          }
 428   1      
 429   1          /* Bus clock - restore divider, if needed */
 430   1          if(cyPmClockBackup.clkBusDiv != (((uint16) CY_PM_CLK_BUS_MSB_DIV_REG << 8u) | CY_PM_CLK_BUS_LSB_DIV_RE
             -G))
 431   1          {
 432   2              CyBusClk_SetDivider(cyPmClockBackup.clkBusDiv);
 433   2          }
 434   1      
 435   1          /* Restore flash wait cycles */
 436   1          CY_PM_CACHE_CR_REG = ((CY_PM_CACHE_CR_REG & ~CY_PM_CACHE_CR_CYCLES_MASK) |
 437   1                                 cyPmClockBackup.flashWaitCycles);
 438   1      
 439   1          /* Digital and analog clocks - restore state */
 440   1          CY_PM_ACT_CFG1_REG = cyPmClockBackup.enClkA;
 441   1          CY_PM_ACT_CFG2_REG = cyPmClockBackup.enClkD;
 442   1      }
 443          
 444          
 445          /*******************************************************************************
 446          * Function Name: CyPmAltAct
 447          ********************************************************************************
 448          *
 449          * Summary:
 450          *  Puts the part into the Alternate Active (Standby) state. The Alternate Active
 451          *  state can allow for any of the capabilities of the device to be active, but
 452          *  the operation of this function is dependent on the CPU being disabled during
 453          *  the Alternate Active state. The configuration code and the component APIs
 454          *  will configure the template for the Alternate Active state to be the same as
 455          *  the Active state with the exception that the CPU will be disabled during
 456          *  Alternate Active.
 457          *
 458          *  Note Before calling this function, you must manually configure the power mode
 459          *  of the source clocks for the timer that is used as the wakeup timer.
 460          *
 461          *  PSoC3:
 462          *  Before switching to Alternate Active, if a wakeupTime other than NONE is
 463          *  specified, then the appropriate timer state is configured as specified with
 464          *  the interrupt for that timer disabled.  The wakeup source will be the
 465          *  combination of the values specified in the wakeupSource and any timer
 466          *  specified in the wakeupTime argument.  Once the wakeup condition is
 467          *  satisfied, then all saved state is restored and the function returns in the
 468          *  Active state.
 469          *
 470          *  Note that if the wakeupTime is made with a different value, the period before
 471          *  the wakeup occurs can be significantly shorter than the specified time.  If
 472          *  the next call is made with the same wakeupTime value, then the wakeup will
 473          *  occur the specified period after the previous wakeup occurred.
 474          *
 475          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 476          *  specified timer will be left as specified by wakeupTime with the timer
 477          *  enabled and the interrupt disabled.  If the CTW, FTW or One PPS is already
 478          *  configured for wakeup, for example with the SleepTimer or RTC components,
 479          *  then specify NONE for the wakeupTime and include the appropriate source for
 480          *  wakeupSource.
 481          *
 482          *  PSoC 5:
 483          *  Neither of the parameters to this function are used for PSoC 5. The device
 484          *  will go into Alternate Active mode until an enabled interrupt occurs.
 485          *
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 9   

 486          * Parameters:
 487          *  wakeupTime: Specifies a timer wakeup source and the frequency of that
 488          *              source. For PSoC 5 this parameter is ignored.
 489          *
 490          *           Define                      Time
 491          *  PM_ALT_ACT_TIME_NONE             None
 492          *  PM_ALT_ACT_TIME_ONE_PPS          One PPS: 1 second
 493          *  PM_ALT_ACT_TIME_CTW_2MS          CTW: 2 ms
 494          *  PM_ALT_ACT_TIME_CTW_4MS          CTW: 4 ms
 495          *  PM_ALT_ACT_TIME_CTW_8MS          CTW: 8 ms
 496          *  PM_ALT_ACT_TIME_CTW_16MS         CTW: 16 ms
 497          *  PM_ALT_ACT_TIME_CTW_32MS         CTW: 32 ms
 498          *  PM_ALT_ACT_TIME_CTW_64MS         CTW: 64 ms
 499          *  PM_ALT_ACT_TIME_CTW_128MS        CTW: 128 ms
 500          *  PM_ALT_ACT_TIME_CTW_256MS        CTW: 256 ms
 501          *  PM_ALT_ACT_TIME_CTW_512MS        CTW: 512 ms
 502          *  PM_ALT_ACT_TIME_CTW_1024MS       CTW: 1024 ms
 503          *  PM_ALT_ACT_TIME_CTW_2048MS       CTW: 2048 ms
 504          *  PM_ALT_ACT_TIME_CTW_4096MS       CTW: 4096 ms
 505          *  PM_ALT_ACT_TIME_FTW(1-256)*       FTW: 10us to 2.56ms
 506          *
 507          *  *Note:   PM_ALT_ACT_TIME_FTW() is a macro that takes an argument that
 508          *           specifies how many increments of 10us to delay. For PSoC 3 ES2
 509          *           silicon and earlier the valid range of values is 1 to 32.
 510                      For PSoC3 ES3 silicon the valid range of  values is 1 to 256.
 511          *
 512          *  wakeUpSource:    Specifies a bitwise mask of wakeup sources. In addition, if
 513          *                   a wakeupTime has been specified the associated timer will be
 514          *                   included as a wakeup source. For PSoC 5 this parameter is
 515          *                   ignored.
 516          *
 517          *           Define                      Source
 518          *  PM_ALT_ACT_SRC_NONE              None
 519          *  PM_ALT_ACT_SRC_COMPARATOR0       Comparator 0
 520          *  PM_ALT_ACT_SRC_COMPARATOR1       Comparator 1
 521          *  PM_ALT_ACT_SRC_COMPARATOR2       Comparator 2
 522          *  PM_ALT_ACT_SRC_COMPARATOR3       Comparator 3
 523          *  PM_ALT_ACT_SRC_INTERRUPT         Interrupt
 524          *  PM_ALT_ACT_SRC_PICU              PICU
 525          *  PM_ALT_ACT_SRC_I2C               I2C
 526          *  PM_ALT_ACT_SRC_BOOSTCONVERTER    Boost Converter
 527          *  PM_ALT_ACT_SRC_FTW               Fast Timewheel
 528          *  PM_ALT_ACT_SRC_CTW               Central Timewheel*
 529          *  PM_ALT_ACT_SRC_ONE_PPS           One PPS*
 530          *  PM_ALT_ACT_SRC_LCD               LCD
 531          *
 532          *  *Note: CTW and One PPS wakeup signals are in the same mask bit.
 533          *
 534          *  When specifying a Comparator as the wakeupSource an instance specific define
 535          *  should be used that will track with the specific comparator that the instance
 536          *  is placed into. As an example, for a Comparator instance named MyComp the
 537          *  value to OR into the mask is: MyComp_ctComp__CMP_MASK.
 538          *
 539          *  When CTW, FTW or One PPS is used as a wakeup source, the CyPmReadStatus()
 540          *  function must be called upon wakeup with corresponding parameter. Please
 541          *  refer to the CyPmReadStatus() API in the System Reference Guide for more
 542          *  information.
 543          *
 544          * Return:
 545          *  None
 546          *
 547          * Reentrant:
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 10  

 548          *  No
 549          *
 550          * Side Effects:
 551          *  For PSoC3 ES2 silicon or earlier and PSoC5 silicon, the wakeup source is not
 552          *  selectable. In this case the wakeupSource argument is ignored and any of the
 553          *  available wakeup sources will wake the device.
 554          *
 555          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 556          *  specified timer will be left as specified by wakeupTime with the timer
 557          *  enabled and the interrupt disabled.  Also, the ILO 1 KHz (if CTW timer is
 558          *  used as wakeup time) or ILO 100 KHz (if FTW timer is used as wakeup time)
 559          *  will be left started.
 560          *
 561          *******************************************************************************/
 562          void CyPmAltAct(uint16 wakeupTime, uint16 wakeupSource)
 563          {
 564   1          /* Device is PSoC 5 and the revision is ES1 or earlier. */
 565   1          #if(CY_PSOC5_ES1)
              
                      /* Arguments expected to be 0 */
                      CYASSERT((PM_ALT_ACT_TIME_NONE == wakeupTime) &&
                               (PM_ALT_ACT_SRC_NONE  == wakeupSource));
              
                      /* To remove unreferenced local variable warning */
                      wakeupTime = wakeupTime;
                      wakeupSource = wakeupSource;
              
                  #else
 576   1      
 577   1              /* FTW - save current and set new configuration */
 578   1              if((wakeupTime >= PM_ALT_ACT_TIME_FTW(1u)) && (wakeupTime <= PM_ALT_ACT_TIME_FTW(256u)))
 579   1              {
 580   2                  CyPmFtwSaveSet(PM_ALT_ACT_FTW_INTERVAL(wakeupTime));
 581   2      
 582   2                  /* Include associated timer to the wakeupSource */
 583   2                  wakeupSource |= PM_ALT_ACT_SRC_FTW;
 584   2              }
 585   1      
 586   1              /* CTW - save current and set new configuration */
 587   1              if((wakeupTime >= PM_ALT_ACT_TIME_CTW_2MS) && (wakeupTime <= PM_ALT_ACT_TIME_CTW_4096MS))
 588   1              {
 589   2                  /* Save current CTW configuration and set new one */
 590   2                  CyPmCtwSaveSet((wakeupTime - 1u) & CY_PM_CTW_INTERVAL_MASK);
 591   2      
 592   2                  /* Include associated timer to the wakeupSource */
 593   2                  wakeupSource |= PM_ALT_ACT_SRC_CTW;
 594   2              }
 595   1      
 596   1              /* 1PPS - save current and set new configuration */
 597   1              if(PM_ALT_ACT_TIME_ONE_PPS == wakeupTime)
 598   1              {
 599   2                  /* Save current 1PPS configuration and set new one */
 600   2                  CyPmOppsSaveSet();
 601   2      
 602   2                  /* Include associated timer to the wakeupSource */
 603   2                  wakeupSource |= PM_ALT_ACT_SRC_ONE_PPS;
 604   2              }
 605   1      
 606   1          #endif /* (CY_PSOC5_ES1) */
 607   1      
 608   1          /* Device is PSoC 3 and the revision is ES3 or later. */
 609   1          #if(CY_PSOC3_ES3)
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 11  

              
                      /* Save and set new wake up configuration */
              
                      /* Interrupt, PICU, I2C, Boost converter, CTW/1PPS */
                      cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
                      CY_PM_WAKEUP_CFG0_REG = (uint8) (wakeupSource >> 4u);
              
                      /* Comparators */
                      cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
                      CY_PM_WAKEUP_CFG1_REG = (((uint8) wakeupSource) & CY_PM_WAKEUP_SRC_CMPS_MASK);
              
                      /* LCD */
                      cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
                      CY_PM_WAKEUP_CFG2_REG = ((uint8) ((wakeupSource >> 12u) & 0x01u));
              
                  #endif  /* (CY_PSOC3_ES3) */
 626   1      
 627   1          /* Switch to the Alternate Active mode */
 628   1          CY_PM_MODE_CSR_REG = ((CY_PM_MODE_CSR_REG & ~CY_PM_MODE_CSR_MASK) | CY_PM_MODE_CSR_ALT_ACT);
 629   1      
 630   1          /* Recommended readback. */
 631   1          (void) CY_PM_MODE_CSR_REG;
 632   1      
 633   1          /* Two recommended NOPs to get into the mode. */
 634   1          CY_NOP;
 635   1          CY_NOP;
 636   1      
 637   1          /* Execute WFI instruction (for PSoC5 devices only) */
 638   1          CY_PM_WFI;
 639   1      
 640   1          /* Point of return from Alternate Active Mode */
 641   1      
 642   1          /* Device is PSoC 3 and the revision is ES3 or later. */
 643   1          #if(CY_PSOC3_ES3)
              
                      /* Restore wake up configuration */
                      CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
                      CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
                      CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
              
                  #endif  /* (CY_PSOC3_ES3) */
 651   1      }
 652          
 653          
 654          /*******************************************************************************
 655          * Function Name: CyPmSleep
 656          ********************************************************************************
 657          *
 658          * Summary:
 659          *  Puts the part into the Sleep state.
 660          *
 661          *  Note Before calling this function, you must manually configure the power
 662          *  mode of the source clocks for the timer that is used as wakeup timer.
 663          *
 664          *  PSoC3:
 665          *  Before switching to Sleep, if a wakeupTime other than NONE is specified,
 666          *  then the appropriate timer state is configured as specified with the
 667          *  interrupt for that timer disabled.  The wakeup source will be the combination
 668          *  of the values specified in the wakeupSource and any timer specified in the
 669          *  wakeupTime argument.  Once the wakeup condition is satisfied, then all saved
 670          *  state is restored and the function returns in the Active state.
 671          *
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 12  

 672          *  Note that if the wakeupTime is made with a different value, the period before
 673          *  the wakeup occurs can be significantly shorter than the specified time.  If
 674          *  the next call is made with the same wakeupTime value, then the wakeup will
 675          *  occur the specified period after the previous wakeup occurred.
 676          *
 677          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 678          *  specified timer will be left as specified by wakeupTime with the timer
 679          *  enabled and the interrupt disabled.  If the CTW or One PPS is already
 680          *  configured for wakeup, for example with the SleepTimer or RTC components,
 681          *  then specify NONE for the wakeupTime and include the appropriate source for
 682          *  wakeupSource.
 683          *
 684          *  PSoC 5:
 685          *  Neither parameter to this function is used for PSoC 5. The device will go
 686          *  into Sleep mode until it is woken by an interrupt from the Central Time Wheel
 687          *  (CTW). The CTW must already be configured to generate an interrupt. It is
 688          *  configured using the SleepTimer component.  Only the CTW can be used to wake
 689          *  the device from sleep mode.  The other wakeup sources, Once per second or
 690          *  Port Interrupt Controller (PICU), cannot be used reliably with PSoC 5. This
 691          *  function automatically disables these interrupt sources and then restores
 692          *  them after the devices is woken by the CTW.
 693          *
 694          *  The duration of sleep needs to be controlled so that the device doesn’t wake
 695          *  up too soon after going to sleep or remain asleep for too long.  Reliable
 696          *  sleep times of between 1ms and 8ms can be supported.  This requirement is
 697          *  satisfied with CTW settings of 4, 8 or 16 ms.  To control the sleep time the
 698          *  CTW is reset automatically just before putting the device to sleep.  The
 699          *  resulting wakeup time is half the duration programmed into the CTW with an
 700          *  uncertainty of 1 ms due to the arrival time of the first ILO clock edge.
 701          *  For example, the setting of 4 ms will result in a sleep time between 1 ms and
 702          *  2 ms.
 703          *
 704          * Parameters:
 705          *  wakeupTime:      Specifies a timer wakeup source and the frequency of that
 706          *                   source. For PSoC 5, this parameter is ignored.
 707          *
 708          *           Define                      Time
 709          *  PM_SLEEP_TIME_NONE               None
 710          *  PM_SLEEP_TIME_ONE_PPS            One PPS: 1 second
 711          *  PM_SLEEP_TIME_CTW_2MS            CTW: 2 ms
 712          *  PM_SLEEP_TIME_CTW_4MS            CTW: 4 ms
 713          *  PM_SLEEP_TIME_CTW_8MS            CTW: 8 ms
 714          *  PM_SLEEP_TIME_CTW_16MS           CTW: 16 ms
 715          *  PM_SLEEP_TIME_CTW_32MS           CTW: 32 ms
 716          *  PM_SLEEP_TIME_CTW_64MS           CTW: 64 ms
 717          *  PM_SLEEP_TIME_CTW_128MS          CTW: 128 ms
 718          *  PM_SLEEP_TIME_CTW_256MS          CTW: 256 ms
 719          *  PM_SLEEP_TIME_CTW_512MS          CTW: 512 ms
 720          *  PM_SLEEP_TIME_CTW_1024MS         CTW: 1024 ms
 721          *  PM_SLEEP_TIME_CTW_2048MS         CTW: 2048 ms
 722          *  PM_SLEEP_TIME_CTW_4096MS         CTW: 4096 ms
 723          *
 724          *  wakeUpSource:    Specifies a bitwise mask of wakeup sources. In addition, if
 725          *                   a wakeupTime has been specified the associated timer will be
 726          *                   included as a wakeup source. For PSoC 5 this parameter is
 727          *                   ignored.
 728          *
 729          *           Define                      Source
 730          *  PM_SLEEP_SRC_NONE                None
 731          *  PM_SLEEP_SRC_COMPARATOR0         Comparator 0
 732          *  PM_SLEEP_SRC_COMPARATOR1         Comparator 1
 733          *  PM_SLEEP_SRC_COMPARATOR2         Comparator 2
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 13  

 734          *  PM_SLEEP_SRC_COMPARATOR3         Comparator 3
 735          *  PM_SLEEP_SRC_PICU                PICU
 736          *  PM_SLEEP_SRC_I2C                 I2C
 737          *  PM_SLEEP_SRC_BOOSTCONVERTER      Boost Converter
 738          *  PM_SLEEP_SRC_CTW                 Central Timewheel*
 739          *  PM_SLEEP_SRC_ONE_PPS             One PPS*
 740          *  PM_SLEEP_SRC_LCD                 LCD
 741          *
 742          *  *Note:   CTW and One PPS wakeup signals are in the same mask bit.
 743          *           For PSoC 5, these are in a different bit (value 1024).
 744          *
 745          *  When specifying a Comparator as the wakeupSource an instance specific define
 746          *  should be used that will track with the specific comparator that the instance
 747          *  is placed into. As an example for a Comparator instance named MyComp the
 748          *  value to OR into the mask is: MyComp_ctComp__CMP_MASK.
 749          *
 750          *  When CTW or One PPS is used as a wakeup source, the CyPmReadStatus()
 751          *  function must be called upon wakeup with corresponding parameter. Please
 752          *  refer to the CyPmReadStatus() API in the System Reference Guide for more
 753          *  information.
 754          *
 755          * Return:
 756          *  None
 757          *
 758          * Reentrant:
 759          *  No
 760          *
 761          * Side Effects:
 762          *  For PSoC 3 ES2 silicon or earlier and PSoC5 silicon the wakeup source is not
 763          *  selectable. In this case the wakeupSource argument is ignored and any of the
 764          *  available wakeup sources will wake the device.
 765          *
 766          *  If a wakeupTime other than NONE is specified, then upon exit the state of the
 767          *  specified timer will be left as specified by wakeupTime with the timer
 768          *  enabled and the interrupt disabled. Also, the ILO 1 KHz (if CTW timer is
 769          *  used as wake up time) will be left started.
 770          *
 771          *  PSoC 3 ES2 silicon has a defect that causes connections to several analog
 772          *  resources to be unreliable when the device is placed in a low power mode.
 773          *  See the silicon errata for details.
 774          *
 775          *  The 1 kHz ILO clock is expected to be enabled for PSoC3 ES3 silicon to
 776          *  measure Hibernate/Sleep regulator settling time after a reset. The holdoff
 777          *  delay is measured using rising edges of the 1 kHz ILO.
 778          *
 779          *******************************************************************************/
 780          void CyPmSleep(uint8 wakeupTime, uint16 wakeupSource)
 781          {
 782   1          uint8 interruptState;
 783   1      
 784   1          /* Save current global interrupt enable and disable it */
 785   1          interruptState = CyEnterCriticalSection();
 786   1      
 787   1          /* Device is PSoC 3 and the revision is ES3 or later */
 788   1          #if(CY_PSOC3_ES3)
              
                      /* Hardware buzz expected to be disabled */
                      CYASSERT(0u == (CY_PM_PWRSYS_WAKE_TR2_REG & CY_PM_PWRSYS_WAKE_TR2_EN_BUZZ));
              
                      /***********************************************************************
                      * The Hibernate/Sleep regulator has a settling time after a reset.
                      * During this time, the system ignores requests to enter Sleep and
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 14  

                      * Hibernate modes. The holdoff delay is measured using rising edges of
                      * the 1 kHz ILO.
                      ***********************************************************************/
                      if(0u == (CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_PWRUP_PULSE_Q))
                      {
                          /* Disable hold off - no action on restore */
                          CY_PM_PWRSYS_SLP_TR_REG &= CY_PM_PWRSYS_SLP_TR_HIBSLP_HOLDOFF_MASK;
                      }
                      else
                      {
                          /* Abort, device is not ready for low power mode entry */
                          return;
                      }
              
                  #endif /* (CY_PSOC3_ES3) */
 811   1      
 812   1          /* Device is PSoC 5 and the revision is ES1 or earlier. */
 813   1          #if(CY_PSOC5_ES1)
              
                      /* Arguments expected to be 0 */
                      CYASSERT((PM_SLEEP_TIME_NONE == wakeupTime) &&
                               (PM_SLEEP_SRC_NONE  == wakeupSource));
              
                      /* To remove unreferenced local variable warning */
                      wakeupTime = wakeupTime;
                      wakeupSource = wakeupSource;
              
              
                      /* Preserve the Timewheel Configuration Register 2 */
                      cyPmBackup.pmTwCfg2 = CY_PM_TW_CFG2_REG;
              
                      /*  Clear the enable and interrupt enables for the FTW and ONEPPS */
                      CY_PM_TW_CFG2_REG &= ~(CY_PM_FTW_IE | CY_PM_FTW_EN | CY_PM_1PPS_EN | CY_PM_1PPS_IE);
              
                      /* Reset free-running CTW counter to 0 and held it there */
                      CY_PM_WDT_CFG_REG |= CY_PM_WDT_CFG_CTW_RESET;
              
                      /* Exit CTW counter reset state */
                      CY_PM_WDT_CFG_REG &= ~CY_PM_WDT_CFG_CTW_RESET;
              
                      /* Save and disable PICU interrupts  */
                      CyPmSavePicuInterrupts();
                      CyPmDisablePicuInterrupts();
              
                  #else
 841   1      
 842   1              /* CTW - save current and set new configuration */
 843   1              if((wakeupTime >= PM_SLEEP_TIME_CTW_2MS) && (wakeupTime <= PM_SLEEP_TIME_CTW_4096MS))
 844   1              {
 845   2                  /* Save current and set new configuration of the CTW */
 846   2                  CyPmCtwSaveSet((wakeupTime - 1u) & CY_PM_CTW_INTERVAL_MASK);
 847   2      
 848   2                  /* Include associated timer to the wakeupSource */
 849   2                  wakeupSource |= PM_SLEEP_SRC_CTW;
 850   2              }
 851   1      
 852   1              /* 1PPS - save current and set new configuration */
 853   1              if(PM_SLEEP_TIME_ONE_PPS == wakeupTime)
 854   1              {
 855   2                  /* Save current and set new configuration of the 1PPS */
 856   2                  CyPmOppsSaveSet();
 857   2      
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 15  

 858   2                  /* Include associated timer to the wakeupSource */
 859   2                  wakeupSource |= PM_SLEEP_SRC_ONE_PPS;
 860   2              }
 861   1      
 862   1          #endif /* (CY_PSOC5_ES1) */
 863   1      
 864   1          /* Device is PSoC 3 and the revision is ES3 or later. */
 865   1          #if(CY_PSOC3_ES3)
              
                      /* Save and set new wake up configuration */
              
                      /* Interrupt, PICU, I2C, Boost converter, CTW/1PPS */
                      cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
                      CY_PM_WAKEUP_CFG0_REG = (uint8) (wakeupSource >> 4u);
              
                      /* Comparators */
                      cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
                      CY_PM_WAKEUP_CFG1_REG = (((uint8) wakeupSource) & CY_PM_WAKEUP_SRC_CMPS_MASK);
              
                      /* LCD */
                      cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
                      CY_PM_WAKEUP_CFG2_REG = ((uint8) ((wakeupSource >> 12u) & 0x01u));
              
                  #endif /* (CY_PSOC3_ES3) */
 882   1      
 883   1          /* Prepare HW for Sleep/Hibernate mode */
 884   1          CyPmHibSlpSaveSet();
 885   1      
 886   1          /* Last moment IMO frequency change */
 887   1          if(0u == (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
 888   1          {
 889   2              /* IMO frequency is 12 MHz */
 890   2              cyPmBackup.imoActFreq12Mhz = CY_PM_ENABLED;
 891   2          }
 892   1          else
 893   1          {
 894   2              /* IMO frequency is not 12 MHz */
 895   2              cyPmBackup.imoActFreq12Mhz = CY_PM_DISABLED;
 896   2      
 897   2              /* Save IMO frequency */
 898   2              cyPmBackup.imoActFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
 899   2      
 900   2              /* Set IMO frequency to 12 MHz */
 901   2              CY_PM_FASTCLK_IMO_CR_REG &= ~CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
 902   2          }
 903   1      
 904   1          /* Switch to the Sleep mode */
 905   1          CY_PM_MODE_CSR_REG = ((CY_PM_MODE_CSR_REG & ~CY_PM_MODE_CSR_MASK) | CY_PM_MODE_CSR_SLEEP);
 906   1      
 907   1          /* Recommended readback. */
 908   1          (void) CY_PM_MODE_CSR_REG;
 909   1      
 910   1          /* Two recommended NOPs to get into the mode. */
 911   1          CY_NOP;
 912   1          CY_NOP;
 913   1      
 914   1          /* Execute WFI instruction (for PSoC5 devices only) */
 915   1          CY_PM_WFI;
 916   1      
 917   1          /* Point of return from Sleep Mode */
 918   1      
 919   1          /* Restore last moment IMO frequency change */
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 16  

 920   1          if(CY_PM_ENABLED != cyPmBackup.imoActFreq12Mhz)
 921   1          {
 922   2              CY_PM_FASTCLK_IMO_CR_REG  = (CY_PM_FASTCLK_IMO_CR_REG & ~CY_PM_FASTCLK_IMO_CR_FREQ_MASK) |
 923   2                                          cyPmBackup.imoActFreq;
 924   2          }
 925   1      
 926   1          /* Device is PSoC 5 and the revision is ES1 or earlier. */
 927   1          #if(CY_PSOC5_ES1)
              
                      /* Reset free-running CTW counter to 0 and held it there */
                      CY_PM_WDT_CFG_REG |= CY_PM_WDT_CFG_CTW_RESET;
              
                      /* Restore the Timewheel Configuration Register 2 */
                      CY_PM_TW_CFG2_REG = cyPmBackup.pmTwCfg2;
              
                      /* Restore PICU interrupts */
                      CyPmRestorePicuInterrupts();
              
                  #endif /* (CY_PSOC5_ES1) */
 939   1      
 940   1          /* Restore configuration */
 941   1          CyPmHibSlpRestore();
 942   1      
 943   1          /* Device is PSoC 3 and the revision is ES3 or later. */
 944   1          #if(CY_PSOC3_ES3)
              
                      /* Restore current wake up configuration */
                      CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
                      CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
                      CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
              
                  #endif /* (CY_PSOC3_ES3) */
 952   1      
 953   1          /* Restore global interrupt enable state */
 954   1          CyExitCriticalSection(interruptState);
 955   1      }
 956          
 957          
 958          /*******************************************************************************
 959          * Function Name: CyPmHibernate
 960          ********************************************************************************
 961          *
 962          * Summary:
 963          *  Puts the part into the Hibernate state.
 964          *
 965          *  PSoC3:
 966          *  Before switching to Hibernate, the current status of the PICU wakeup source
 967          *  bit is saved and then set. This configures the device to wake up from the
 968          *  PICU. Make sure you have at least one pin configured to generate a PICU
 969          *  interrupt. For pin Px.y, the register "PICU_INTTYPE_PICUx_INTTYPEy" controls
 970          *  the PICU behavior. In the TRM, this register is "PICU[0..15]_INTTYPE[0..7]."
 971          *  In the Pins component datasheet, this register is referred to as the IRQ
 972          *  option. Once the wakeup occurs, the PICU wakeup source bit is restored and
 973          *  the PSoC returns to the Active state.
 974          *
 975          *  PSoC 5:
 976          *  The only method supported for waking up from the Hibernate state is a
 977          *  hardware reset of the device.  The PICU wakeup source cannot be used
 978          *  reliably, so the PICU interrupt sources are automatically disabled by this
 979          *  function before putting the device into the Hibernate state.
 980          *
 981          * Parameters:
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 17  

 982          *  None
 983          *
 984          * Return:
 985          *  None
 986          *
 987          * Reentrant:
 988          *  No
 989          *
 990          * Side Effects:
 991          *  Applications must wait 20 us before re-entering hibernate or sleep after
 992          *  waking up from hibernate. The 20 us allows the sleep regulator time to
 993          *  stabilize before the next hibernate / sleep event occurs. The 20 us
 994          *  requirement begins when the device wakes up. There is no hardware check that
 995          *  this requirement is met. The specified delay should be done on ISR entry.
 996          *
 997          *  After wakeup PICU interrupt occurs, the Pin_ClearInterrupt() (where Pin is
 998          *  instance name of the Pins component) function must be called to clear the
 999          *  latched pin events to allow proper Hibernate mode entry andd to enable
1000          *  detection of future events.
1001          *
1002          *  PSoC 3 ES2 silicon has a defect that causes connections to several analog
1003          *  resources to be unreliable when the device is placed in a low power mode.
1004          *  See the silicon errata for details.
1005          *
1006          *  The 1 kHz ILO clock is expected to be enabled for PSoC3 ES3 silicon to
1007          *  measure Hibernate/Sleep regulator settling time after a reset. The holdoff
1008          *  delay is measured using rising edges of the 1 kHz ILO.
1009          *
1010          *******************************************************************************/
1011          void CyPmHibernate(void)
1012          {
1013   1          uint8 interruptState;
1014   1      
1015   1          /* Save current global interrupt enable and disable it */
1016   1          interruptState = CyEnterCriticalSection();
1017   1      
1018   1          /* Device is PSoC 3 and the revision is ES3 or later */
1019   1          #if(CY_PSOC3_ES3)
              
                      /***********************************************************************
                      * The Hibernate/Sleep regulator has a settling time after a reset.
                      * During this time, the system ignores requests to enter Sleep and
                      * Hibernate modes. The holdoff delay is measured using rising edges of
                      * the 1 kHz ILO.
                      ***********************************************************************/
                      if(0u == (CY_PM_MODE_CSR_REG & CY_PM_MODE_CSR_PWRUP_PULSE_Q))
                      {
                          /* Disable hold off - no action on restore */
                          CY_PM_PWRSYS_SLP_TR_REG &= CY_PM_PWRSYS_SLP_TR_HIBSLP_HOLDOFF_MASK;
                      }
                      else
                      {
                          /* Abort, device is not ready for low power mode entry */
                          return;
                      }
              
                  #endif /* (CY_PSOC3_ES3) */
1039   1      
1040   1          /* Prepare device for proper Hibernate mode entry */
1041   1          CyPmHibSaveSet();
1042   1      
1043   1          /* Device is PSoC 3 and the revision is ES3 or later. */
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 18  

1044   1          #if(CY_PSOC3_ES3)
              
                      /* Save and enable only wakeup on PICU */
                      cyPmBackup.wakeupCfg0 = CY_PM_WAKEUP_CFG0_REG;
                      CY_PM_WAKEUP_CFG0_REG = CY_PM_WAKEUP_PICU;
              
                      cyPmBackup.wakeupCfg1 = CY_PM_WAKEUP_CFG1_REG;
                      CY_PM_WAKEUP_CFG1_REG = 0x00u;
              
                      cyPmBackup.wakeupCfg2 = CY_PM_WAKEUP_CFG2_REG;
                      CY_PM_WAKEUP_CFG2_REG = 0x00u;
              
                  #endif  /* (CY_PSOC3_ES3) */
1057   1      
1058   1      
1059   1          /* Last moment IMO frequency change */
1060   1          if(0u == (CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK))
1061   1          {
1062   2              /* IMO frequency is 12 MHz */
1063   2              cyPmBackup.imoActFreq12Mhz = CY_PM_ENABLED;
1064   2          }
1065   1          else
1066   1          {
1067   2              /* IMO frequency is not 12 MHz */
1068   2              cyPmBackup.imoActFreq12Mhz = CY_PM_DISABLED;
1069   2      
1070   2              /* Save IMO frequency */
1071   2              cyPmBackup.imoActFreq = CY_PM_FASTCLK_IMO_CR_REG & CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
1072   2      
1073   2              /* Set IMO frequency to 12 MHz */
1074   2              CY_PM_FASTCLK_IMO_CR_REG &= ~CY_PM_FASTCLK_IMO_CR_FREQ_MASK;
1075   2          }
1076   1      
1077   1      
1078   1          /* Switch to Hibernate Mode */
1079   1          CY_PM_MODE_CSR_REG = ((CY_PM_MODE_CSR_REG & ~CY_PM_MODE_CSR_MASK) | CY_PM_MODE_CSR_HIBERNATE);
1080   1      
1081   1          /* Recommended readback. */
1082   1          (void) CY_PM_MODE_CSR_REG;
1083   1      
1084   1          /* Two recommended NOPs to get into the mode. */
1085   1          CY_NOP;
1086   1          CY_NOP;
1087   1      
1088   1          /* Execute WFI instruction (for PSoC5 devices only) */
1089   1          CY_PM_WFI;
1090   1      
1091   1          /* Point of return from Hibernate mode */
1092   1      
1093   1      
1094   1          /* Restore last moment IMO frequency change */
1095   1          if(CY_PM_ENABLED != cyPmBackup.imoActFreq12Mhz)
1096   1          {
1097   2              CY_PM_FASTCLK_IMO_CR_REG  = (CY_PM_FASTCLK_IMO_CR_REG & ~CY_PM_FASTCLK_IMO_CR_FREQ_MASK) |
1098   2                                          cyPmBackup.imoActFreq;
1099   2          }
1100   1      
1101   1      
1102   1          /* Restore device for proper Hibernate mode exit*/
1103   1          CyPmHibRestore();
1104   1      
1105   1          /* Device is PSoC 3 and the revision is ES3 or later. */
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 19  

1106   1          #if(CY_PSOC3_ES3)
              
                      /* Restore current wake up configuration */
                      CY_PM_WAKEUP_CFG0_REG = cyPmBackup.wakeupCfg0;
                      CY_PM_WAKEUP_CFG1_REG = cyPmBackup.wakeupCfg1;
                      CY_PM_WAKEUP_CFG2_REG = cyPmBackup.wakeupCfg2;
              
                  #endif /* (CY_PSOC3_ES3) */
1114   1      
1115   1          /* Restore global interrupt enable state */
1116   1          CyExitCriticalSection(interruptState);
1117   1      }
1118          
1119          
1120          /*******************************************************************************
1121          * Function Name: CyPmReadStatus
1122          ********************************************************************************
1123          *
1124          * Summary:
1125          *  Manages the Power Manager Interrupt Status Register.  This register has the
1126          *  interrupt status for the one pulse per second, central timewheel and fast
1127          *  timewheel timers.  This hardware register clears on read.  To allow for only
1128          *  clearing the bits of interest and preserving the other bits, this function
1129          *  uses a shadow register that retains the state.  This function reads the
1130          *  status register and ORs that value with the shadow register.  That is the
1131          *  value that is returned.  Then the bits in the mask that are set are cleared
1132          *  from this value and written back to the shadow register.
1133          *
1134          *  Note You must call this function within 1 ms (1 clock cycle of the ILO)
1135          *  after a CTW event has occurred.
1136          *
1137          * Parameters:
1138          *  mask: Bits in the shadow register to clear.
1139          *
1140          *       Define                      Source
1141          *  CY_PM_FTW_INT                Fast Timewheel
1142          *  CY_PM_CTW_INT                Central Timewheel
1143          *  CY_PM_ONEPPS_INT             One Pulse Per Second
1144          *
1145          * Return:
1146          *  Status.  Same bits values as the mask parameter.
1147          *
1148          *******************************************************************************/
1149          uint8 CyPmReadStatus(uint8 mask) 
1150          {
1151   1          static uint8 interruptStatus;
1152   1          uint8 interruptState;
1153   1          uint8 tmpStatus;
1154   1      
1155   1          /* Enter critical section */
1156   1          interruptState = CyEnterCriticalSection();
1157   1      
1158   1          /* Save value of the register, copy it and clear desired bit */
1159   1          interruptStatus |= CY_PM_INT_SR_REG;
1160   1          tmpStatus = interruptStatus;
1161   1          interruptStatus &= ~mask;
1162   1      
1163   1          /* Exit critical section */
1164   1          CyExitCriticalSection(interruptState);
1165   1      
1166   1          return(tmpStatus);
1167   1      }
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 20  

1168          
1169          
1170          /*******************************************************************************
1171          * Function Name: CyPmHibSaveSet
1172          ********************************************************************************
1173          *
1174          * Summary:
1175          *  Prepare device for proper Hibernate low power mode entry:
1176          *  - Disables I2C backup regulator
1177          *  - Saves ILO power down mode state and enable it (PSoC3 ES3)
1178          *  - Saves enable state of 1 kHz and 100 kHz ILO and disable them (PSoC3 ES3)
1179          *  - Disables sleep regulator and shorts vccd to vpwrsleep (PSoC3 ES3)
1180          *  - CyPmHibSlpSaveSet() function is called
1181          *
1182          * Parameters:
1183          *  None
1184          *
1185          * Return:
1186          *  None
1187          *
1188          * Reentrant:
1189          *  No
1190          *
1191          *******************************************************************************/
1192          static void CyPmHibSaveSet(void)
1193          {
1194   1          /* I2C backup reg must be off when the sleep regulator is unavailable */
1195   1          if(0u != (CY_PM_PWRSYS_CR1_REG & CY_PM_PWRSYS_CR1_I2CREG_BACKUP))
1196   1          {
1197   2              /***********************************************************************
1198   2              * If I2C backup regulator is enabled, all the fixed-function registers
1199   2              * store their values while device is in low power mode, otherwise their
1200   2              * configuration is lost. The I2C API makes a decision to restore or not
1201   2              * to restore I2C registers based on this. If this regulator will be
1202   2              * disabled and then enabled, I2C API will suppose that I2C block
1203   2              * registers preserved their values, while this is not true. So, the
1204   2              * backup regulator is disabled. And its value is restored only for
1205   2              * PSoC3 ES2 and PSoC5 devices. The I2C sleep APIs is responsible for
1206   2              * restoration.
1207   2              ***********************************************************************/
1208   2      
1209   2              #if(CY_PSOC3_ES2 || CY_PSOC5_ES1)
1210   2      
1211   2                  cyPmBackup.i2cRegBackup = CY_PM_ENABLED;
1212   2      
1213   2              #endif /* (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
1214   2      
1215   2              /* Disable I2C backup register */
1216   2              CY_PM_PWRSYS_CR1_REG &= ~CY_PM_PWRSYS_CR1_I2CREG_BACKUP;
1217   2          }
1218   1          else
1219   1          {
1220   2              #if(CY_PSOC3_ES2 || CY_PSOC5_ES1)
1221   2      
1222   2                  /* Save disabled state of the I2C backup regulator */
1223   2                  cyPmBackup.i2cRegBackup = CY_PM_DISABLED;
1224   2      
1225   2              #endif /* (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
1226   2          }
1227   1      
1228   1          /* Device is PSoC 3 and the revision is ES3 or later */
1229   1          #if(CY_PSOC3_ES3)
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 21  

              
                      /* Save current ILO power mode and ensure low power mode */
                      cyPmBackup.iloPowerMode = CyILO_SetPowerMode(CY_PM_POWERDOWN_MODE);
              
                      /* Save current 1kHz ILO enable state. Disabled automatically. */
                      cyPmBackup.ilo1kEnable = (0u == (CY_PM_SLOWCLK_ILO_CR0_REG & CY_PM_ILO_CR0_EN_1K)) ?
                                                  CY_PM_DISABLED : CY_PM_ENABLED;
              
                      /* Save current 100kHz ILO enable state. Disabled automatically. */
                      cyPmBackup.ilo100kEnable = (0u == (CY_PM_SLOWCLK_ILO_CR0_REG & CY_PM_ILO_CR0_EN_100K)) ?
                                                  CY_PM_DISABLED : CY_PM_ENABLED;
              
              
                      if(0u == (CY_PM_PWRSYS_SLP_TR_REG & CY_PM_PWRSYS_SLP_TR_BYPASS))
                      {
                          /* Save current bypass state */
                          cyPmBackup.slpTrBypass = CY_PM_DISABLED;
              
                          /* Disables the sleep regulator and shorts vccd to vpwrsleep */
                          CY_PM_PWRSYS_SLP_TR_REG |= CY_PM_PWRSYS_SLP_TR_BYPASS;
                      }
                      else
                      {
                          /* Save current bypass state */
                          cyPmBackup.slpTrBypass = CY_PM_ENABLED;
                      }
              
                      /* LPCOMPs are always enabled (even when BOTH ext_vccd=1 and ext_vcca=1)*/
              
                  #endif /* (CY_PSOC3_ES3) */
1260   1      
1261   1      
1262   1          /* Device is PSoC 5 and the revision is ES1 or earlier. */
1263   1          #if(CY_PSOC5_ES1)
              
                      /* Disable all the PICU interrupts */
                      CyPmDisablePicuInterrupts();
              
                  #endif  /* (CY_PSOC5_ES1) */
1269   1      
1270   1      
1271   1          /* Make the same preparations for Hibernate and Sleep modes */
1272   1          CyPmHibSlpSaveSet();
1273   1      }
1274          
1275          
1276          /*******************************************************************************
1277          * Function Name: CyPmHibRestore
1278          ********************************************************************************
1279          *
1280          * Summary:
1281          *  Restore device for proper Hibernate mode exit:
1282          *  - CyPmHibSlpSaveRestore() function is called.
1283          *  - Restores state of I2C backup regulator (PSoC3 ES2 and PSoC5 ES1)
1284          *  - Restores ILO power down mode state and enable it (PSoC3 ES3)
1285          *  - Restores enable state of 1 kHz and 100 kHz ILO and disable them (PSoC3 ES3)
1286          *  - Restores sleep regulator settings (PSoC3 ES3)
1287          *
1288          * Parameters:
1289          *  None
1290          *
1291          * Return:
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 22  

1292          *  None
1293          *
1294          *******************************************************************************/
1295          static void CyPmHibRestore(void) 
1296          {
1297   1          /* Restore the same configuration for Hibernate and Sleep modes */
1298   1          CyPmHibSlpRestore();
1299   1      
1300   1          #if(CY_PSOC3_ES2 || CY_PSOC5_ES1)
1301   1      
1302   1              /* Restore I2C backup regulator configuration */
1303   1              if(CY_PM_ENABLED == cyPmBackup.i2cRegBackup)
1304   1              {
1305   2                  /* Enable I2C backup regulator state */
1306   2                  CY_PM_PWRSYS_CR1_REG |= CY_PM_PWRSYS_CR1_I2CREG_BACKUP;
1307   2              }
1308   1      
1309   1          #endif /* (CY_PSOC3_ES2 || CY_PSOC5_ES1) */
1310   1      
1311   1          /* Device is PSoC 3 and the revision is ES3 or later */
1312   1          #if(CY_PSOC3_ES3)
              
                      /* Restore 1kHz ILO enable state */
                      if(CY_PM_ENABLED == cyPmBackup.ilo1kEnable)
                      {
                          /* Enable 1kHz ILO */
                          CyILO_Start1K();
                      }
              
                      /* Restore 100kHz ILO enable state */
                      if(CY_PM_ENABLED == cyPmBackup.ilo100kEnable)
                      {
                          /* Enable 100kHz ILO */
                          CyILO_Start100K();
                      }
              
                      /* Restore ILO power mode */
                      CyILO_SetPowerMode(cyPmBackup.iloPowerMode);
              
              
                      if(CY_PM_DISABLED == cyPmBackup.slpTrBypass)
                      {
                          /* Enable the sleep regulator */
                          CY_PM_PWRSYS_SLP_TR_REG &= ~CY_PM_PWRSYS_SLP_TR_BYPASS;
                      }
              
                  #endif /* (CY_PSOC3_ES3) */
1339   1      }
1340          
1341          
1342          /* Device is PSoC 3 */
1343          #if(CY_PSOC3)
1344          
1345              /*******************************************************************************
1346              * Function Name: CyPmCtwSaveSet
1347              ********************************************************************************
1348              *
1349              * Summary:
1350              *  Performs CTW configuration:
1351              *  - Disables CTW interrupt
1352              *  - Enables 1 kHz ILO
1353              *  - Saves current CTW interval and set new one. The CTW interval could be set
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 23  

1354              *    only while CTW is disabled
1355              *
1356              * Parameters:
1357              *  ctwInterval: the CTW interval to be set.
1358              *
1359              * Return:
1360              *  None
1361              *
1362              * Reentrant:
1363              *  No
1364              *
1365              *******************************************************************************/
1366              static void CyPmCtwSaveSet(uint8 ctwInterval)
1367              {
1368   1              /* Disable CTW interrupt enable if not yet */
1369   1              if(0u != (CY_PM_TW_CFG2_REG & CY_PM_CTW_IE))
1370   1              {
1371   2                  /* Disable CTW interrupt */
1372   2                  CY_PM_TW_CFG2_REG &= ~CY_PM_CTW_IE;
1373   2              }   /* Do nothing if CTW interrupt is disabled */
1374   1      
1375   1              /* Enable 1kHz ILO if needed */
1376   1              if(0u == (CY_PM_SLOWCLK_ILO_CR0_REG & CY_PM_ILO_CR0_EN_1K))
1377   1              {
1378   2                  /* Enable the 1kHz ILO */
1379   2                  CyILO_Start1K();
1380   2              }
1381   1      
1382   1              /* Enable CTW and update interval if needed */
1383   1              if(0u != (CY_PM_TW_CFG2_REG & CY_PM_CTW_EN))
1384   1              {
1385   2                  /* Set CTW interval if needed */
1386   2                  if(CY_PM_TW_CFG1_REG != ctwInterval)
1387   2                  {
1388   3                      /* Disable the CTW, set new CTW interval and enable it again */
1389   3                      CY_PM_TW_CFG2_REG &= ~CY_PM_CTW_EN;
1390   3                      CY_PM_TW_CFG1_REG = ctwInterval;
1391   3                      CY_PM_TW_CFG2_REG |= CY_PM_CTW_EN;
1392   3                  }   /* Required interval is already set */
1393   2              }
1394   1              else
1395   1              {
1396   2                  /* Set CTW interval if needed */
1397   2                  if(CY_PM_TW_CFG1_REG != ctwInterval)
1398   2                  {
1399   3                      /* Set the new CTW interval. Could be changed if CTW is disabled */
1400   3                      CY_PM_TW_CFG1_REG = ctwInterval;
1401   3                  }   /* Required interval is already set */
1402   2      
1403   2                  /* Enable the CTW */
1404   2                  CY_PM_TW_CFG2_REG |= CY_PM_CTW_EN;
1405   2              }
1406   1          }
1407          
1408          
1409              /*******************************************************************************
1410              * Function Name: CyPmOppsSaveSet
1411              ********************************************************************************
1412              *
1413              * Summary:
1414              *  Performs One PPS configuration:
1415              *  - Starts 32 KHz XTAL
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 24  

1416              *  - Disables OnePPS interupts
1417              *  - Enables OnePPS
1418              *
1419              * Parameters:
1420              *  None
1421              *
1422              * Return:
1423              *  None
1424              *
1425              * Reentrant:
1426              *  No
1427              *
1428              *******************************************************************************/
1429              static void CyPmOppsSaveSet(void)
1430              {
1431   1              /* Enable 32kHz XTAL if needed */
1432   1              if(0u == (CY_PM_SLOWCLK_X32_CR_REG & CY_PM_X32_CR_X32EN))
1433   1              {
1434   2                  /* Enable 32kHz XTAL */
1435   2                  CyXTAL_32KHZ_Start();
1436   2              }
1437   1      
1438   1              /* Disable 1PPS interrupt enable if needed */
1439   1              if(0u != (CY_PM_TW_CFG2_REG & CY_PM_1PPS_IE))
1440   1              {
1441   2                  /* Disable 1PPS interrupt */
1442   2                  CY_PM_TW_CFG2_REG &= ~CY_PM_1PPS_IE;
1443   2              }
1444   1      
1445   1              /* Enable 1PPS if needed */
1446   1              if(0u == (CY_PM_TW_CFG2_REG & CY_PM_1PPS_EN))
1447   1              {
1448   2                  /* Enable 1PPS operation */
1449   2                  CY_PM_TW_CFG2_REG |= CY_PM_1PPS_EN;
1450   2              }
1451   1          }
1452          
1453          
1454              /*******************************************************************************
1455              * Function Name: CyPmFtwSaveSet
1456              ********************************************************************************
1457              *
1458              * Summary:
1459              *  Performs CTW configuration:
1460              *  - Disables FTW interrupt
1461              *  - Enables 100 kHz ILO
1462              *  - Sets new FTW interval. The CTW interval could be set only while FTW is
1463              *    disabled
1464              *
1465              * Parameters:
1466              *  ftwInterval - FTW counter interval.
1467              *
1468              * Return:
1469              *  None
1470              *
1471              * Reentrant:
1472              *  No
1473              *
1474              *******************************************************************************/
1475              static void CyPmFtwSaveSet(uint8 ftwInterval)
1476              {
1477   1              /* Disable FTW interrupt enable if needed */
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 25  

1478   1              if(0u != (CY_PM_TW_CFG2_REG & CY_PM_FTW_IE))
1479   1              {
1480   2                  /* Disable FTW interrupt */
1481   2                  CY_PM_TW_CFG2_REG &= ~CY_PM_FTW_IE;
1482   2              }
1483   1      
1484   1              /* Enable 100kHz ILO if needed */
1485   1              if(0u == (CY_PM_SLOWCLK_ILO_CR0_REG & CY_PM_ILO_CR0_EN_100K))
1486   1              {
1487   2                  /* Enable the 100kHz ILO */
1488   2                  CyILO_Start100K();
1489   2              }
1490   1      
1491   1              /* Enable FTW and set new FTW interval if needed */
1492   1              if(0u != (CY_PM_TW_CFG2_REG & CY_PM_FTW_EN))
1493   1              {
1494   2                  /* Disable FTW, set new FTW interval if needed and enable it again */
1495   2                  if(CY_PM_TW_CFG0_REG != ftwInterval)
1496   2                  {
1497   3                      /* Disable the CTW, set new CTW interval and enable it again */
1498   3                      CY_PM_TW_CFG2_REG &= ~CY_PM_FTW_EN;
1499   3                      CY_PM_TW_CFG0_REG = ftwInterval;
1500   3                      CY_PM_TW_CFG2_REG |= CY_PM_FTW_EN;
1501   3                  }   /* Required interval is already set */
1502   2              }
1503   1              else
1504   1              {
1505   2                  /* Set new FTW counter interval if needed. FTW is disabled. */
1506   2                  if(CY_PM_TW_CFG0_REG != ftwInterval)
1507   2                  {
1508   3                      /* Set the new CTW interval. Could be changed if CTW is disabled */
1509   3                      CY_PM_TW_CFG0_REG = ftwInterval;
1510   3                  }   /* Required interval is already set */
1511   2      
1512   2                  /* Enable the FTW */
1513   2                  CY_PM_TW_CFG2_REG |= CY_PM_FTW_EN;
1514   2              }
1515   1          }
1516          
1517          #endif  /* (CY_PSOC3) */
1518          
1519          
1520          /* Device is PSoC 5 */
1521          #if(CY_PSOC5)
              
                  /*******************************************************************************
                  * Function Name: CyPmSavePicuInterrupts
                  ********************************************************************************
                  *
                  * Summary:
                  *  Saves PICU interrupt type registers to the backup structure.
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  None
                  *
                  * Reentrant:
                  *  No
                  *
                  *******************************************************************************/
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 26  

                  static void CyPmSavePicuInterrupts(void)
                  {
                      /* Save all the PICU interrupt type */
                      memcpy((void *) &cyPmBackup.picuIntType[0u],
                             (void *) CY_PM_PICU_0_6_INT_BASE,
                             CY_PM_PICU_0_6_INT_SIZE);
              
                      memcpy((void *) &cyPmBackup.picuIntType[CY_PM_PICU_0_6_INT_SIZE],
                             (void *) CY_PM_PICU_12_INT_BASE,
                             CY_PM_PICU_12_INT_SIZE);
              
                      memcpy((void *) &cyPmBackup.picuIntType[CY_PM_PICU_0_6_INT_SIZE + CY_PM_PICU_12_INT_SIZE],
                             (void *) CY_PM_PICU_15_INT_BASE,
                             CY_PM_PICU_15_INT_SIZE);
              
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyPmDisablePicuInterrupts
                  ********************************************************************************
                  *
                  * Summary:
                  *  Disableds PICU interrupts.
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  static void CyPmDisablePicuInterrupts(void) 
                  {
                      /* Disable all the PICU interrupts */
                      memset((void *) CY_PM_PICU_0_6_INT_BASE, 0, CY_PM_PICU_0_6_INT_SIZE);
                      memset((void *) CY_PM_PICU_12_INT_BASE,  0, CY_PM_PICU_12_INT_SIZE );
                      memset((void *) CY_PM_PICU_15_INT_BASE,  0, CY_PM_PICU_15_INT_SIZE );
                  }
              
              
                  /*******************************************************************************
                  * Function Name: CyPmRestorePicuInterrupts
                  ********************************************************************************
                  *
                  * Summary:
                  *  Restores PICU interrupt type registers from the backup structure.
                  *
                  * Parameters:
                  *  None
                  *
                  * Return:
                  *  None
                  *
                  *******************************************************************************/
                  static void CyPmRestorePicuInterrupts(void) 
                  {
                      /* Save all the PICU interrupt type */
                      memcpy((void *) CY_PM_PICU_0_6_INT_BASE,
                             (void *) &cyPmBackup.picuIntType[0u],
                             CY_PM_PICU_0_6_INT_SIZE);
              
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 27  

                      memcpy((void *) CY_PM_PICU_12_INT_BASE,
                             (void *) &cyPmBackup.picuIntType[CY_PM_PICU_0_6_INT_SIZE],
                             CY_PM_PICU_12_INT_SIZE);
              
                      memcpy((void *) CY_PM_PICU_15_INT_BASE,
                             (void *) &cyPmBackup.picuIntType[CY_PM_PICU_0_6_INT_SIZE + CY_PM_PICU_12_INT_SIZE],
                             CY_PM_PICU_15_INT_SIZE);
              
                  }
              
              #endif  /* (CY_PSOC5) */
1613          
1614          
1615          /*******************************************************************************
1616          * Function Name: CyPmHibSlpSaveSet
1617          ********************************************************************************
1618          *
1619          * Summary:
1620          *  This API is used for preparing device for Sleep and Hibernate low power
1621          *  modes entry:
1622          *  - Performs proper LVI/HVI configuration
1623          *  - Saves COMP, VIDAC, DSM and SAR routing connections of PSoC5
1624          *  - Saves SC/CT routing connections of PSoC and PSoC3 ES3
1625          *  - Disables Serial Wire Viewer (SWV) (PSoC3 ES3)
1626          *  - Increases buzz rate of PSoC3 ES2 (it cannot be disabled)
1627          *  - Saves enable state of delay between the system bus and analog clocks
1628          *
1629          * Parameters:
1630          *  None
1631          *
1632          * Return:
1633          *  None
1634          *
1635          * Reentrant:
1636          *  No
1637          *
1638          *******************************************************************************/
1639          static void CyPmHibSlpSaveSet(void)
1640          {
1641   1          /***************************************************************************
1642   1          * PSoC5 ES3:
1643   1          * LVI/HVI must be disabled in Hibernate
1644   1          * LVI/HVI must be disabled in Sleep due to:
1645   1          *  - Hardware buzz is disabled while it is required for LVI/HVI
1646   1          *  - There is no support for LVI/HVI in Global Signal Reference component
1647   1          *
1648   1          * PSoC3 ES2 and PSoC5 ES1:
1649   1          * LVI/HVI must be disabled as it doesn't work during buzzing
1650   1          *
1651   1          ***************************************************************************/
1652   1          /* Save LVI/HVI configuration */
1653   1          cyPmBackup.lviaLvidHvi = (CY_PM_RESET_CR1_REG & CY_PM_RESET_CR1_HVI_LVI_EN_MASK);
1654   1      
1655   1          /* Disable LVI/HVI */
1656   1          CY_PM_RESET_CR1_REG &= ~CY_PM_RESET_CR1_HVI_LVI_EN_MASK;
1657   1      
1658   1          /* Device is PSoC 5 and the revision is ES1 */
1659   1          #if(CY_PSOC5_ES1)
              
                      /* Save CMP routing registers */
                      cyPmBackup.cmpData[0u]  = CY_GET_REG8(CYREG_CMP0_SW0);
                      cyPmBackup.cmpData[1u]  = CY_GET_REG8(CYREG_CMP0_SW2);
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 28  

                      cyPmBackup.cmpData[2u]  = CY_GET_REG8(CYREG_CMP0_SW3);
                      cyPmBackup.cmpData[3u]  = CY_GET_REG8(CYREG_CMP0_SW4);
                      cyPmBackup.cmpData[4u]  = CY_GET_REG8(CYREG_CMP0_SW6);
              
                      cyPmBackup.cmpData[5u]  = CY_GET_REG8(CYREG_CMP1_SW0);
                      cyPmBackup.cmpData[6u]  = CY_GET_REG8(CYREG_CMP1_SW2);
                      cyPmBackup.cmpData[7u]  = CY_GET_REG8(CYREG_CMP1_SW3);
                      cyPmBackup.cmpData[8u]  = CY_GET_REG8(CYREG_CMP1_SW4);
                      cyPmBackup.cmpData[9u]  = CY_GET_REG8(CYREG_CMP1_SW6);
              
                      cyPmBackup.cmpData[10u] = CY_GET_REG8(CYREG_CMP2_SW0);
                      cyPmBackup.cmpData[11u] = CY_GET_REG8(CYREG_CMP2_SW2);
                      cyPmBackup.cmpData[12u] = CY_GET_REG8(CYREG_CMP2_SW3);
                      cyPmBackup.cmpData[13u] = CY_GET_REG8(CYREG_CMP2_SW4);
                      cyPmBackup.cmpData[14u] = CY_GET_REG8(CYREG_CMP2_SW6);
              
                      cyPmBackup.cmpData[15u] = CY_GET_REG8(CYREG_CMP3_SW0);
                      cyPmBackup.cmpData[16u] = CY_GET_REG8(CYREG_CMP3_SW2);
                      cyPmBackup.cmpData[17u] = CY_GET_REG8(CYREG_CMP3_SW3);
                      cyPmBackup.cmpData[18u] = CY_GET_REG8(CYREG_CMP3_SW4);
                      cyPmBackup.cmpData[19u] = CY_GET_REG8(CYREG_CMP3_SW6);
              
              
                      /* Clear CMP routing registers */
                      CY_SET_REG8(CYREG_CMP0_SW0 , 0u);
                      CY_SET_REG8(CYREG_CMP0_SW2 , 0u);
                      CY_SET_REG8(CYREG_CMP0_SW3 , 0u);
                      CY_SET_REG8(CYREG_CMP0_SW4 , 0u);
                      CY_SET_REG8(CYREG_CMP0_SW6 , 0u);
              
                      CY_SET_REG8(CYREG_CMP1_SW0 , 0u);
                      CY_SET_REG8(CYREG_CMP1_SW2 , 0u);
                      CY_SET_REG8(CYREG_CMP1_SW3 , 0u);
                      CY_SET_REG8(CYREG_CMP1_SW4 , 0u);
                      CY_SET_REG8(CYREG_CMP1_SW6 , 0u);
              
                      CY_SET_REG8(CYREG_CMP2_SW0 , 0u);
                      CY_SET_REG8(CYREG_CMP2_SW2 , 0u);
                      CY_SET_REG8(CYREG_CMP2_SW3 , 0u);
                      CY_SET_REG8(CYREG_CMP2_SW4 , 0u);
                      CY_SET_REG8(CYREG_CMP2_SW6 , 0u);
              
                      CY_SET_REG8(CYREG_CMP3_SW0 , 0u);
                      CY_SET_REG8(CYREG_CMP3_SW2 , 0u);
                      CY_SET_REG8(CYREG_CMP3_SW3 , 0u);
                      CY_SET_REG8(CYREG_CMP3_SW4 , 0u);
                      CY_SET_REG8(CYREG_CMP3_SW6 , 0u);
              
              
                      /* Save DAC routing registers */
                      cyPmBackup.dacData[0u]  = CY_GET_REG8(CYREG_DAC0_SW0);
                      cyPmBackup.dacData[1u]  = CY_GET_REG8(CYREG_DAC0_SW2);
                      cyPmBackup.dacData[2u]  = CY_GET_REG8(CYREG_DAC0_SW3);
                      cyPmBackup.dacData[3u]  = CY_GET_REG8(CYREG_DAC0_SW4);
              
                      cyPmBackup.dacData[4u]  = CY_GET_REG8(CYREG_DAC1_SW0);
                      cyPmBackup.dacData[5u]  = CY_GET_REG8(CYREG_DAC1_SW2);
                      cyPmBackup.dacData[6u]  = CY_GET_REG8(CYREG_DAC1_SW3);
                      cyPmBackup.dacData[7u]  = CY_GET_REG8(CYREG_DAC1_SW4);
              
                      cyPmBackup.dacData[8u]  = CY_GET_REG8(CYREG_DAC2_SW0);
                      cyPmBackup.dacData[9u]  = CY_GET_REG8(CYREG_DAC2_SW2);
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 29  

                      cyPmBackup.dacData[10u] = CY_GET_REG8(CYREG_DAC2_SW3);
                      cyPmBackup.dacData[11u] = CY_GET_REG8(CYREG_DAC2_SW4);
              
                      cyPmBackup.dacData[12u] = CY_GET_REG8(CYREG_DAC3_SW0);
                      cyPmBackup.dacData[13u] = CY_GET_REG8(CYREG_DAC3_SW2);
                      cyPmBackup.dacData[14u] = CY_GET_REG8(CYREG_DAC3_SW3);
                      cyPmBackup.dacData[15u] = CY_GET_REG8(CYREG_DAC3_SW4);
              
                      /* Clear DAC routing registers */
                      CY_SET_REG8(CYREG_DAC0_SW0 , 0u);
                      CY_SET_REG8(CYREG_DAC0_SW2 , 0u);
                      CY_SET_REG8(CYREG_DAC0_SW3 , 0u);
                      CY_SET_REG8(CYREG_DAC0_SW4 , 0u);
              
                      CY_SET_REG8(CYREG_DAC1_SW0 , 0u);
                      CY_SET_REG8(CYREG_DAC1_SW2 , 0u);
                      CY_SET_REG8(CYREG_DAC1_SW3 , 0u);
                      CY_SET_REG8(CYREG_DAC1_SW4 , 0u);
              
                      CY_SET_REG8(CYREG_DAC2_SW0 , 0u);
                      CY_SET_REG8(CYREG_DAC2_SW2 , 0u);
                      CY_SET_REG8(CYREG_DAC2_SW3 , 0u);
                      CY_SET_REG8(CYREG_DAC2_SW4 , 0u);
              
                      CY_SET_REG8(CYREG_DAC3_SW0 , 0u);
                      CY_SET_REG8(CYREG_DAC3_SW2 , 0u);
                      CY_SET_REG8(CYREG_DAC3_SW3 , 0u);
                      CY_SET_REG8(CYREG_DAC3_SW4 , 0u);
              
              
                      /* Save DSM routing registers */
                      cyPmBackup.dsmData[0u]  = CY_GET_REG8(CYREG_DSM0_SW0);
                      cyPmBackup.dsmData[1u]  = CY_GET_REG8(CYREG_DSM0_SW2);
                      cyPmBackup.dsmData[2u]  = CY_GET_REG8(CYREG_DSM0_SW3);
                      cyPmBackup.dsmData[3u]  = CY_GET_REG8(CYREG_DSM0_SW4);
                      cyPmBackup.dsmData[4u]  = CY_GET_REG8(CYREG_DSM0_SW6);
              
                      /* Clear DSM routing registers */
                      CY_SET_REG8(CYREG_DSM0_SW0 , 0u);
                      CY_SET_REG8(CYREG_DSM0_SW2 , 0u);
                      CY_SET_REG8(CYREG_DSM0_SW3 , 0u);
                      CY_SET_REG8(CYREG_DSM0_SW4 , 0u);
                      CY_SET_REG8(CYREG_DSM0_SW6 , 0u);
              
              
                      /* Save SAR routing registers */
                      cyPmBackup.sarData[0u]  = CY_GET_REG8(CYREG_SAR0_SW0);
                      cyPmBackup.sarData[1u]  = CY_GET_REG8(CYREG_SAR0_SW2);
                      cyPmBackup.sarData[2u]  = CY_GET_REG8(CYREG_SAR0_SW3);
                      cyPmBackup.sarData[3u]  = CY_GET_REG8(CYREG_SAR0_SW4);
                      cyPmBackup.sarData[4u]  = CY_GET_REG8(CYREG_SAR0_SW6);
              
                      cyPmBackup.sarData[5u]  = CY_GET_REG8(CYREG_SAR1_SW0);
                      cyPmBackup.sarData[6u]  = CY_GET_REG8(CYREG_SAR1_SW2);
                      cyPmBackup.sarData[7u]  = CY_GET_REG8(CYREG_SAR1_SW3);
                      cyPmBackup.sarData[8u]  = CY_GET_REG8(CYREG_SAR1_SW4);
                      cyPmBackup.sarData[9u]  = CY_GET_REG8(CYREG_SAR1_SW6);
              
              
                      /* Clear SAR routing registers */
                      CY_SET_REG8(CYREG_SAR0_SW0 , 0u);
                      CY_SET_REG8(CYREG_SAR0_SW2 , 0u);
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 30  

                      CY_SET_REG8(CYREG_SAR0_SW3 , 0u);
                      CY_SET_REG8(CYREG_SAR0_SW4 , 0u);
                      CY_SET_REG8(CYREG_SAR0_SW6 , 0u);
              
                      CY_SET_REG8(CYREG_SAR1_SW0 , 0u);
                      CY_SET_REG8(CYREG_SAR1_SW2 , 0u);
                      CY_SET_REG8(CYREG_SAR1_SW3 , 0u);
                      CY_SET_REG8(CYREG_SAR1_SW4 , 0u);
                      CY_SET_REG8(CYREG_SAR1_SW6 , 0u);
              
                  #endif  /* (CY_PSOC5_ES1) */
1799   1      
1800   1          /* Device is PSoC 3 and the revision is ES3 or later, or
1801   1          *  device is PSoC 5 and the revision is ES1 or earlier.
1802   1          */
1803   1          #if(CY_PSOC3_ES3 || CY_PSOC5_ES1)
              
                      /* Save SC/CT routing registers */
                      cyPmBackup.scctData[0u]   = CY_GET_REG8(CYREG_SC0_SW0 );
                      cyPmBackup.scctData[1u]   = CY_GET_REG8(CYREG_SC0_SW2 );
                      cyPmBackup.scctData[2u]   = CY_GET_REG8(CYREG_SC0_SW3 );
                      cyPmBackup.scctData[3u]   = CY_GET_REG8(CYREG_SC0_SW4 );
                      cyPmBackup.scctData[4u]   = CY_GET_REG8(CYREG_SC0_SW6 );
                      cyPmBackup.scctData[5u]   = CY_GET_REG8(CYREG_SC0_SW8 );
                      cyPmBackup.scctData[6u]   = CY_GET_REG8(CYREG_SC0_SW10);
              
                      cyPmBackup.scctData[7u]   = CY_GET_REG8(CYREG_SC1_SW0 );
                      cyPmBackup.scctData[8u]   = CY_GET_REG8(CYREG_SC1_SW2 );
                      cyPmBackup.scctData[9u]   = CY_GET_REG8(CYREG_SC1_SW3 );
                      cyPmBackup.scctData[10u]  = CY_GET_REG8(CYREG_SC1_SW4 );
                      cyPmBackup.scctData[11u]  = CY_GET_REG8(CYREG_SC1_SW6 );
                      cyPmBackup.scctData[12u]  = CY_GET_REG8(CYREG_SC1_SW8 );
                      cyPmBackup.scctData[13u]  = CY_GET_REG8(CYREG_SC1_SW10);
              
                      cyPmBackup.scctData[14u]  = CY_GET_REG8(CYREG_SC2_SW0 );
                      cyPmBackup.scctData[15u]  = CY_GET_REG8(CYREG_SC2_SW2 );
                      cyPmBackup.scctData[16u]  = CY_GET_REG8(CYREG_SC2_SW3 );
                      cyPmBackup.scctData[17u]  = CY_GET_REG8(CYREG_SC2_SW4 );
                      cyPmBackup.scctData[18u]  = CY_GET_REG8(CYREG_SC2_SW6 );
                      cyPmBackup.scctData[19u]  = CY_GET_REG8(CYREG_SC2_SW8 );
                      cyPmBackup.scctData[20u]  = CY_GET_REG8(CYREG_SC2_SW10);
              
                      cyPmBackup.scctData[21u]  = CY_GET_REG8(CYREG_SC3_SW0 );
                      cyPmBackup.scctData[22u]  = CY_GET_REG8(CYREG_SC3_SW2 );
                      cyPmBackup.scctData[23u]  = CY_GET_REG8(CYREG_SC3_SW3 );
                      cyPmBackup.scctData[24u]  = CY_GET_REG8(CYREG_SC3_SW4 );
                      cyPmBackup.scctData[25u]  = CY_GET_REG8(CYREG_SC3_SW6 );
                      cyPmBackup.scctData[26u]  = CY_GET_REG8(CYREG_SC3_SW8 );
                      cyPmBackup.scctData[27u]  = CY_GET_REG8(CYREG_SC3_SW10);
              
                      CY_SET_REG8(CYREG_SC0_SW0 , 0u);
                      CY_SET_REG8(CYREG_SC0_SW2 , 0u);
                      CY_SET_REG8(CYREG_SC0_SW3 , 0u);
                      CY_SET_REG8(CYREG_SC0_SW4 , 0u);
                      CY_SET_REG8(CYREG_SC0_SW6 , 0u);
                      CY_SET_REG8(CYREG_SC0_SW8 , 0u);
                      CY_SET_REG8(CYREG_SC0_SW10, 0u);
              
                      CY_SET_REG8(CYREG_SC1_SW0 , 0u);
                      CY_SET_REG8(CYREG_SC1_SW2 , 0u);
                      CY_SET_REG8(CYREG_SC1_SW3 , 0u);
                      CY_SET_REG8(CYREG_SC1_SW4 , 0u);
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 31  

                      CY_SET_REG8(CYREG_SC1_SW6 , 0u);
                      CY_SET_REG8(CYREG_SC1_SW8 , 0u);
                      CY_SET_REG8(CYREG_SC1_SW10, 0u);
              
                      CY_SET_REG8(CYREG_SC2_SW0 , 0u);
                      CY_SET_REG8(CYREG_SC2_SW2 , 0u);
                      CY_SET_REG8(CYREG_SC2_SW3 , 0u);
                      CY_SET_REG8(CYREG_SC2_SW4 , 0u);
                      CY_SET_REG8(CYREG_SC2_SW6 , 0u);
                      CY_SET_REG8(CYREG_SC2_SW8 , 0u);
                      CY_SET_REG8(CYREG_SC2_SW10, 0u);
              
                      CY_SET_REG8(CYREG_SC3_SW0 , 0u);
                      CY_SET_REG8(CYREG_SC3_SW2 , 0u);
                      CY_SET_REG8(CYREG_SC3_SW3 , 0u);
                      CY_SET_REG8(CYREG_SC3_SW4 , 0u);
                      CY_SET_REG8(CYREG_SC3_SW6 , 0u);
                      CY_SET_REG8(CYREG_SC3_SW8 , 0u);
                      CY_SET_REG8(CYREG_SC3_SW10, 0u);
              
                  #endif  /* (CY_PSOC3_ES3 || CY_PSOC5_ES1) */
1871   1      
1872   1          /* Device is PSoC 3 and the revision is ES3 or later */
1873   1          #if(CY_PSOC3_ES3)
              
                      /* Serial Wire Viewer (SWV) workaround */
              
                      /* Disable SWV before entering low power mode */
                      if(0u != (CY_PM_MLOGIC_DBG_REG & CY_PM_MLOGIC_DBG_SWV_CLK_EN))
                      {
                          /* Save SWV clock enabled state */
                          cyPmBackup.swvClkEnabled = CY_PM_ENABLED;
              
                          /* Save current ports drive mode settings */
                          cyPmBackup.prt1Dm = CY_PM_PRT1_PC3_REG & ~CY_PM_PRT1_PC3_DM_MASK;
              
                          /* Set drive mode to strong output */
                          CY_PM_PRT1_PC3_REG = (CY_PM_PRT1_PC3_REG & CY_PM_PRT1_PC3_DM_MASK) |
                                              CY_PM_PRT1_PC3_DM_STRONG;
              
                          /* Disable SWV clocks */
                          CY_PM_MLOGIC_DBG_REG &= ~CY_PM_MLOGIC_DBG_SWV_CLK_EN;
                      }
                      else
                      {
                          /* Save SWV clock disabled state */
                          cyPmBackup.swvClkEnabled = CY_PM_DISABLED;
                      }
              
                  #endif  /* (CY_PSOC3_ES3) */
1900   1      
1901   1      
1902   1          /* Device is PSoC 3 and the revision is ES2 or earlier, or
1903   1          *  device is PSoC 5 and the revision is ES1 or earlier.
1904   1          */
1905   1          #if(CY_PSOC5_ES1 || CY_PSOC3_ES2)
1906   1      
1907   1              /***********************************************************************
1908   1              * PSoC 5:
1909   1              * Using hardware buzz in conjunction with other device wakeup sources
1910   1              * can cause the device to lockup, halting further code execution. The
1911   1              * hardware buzz provides power supply supervising capability in sleep.
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 32  

1912   1              * It is enabled by default and there is no way to disable it. Please
1913   1              * refer to the device errata for more information.
1914   1              *
1915   1              * The solution is to set buzz interval to maximum (512 ms) and configure
1916   1              * CTW to wake up at a rate less than hardware buzz interval.
1917   1              *
1918   1              * PSoC 3 ES2:
1919   1              * The buzz interval is just set to maximum value to decrease power
1920   1              * consumption.
1921   1              ***********************************************************************/
1922   1              cyPmBackup.buzzSleepTrim = CY_PM_PWRSYS_BUZZ_TR_REG & ~CY_PM_PWRSYS_BUZZ_TR_MASK;
1923   1      
1924   1              CY_PM_PWRSYS_BUZZ_TR_REG = CY_PM_PWRSYS_BUZZ_TR_512_TICKS | \
1925   1                                        (CY_PM_PWRSYS_BUZZ_TR_REG & CY_PM_PWRSYS_BUZZ_TR_MASK);
1926   1      
1927   1          #endif  /* (CY_PSOC5_ES1 || CY_PSOC3_ES2) */
1928   1      
1929   1      
1930   1          /***************************************************************************
1931   1          * Save enable state of delay between the system bus clock and each of the
1932   1          * 4 individual analog clocks. This bit non-retention and it's value should
1933   1          * be restored on wakeup.
1934   1          ***************************************************************************/
1935   1          if(0u != (CY_PM_CLKDIST_DELAY_REG & CY_PM_CLKDIST_DELAY_EN))
1936   1          {
1937   2              cyPmBackup.clkDistDelay = CY_PM_ENABLED;
1938   2          }
1939   1          else
1940   1          {
1941   2              cyPmBackup.clkDistDelay = CY_PM_DISABLED;
1942   2          }
1943   1      }
1944          
1945          
1946          /*******************************************************************************
1947          * Function Name: CyPmHibSlpRestore
1948          ********************************************************************************
1949          *
1950          * Summary:
1951          *  This API is used for restoring device configurations after wakeup from Sleep
1952          *  and Hibernate low power modes:
1953          *  - Restores LVI/HVI configuration
1954          *  - Restores COMP, VIDAC, DSM and SAR routing connections of PSoC5
1955          *  - Restores SC/CT routing connections of PSoC5 and PSoC3 ES3
1956          *  - Restores enable state of Serial Wire Viewer (SWV) (PSoC3 ES3)
1957          *  - Restores initial buzz rate of PSoC3 ES2
1958          *  - Restores enable state of delay between the system bus and analog clocks
1959          *
1960          * Parameters:
1961          *  None
1962          *
1963          * Return:
1964          *  None
1965          *
1966          *******************************************************************************/
1967          static void CyPmHibSlpRestore(void) 
1968          {
1969   1          /* Restore LVI/HVI configuration, saved bits are 0 */
1970   1          CY_PM_RESET_CR1_REG |= cyPmBackup.lviaLvidHvi;
1971   1      
1972   1          /* Device is PSoC 5 and the revision is ES1 */
1973   1          #if(CY_PSOC5_ES1)
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 33  

              
                      /* Restore COMP routing registers */
                      CY_SET_REG8(CYREG_CMP0_SW0 , cyPmBackup.cmpData[0u] );
                      CY_SET_REG8(CYREG_CMP0_SW2 , cyPmBackup.cmpData[1u] );
                      CY_SET_REG8(CYREG_CMP0_SW3 , cyPmBackup.cmpData[2u] );
                      CY_SET_REG8(CYREG_CMP0_SW4 , cyPmBackup.cmpData[3u] );
                      CY_SET_REG8(CYREG_CMP0_SW6 , cyPmBackup.cmpData[4u] );
              
                      CY_SET_REG8(CYREG_CMP1_SW0 , cyPmBackup.cmpData[5u] );
                      CY_SET_REG8(CYREG_CMP1_SW2 , cyPmBackup.cmpData[6u] );
                      CY_SET_REG8(CYREG_CMP1_SW3 , cyPmBackup.cmpData[7u] );
                      CY_SET_REG8(CYREG_CMP1_SW4 , cyPmBackup.cmpData[8u] );
                      CY_SET_REG8(CYREG_CMP1_SW6 , cyPmBackup.cmpData[9u] );
              
                      CY_SET_REG8(CYREG_CMP2_SW0 , cyPmBackup.cmpData[10u]);
                      CY_SET_REG8(CYREG_CMP2_SW2 , cyPmBackup.cmpData[11u]);
                      CY_SET_REG8(CYREG_CMP2_SW3 , cyPmBackup.cmpData[12u]);
                      CY_SET_REG8(CYREG_CMP2_SW4 , cyPmBackup.cmpData[13u]);
                      CY_SET_REG8(CYREG_CMP2_SW6 , cyPmBackup.cmpData[14u]);
              
                      CY_SET_REG8(CYREG_CMP3_SW0 , cyPmBackup.cmpData[15u]);
                      CY_SET_REG8(CYREG_CMP3_SW2 , cyPmBackup.cmpData[16u]);
                      CY_SET_REG8(CYREG_CMP3_SW3 , cyPmBackup.cmpData[17u]);
                      CY_SET_REG8(CYREG_CMP3_SW4 , cyPmBackup.cmpData[18u]);
                      CY_SET_REG8(CYREG_CMP3_SW6 , cyPmBackup.cmpData[19u]);
              
                      /* Restore DAC routing registers */
                      CY_SET_REG8(CYREG_DAC0_SW0 , cyPmBackup.dacData[0u] );
                      CY_SET_REG8(CYREG_DAC0_SW2 , cyPmBackup.dacData[1u] );
                      CY_SET_REG8(CYREG_DAC0_SW3 , cyPmBackup.dacData[2u] );
                      CY_SET_REG8(CYREG_DAC0_SW4 , cyPmBackup.dacData[3u] );
              
                      CY_SET_REG8(CYREG_DAC1_SW0 , cyPmBackup.dacData[4u] );
                      CY_SET_REG8(CYREG_DAC1_SW2 , cyPmBackup.dacData[5u] );
                      CY_SET_REG8(CYREG_DAC1_SW3 , cyPmBackup.dacData[6u] );
                      CY_SET_REG8(CYREG_DAC1_SW4 , cyPmBackup.dacData[7u] );
              
                      CY_SET_REG8(CYREG_DAC2_SW0 , cyPmBackup.dacData[8u] );
                      CY_SET_REG8(CYREG_DAC2_SW2 , cyPmBackup.dacData[9u] );
                      CY_SET_REG8(CYREG_DAC2_SW3 , cyPmBackup.dacData[10u]);
                      CY_SET_REG8(CYREG_DAC2_SW4 , cyPmBackup.dacData[11u]);
              
                      CY_SET_REG8(CYREG_DAC3_SW0 , cyPmBackup.dacData[12u]);
                      CY_SET_REG8(CYREG_DAC3_SW2 , cyPmBackup.dacData[13u]);
                      CY_SET_REG8(CYREG_DAC3_SW3 , cyPmBackup.dacData[14u]);
                      CY_SET_REG8(CYREG_DAC3_SW4 , cyPmBackup.dacData[15u]);
              
              
                      /* Restore DSM routing registers */
                      CY_SET_REG8(CYREG_DSM0_SW0 , cyPmBackup.dsmData[0u]);
                      CY_SET_REG8(CYREG_DSM0_SW2 , cyPmBackup.dsmData[1u]);
                      CY_SET_REG8(CYREG_DSM0_SW3 , cyPmBackup.dsmData[2u]);
                      CY_SET_REG8(CYREG_DSM0_SW4 , cyPmBackup.dsmData[3u]);
                      CY_SET_REG8(CYREG_DSM0_SW6 , cyPmBackup.dsmData[4u]);
              
              
                      /* Restore SAR routing registers */
                      CY_SET_REG8(CYREG_SAR0_SW0 , cyPmBackup.sarData[0u]);
                      CY_SET_REG8(CYREG_SAR0_SW2 , cyPmBackup.sarData[1u]);
                      CY_SET_REG8(CYREG_SAR0_SW3 , cyPmBackup.sarData[2u]);
                      CY_SET_REG8(CYREG_SAR0_SW4 , cyPmBackup.sarData[3u]);
                      CY_SET_REG8(CYREG_SAR0_SW6 , cyPmBackup.sarData[4u]);
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 34  

              
                      CY_SET_REG8(CYREG_SAR1_SW0 , cyPmBackup.sarData[5u]);
                      CY_SET_REG8(CYREG_SAR1_SW2 , cyPmBackup.sarData[6u]);
                      CY_SET_REG8(CYREG_SAR1_SW3 , cyPmBackup.sarData[7u]);
                      CY_SET_REG8(CYREG_SAR1_SW4 , cyPmBackup.sarData[8u]);
                      CY_SET_REG8(CYREG_SAR1_SW6 , cyPmBackup.sarData[9u]);
              
                  #endif  /* (CY_PSOC5_ES1) */
2044   1      
2045   1          /* Device is PSoC 3 and the revision is ES3 or later, or
2046   1          *  device is PSoC 5 and the revision is ES1 or earlier.
2047   1          */
2048   1          #if(CY_PSOC3_ES3 || CY_PSOC5_ES1)
              
                      /* Restore SC/CT routing registers */
                      CY_SET_REG8(CYREG_SC0_SW0 , cyPmBackup.scctData[0u] );
                      CY_SET_REG8(CYREG_SC0_SW2 , cyPmBackup.scctData[1u] );
                      CY_SET_REG8(CYREG_SC0_SW3 , cyPmBackup.scctData[2u] );
                      CY_SET_REG8(CYREG_SC0_SW4 , cyPmBackup.scctData[3u] );
                      CY_SET_REG8(CYREG_SC0_SW6 , cyPmBackup.scctData[4u] );
                      CY_SET_REG8(CYREG_SC0_SW8 , cyPmBackup.scctData[5u] );
                      CY_SET_REG8(CYREG_SC0_SW10, cyPmBackup.scctData[6u] );
              
                      CY_SET_REG8(CYREG_SC1_SW0 , cyPmBackup.scctData[7u] );
                      CY_SET_REG8(CYREG_SC1_SW2 , cyPmBackup.scctData[8u] );
                      CY_SET_REG8(CYREG_SC1_SW3 , cyPmBackup.scctData[9u] );
                      CY_SET_REG8(CYREG_SC1_SW4 , cyPmBackup.scctData[10u]);
                      CY_SET_REG8(CYREG_SC1_SW6 , cyPmBackup.scctData[11u]);
                      CY_SET_REG8(CYREG_SC1_SW8 , cyPmBackup.scctData[12u]);
                      CY_SET_REG8(CYREG_SC1_SW10, cyPmBackup.scctData[13u]);
              
                      CY_SET_REG8(CYREG_SC2_SW0 , cyPmBackup.scctData[14u]);
                      CY_SET_REG8(CYREG_SC2_SW2 , cyPmBackup.scctData[15u]);
                      CY_SET_REG8(CYREG_SC2_SW3 , cyPmBackup.scctData[16u]);
                      CY_SET_REG8(CYREG_SC2_SW4 , cyPmBackup.scctData[17u]);
                      CY_SET_REG8(CYREG_SC2_SW6 , cyPmBackup.scctData[18u]);
                      CY_SET_REG8(CYREG_SC2_SW8 , cyPmBackup.scctData[19u]);
                      CY_SET_REG8(CYREG_SC2_SW10, cyPmBackup.scctData[20u]);
              
                      CY_SET_REG8(CYREG_SC3_SW0 , cyPmBackup.scctData[21u]);
                      CY_SET_REG8(CYREG_SC3_SW2 , cyPmBackup.scctData[22u]);
                      CY_SET_REG8(CYREG_SC3_SW3 , cyPmBackup.scctData[23u]);
                      CY_SET_REG8(CYREG_SC3_SW4 , cyPmBackup.scctData[24u]);
                      CY_SET_REG8(CYREG_SC3_SW6 , cyPmBackup.scctData[25u]);
                      CY_SET_REG8(CYREG_SC3_SW8 , cyPmBackup.scctData[26u]);
                      CY_SET_REG8(CYREG_SC3_SW10, cyPmBackup.scctData[27u]);
              
                  #endif  /* (CY_PSOC3_ES3 || CY_PSOC5_ES1) */
2084   1      
2085   1          /* Device is PSoC 3 and the revision is ES3 or later */
2086   1          #if(CY_PSOC3_ES3)
              
                      /* Serial Wire Viewer (SWV) workaround */
                      if(CY_PM_ENABLED == cyPmBackup.swvClkEnabled)
                      {
                          /* Restore ports drive mode */
                          CY_PM_PRT1_PC3_REG = (CY_PM_PRT1_PC3_REG & CY_PM_PRT1_PC3_DM_MASK) |
                                                  cyPmBackup.prt1Dm;
              
                          /* Enable SWV clocks */
                          CY_PM_MLOGIC_DBG_REG |= CY_PM_MLOGIC_DBG_SWV_CLK_EN;
                      }
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 35  

              
                  #endif /* (CY_PSOC3_ES3) */
2100   1      
2101   1          /* Device is PSoC 3 and the revision is ES2 or earlier, or
2102   1          *  device is PSoC 5 and the revision is ES1 or earlier.
2103   1          */
2104   1          #if(CY_PSOC5_ES1 || CY_PSOC3_ES2)
2105   1      
2106   1              /* Restore buzz sleep trim value */
2107   1              CY_PM_PWRSYS_BUZZ_TR_REG = cyPmBackup.buzzSleepTrim | \
2108   1                                        (CY_PM_PWRSYS_BUZZ_TR_REG & CY_PM_PWRSYS_BUZZ_TR_MASK);
2109   1      
2110   1          #endif  /* (CY_PSOC5_ES1 || CY_PSOC3_ES2) */
2111   1      
2112   1      
2113   1          /* Restore enable state of delay between the system bus clock and ACLKs. */
2114   1          if(CY_PM_ENABLED == cyPmBackup.clkDistDelay)
2115   1          {
2116   2              /* Enable if it was enabled before low power mode entry */
2117   2              CY_PM_CLKDIST_DELAY_REG |= CY_PM_CLKDIST_DELAY_EN;
2118   2          }   /* It is expected to be off after wakeup */
2119   1      
2120   1      }
2121          
2122          /* [] END OF FILE */
2123          
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 36  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CyPmSaveClocks (BEGIN)
                                           ; SOURCE LINE # 101
                                           ; SOURCE LINE # 102
                                           ; SOURCE LINE # 104
0000 9043A1            MOV     DPTR,#043A1H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 540F              ANL     A,#0FH
0008 FF                MOV     R7,A
0009 900000      R     MOV     DPTR,#cyPmClockBackup
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 105
000E 9043A2            MOV     DPTR,#043A2H
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 900000      R     MOV     DPTR,#cyPmClockBackup+01H
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 106
0018 9043A1            MOV     DPTR,#043A1H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 54F0              ANL     A,#0F0H
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 107
0023 9043A2            MOV     DPTR,#043A2H
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 5400              ANL     A,#00H
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 110
002E 904800            MOV     DPTR,#04800H
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 EF                MOV     A,R7
0034 54C0              ANL     A,#0C0H
0036 FF                MOV     R7,A
0037 900000      R     MOV     DPTR,#cyPmClockBackup+05H
003A EF                MOV     A,R7
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 111
003C 7F31              MOV     R7,#031H
003E 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 114
0041 904200            MOV     DPTR,#04200H
0044 E0                MOVX    A,@DPTR
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 5407              ANL     A,#07H
0049 FF                MOV     R7,A
004A 900000      R     MOV     DPTR,#cyPmClockBackup+03H
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 37  

004D EF                MOV     A,R7
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 115
004F 904200            MOV     DPTR,#04200H
0052 E0                MOVX    A,@DPTR
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 5440              ANL     A,#040H
0057 FF                MOV     R7,A
0058 900000      R     MOV     DPTR,#cyPmClockBackup+04H
005B EF                MOV     A,R7
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 118
005D 904200            MOV     DPTR,#04200H
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 EF                MOV     A,R7
0063 5410              ANL     A,#010H
0065 FF                MOV     R7,A
0066 7E00              MOV     R6,#00H
0068 EF                MOV     A,R7
0069 4E                ORL     A,R6
006A 6008              JZ      ?C0001
                                           ; SOURCE LINE # 119
                                           ; SOURCE LINE # 121
006C 900000      R     MOV     DPTR,#cyPmClockBackup+09H
006F 7401              MOV     A,#01H
0071 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
0072 8005              SJMP    ?C0002
0074         ?C0001:
                                           ; SOURCE LINE # 124
                                           ; SOURCE LINE # 126
0074 900000      R     MOV     DPTR,#cyPmClockBackup+09H
0077 E4                CLR     A
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 127
0079         ?C0002:
                                           ; SOURCE LINE # 130
0079 7F02              MOV     R7,#02H
007B 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 133
007E 9043A0            MOV     DPTR,#043A0H
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 EF                MOV     A,R7
0084 5410              ANL     A,#010H
0086 FF                MOV     R7,A
0087 7E00              MOV     R6,#00H
0089 EF                MOV     A,R7
008A 4E                ORL     A,R6
008B 6008              JZ      ?C0003
                                           ; SOURCE LINE # 134
                                           ; SOURCE LINE # 136
008D 900000      R     MOV     DPTR,#cyPmClockBackup+06H
0090 7401              MOV     A,#01H
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 137
0093 800A              SJMP    ?C0004
0095         ?C0003:
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 141
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 38  

0095 900000      R     MOV     DPTR,#cyPmClockBackup+06H
0098 E4                CLR     A
0099 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
009A 7F00              MOV     R7,#00H
009C 120000      E     LCALL   _CyIMO_Start
                                           ; SOURCE LINE # 145
009F         ?C0004:
                                           ; SOURCE LINE # 148
009F 904200            MOV     DPTR,#04200H
00A2 E0                MOVX    A,@DPTR
00A3 FF                MOV     R7,A
00A4 EF                MOV     A,R7
00A5 5420              ANL     A,#020H
00A7 FF                MOV     R7,A
00A8 7E00              MOV     R6,#00H
00AA EF                MOV     A,R7
00AB 4E                ORL     A,R6
00AC 6021              JZ      ?C0005
                                           ; SOURCE LINE # 149
                                           ; SOURCE LINE # 152
00AE 904000            MOV     DPTR,#04000H
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 EF                MOV     A,R7
00B4 5440              ANL     A,#040H
00B6 FF                MOV     R7,A
00B7 7E00              MOV     R6,#00H
00B9 EF                MOV     A,R7
00BA 4E                ORL     A,R6
00BB 7004              JNZ     ?C0006
00BD 7F02              MOV     R7,#02H
00BF 8002              SJMP    ?C0007
00C1         ?C0006:
00C1 7F01              MOV     R7,#01H
00C3         ?C0007:
00C3 900000      R     MOV     DPTR,#cyPmClockBackup+07H
00C6 EF                MOV     A,R7
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 155
00C8 7F00              MOV     R7,#00H
00CA 120000      E     LCALL   _CyIMO_SetSource
                                           ; SOURCE LINE # 156
00CD 8005              SJMP    ?C0008
00CF         ?C0005:
                                           ; SOURCE LINE # 158
                                           ; SOURCE LINE # 160
00CF 900000      R     MOV     DPTR,#cyPmClockBackup+07H
00D2 E4                CLR     A
00D3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 161
00D4         ?C0008:
                                           ; SOURCE LINE # 164
00D4 904000            MOV     DPTR,#04000H
00D7 E0                MOVX    A,@DPTR
00D8 FF                MOV     R7,A
00D9 EF                MOV     A,R7
00DA 5430              ANL     A,#030H
00DC FF                MOV     R7,A
00DD 900000      R     MOV     DPTR,#cyPmClockBackup+08H
00E0 EF                MOV     A,R7
00E1 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 39  

                                           ; SOURCE LINE # 167
00E2 900000      R     MOV     DPTR,#cyPmClockBackup+08H
00E5 E0                MOVX    A,@DPTR
00E6 FF                MOV     R7,A
00E7 EF                MOV     A,R7
00E8 600B              JZ      ?C0009
                                           ; SOURCE LINE # 168
                                           ; SOURCE LINE # 170
00EA 904000            MOV     DPTR,#04000H
00ED E0                MOVX    A,@DPTR
00EE FF                MOV     R7,A
00EF EF                MOV     A,R7
00F0 54CF              ANL     A,#0CFH
00F2 FF                MOV     R7,A
00F3 EF                MOV     A,R7
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 172
00F5         ?C0009:
                                           ; SOURCE LINE # 175
00F5 904200            MOV     DPTR,#04200H
00F8 E0                MOVX    A,@DPTR
00F9 FF                MOV     R7,A
00FA EF                MOV     A,R7
00FB 5410              ANL     A,#010H
00FD FF                MOV     R7,A
00FE 7E00              MOV     R6,#00H
0100 EF                MOV     A,R7
0101 4E                ORL     A,R6
0102 6003              JZ      ?C0010
                                           ; SOURCE LINE # 176
                                           ; SOURCE LINE # 177
0104 120000      E     LCALL   CyIMO_DisableDoubler
                                           ; SOURCE LINE # 178
0107         ?C0010:
                                           ; SOURCE LINE # 181
0107 904004            MOV     DPTR,#04004H
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
010F EF                MOV     A,R7
0110 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
0111 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
0114 E0                MOVX    A,@DPTR
0115 FF                MOV     R7,A
0116 EF                MOV     A,R7
0117 6005              JZ      ?C0011
                                           ; SOURCE LINE # 183
                                           ; SOURCE LINE # 184
0119 7F00              MOV     R7,#00H
011B 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 185
011E         ?C0011:
                                           ; SOURCE LINE # 188
011E 904005            MOV     DPTR,#04005H
0121 E0                MOVX    A,@DPTR
0122 FF                MOV     R7,A
0123 EF                MOV     A,R7
0124 5403              ANL     A,#03H
0126 FF                MOV     R7,A
0127 900000      R     MOV     DPTR,#cyPmClockBackup+02H
012A EF                MOV     A,R7
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 40  

012B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
012C 900000      R     MOV     DPTR,#cyPmClockBackup+02H
012F E0                MOVX    A,@DPTR
0130 FF                MOV     R7,A
0131 EF                MOV     A,R7
0132 6005              JZ      ?C0012
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
0134 7F00              MOV     R7,#00H
0136 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 194
0139         ?C0012:
                                           ; SOURCE LINE # 197
0139 904007            MOV     DPTR,#04007H
013C E0                MOVX    A,@DPTR
013D FF                MOV     R7,A
013E 7E00              MOV     R6,#00H
0140 EF                MOV     A,R7
0141 7F00              MOV     R7,#00H
0143 FE                MOV     R6,A
0144 904006            MOV     DPTR,#04006H
0147 E0                MOVX    A,@DPTR
0148 FD                MOV     R5,A
0149 7C00              MOV     R4,#00H
014B EE                MOV     A,R6
014C 4C                ORL     A,R4
014D FE                MOV     R6,A
014E EF                MOV     A,R7
014F 4D                ORL     A,R5
0150 FF                MOV     R7,A
0151 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
0154 EE                MOV     A,R6
0155 F0                MOVX    @DPTR,A
0156 A3                INC     DPTR
0157 EF                MOV     A,R7
0158 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
0159 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
015C E0                MOVX    A,@DPTR
015D FE                MOV     R6,A
015E A3                INC     DPTR
015F E0                MOVX    A,@DPTR
0160 FF                MOV     R7,A
0161 EF                MOV     A,R7
0162 4E                ORL     A,R6
0163 6007              JZ      ?C0013
                                           ; SOURCE LINE # 199
                                           ; SOURCE LINE # 200
0165 7F00              MOV     R7,#00H
0167 7E00              MOV     R6,#00H
0169 120000      E     LCALL   _CyBusClk_SetDivider
                                           ; SOURCE LINE # 201
016C         ?C0013:
                                           ; SOURCE LINE # 204
016C 7B05              MOV     R3,#05H
016E 7A01              MOV     R2,#01H
0170 79A1              MOV     R1,#0A1H
0172 120000      E     LCALL   _cyread8
0175 7E00              MOV     R6,#00H
0177 7E00              MOV     R6,#00H
0179 EF                MOV     A,R7
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 41  

017A 540F              ANL     A,#0FH
017C FF                MOV     R7,A
017D EF                MOV     A,R7
017E 2401              ADD     A,#01H
0180 FD                MOV     R5,A
0181 EE                MOV     A,R6
0182 3400              ADDC    A,#00H
0184 FC                MOV     R4,A
0185 904200            MOV     DPTR,#04200H
0188 E0                MOVX    A,@DPTR
0189 FF                MOV     R7,A
018A EF                MOV     A,R7
018B 5407              ANL     A,#07H
018D FF                MOV     R7,A
018E EF                MOV     A,R7
018F 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0192 93                MOVC    A,@A+DPTR
0193 FF                MOV     R7,A
0194 7E00              MOV     R6,#00H
0196 120000      E     LCALL   ?C?UIDIV
0199 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 207
019C 904220            MOV     DPTR,#04220H
019F E0                MOVX    A,@DPTR
01A0 FF                MOV     R7,A
01A1 EF                MOV     A,R7
01A2 5401              ANL     A,#01H
01A4 FF                MOV     R7,A
01A5 7E00              MOV     R6,#00H
01A7 EF                MOV     A,R7
01A8 4E                ORL     A,R6
01A9 600B              JZ      ?C0014
                                           ; SOURCE LINE # 208
                                           ; SOURCE LINE # 210
01AB 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
01AE 7401              MOV     A,#01H
01B0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 211
01B1 120000      E     LCALL   CyPLL_OUT_Stop
                                           ; SOURCE LINE # 212
01B4 8005              SJMP    ?C0015
01B6         ?C0014:
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 216
01B6 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
01B9 E4                CLR     A
01BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 217
01BB         ?C0015:
                                           ; SOURCE LINE # 220
01BB 904210            MOV     DPTR,#04210H
01BE E0                MOVX    A,@DPTR
01BF FF                MOV     R7,A
01C0 EF                MOV     A,R7
01C1 5401              ANL     A,#01H
01C3 FF                MOV     R7,A
01C4 7E00              MOV     R6,#00H
01C6 EF                MOV     A,R7
01C7 4E                ORL     A,R6
01C8 600A              JZ      ?C0016
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 223
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 42  

01CA 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
01CD 7401              MOV     A,#01H
01CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 224
01D0 120000      E     LCALL   CyXTAL_Stop
                                           ; SOURCE LINE # 225
01D3 22                RET     
01D4         ?C0016:
                                           ; SOURCE LINE # 227
                                           ; SOURCE LINE # 229
01D4 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
01D7 E4                CLR     A
01D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
                                           ; SOURCE LINE # 231
01D9         ?C0018:
01D9 22                RET     
             ; FUNCTION CyPmSaveClocks (END)

             ; FUNCTION CyPmRestoreClocks (BEGIN)
                                           ; SOURCE LINE # 259
                                           ; SOURCE LINE # 260
                                           ; SOURCE LINE # 270
0000 900000      R     MOV     DPTR,#cyPmClockBackup+0EH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 6401              XRL     A,#01H
0008 703F              JNZ     ?C0019
                                           ; SOURCE LINE # 271
                                           ; SOURCE LINE # 280
000A 7F00              MOV     R7,#00H
000C 120000      E     LCALL   _CyXTAL_Start
                                           ; SOURCE LINE # 288
000F 7B05              MOV     R3,#05H
0011 7A01              MOV     R2,#01H
0013 79A1              MOV     R1,#0A1H
0015 120000      E     LCALL   _cyread8
0018 7E00              MOV     R6,#00H
001A 7E00              MOV     R6,#00H
001C EF                MOV     A,R7
001D 540F              ANL     A,#0FH
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 2401              ADD     A,#01H
0023 FD                MOV     R5,A
0024 EE                MOV     A,R6
0025 3400              ADDC    A,#00H
0027 FC                MOV     R4,A
0028 904200            MOV     DPTR,#04200H
002B E0                MOVX    A,@DPTR
002C FF                MOV     R7,A
002D EF                MOV     A,R7
002E 5407              ANL     A,#07H
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0035 93                MOVC    A,@A+DPTR
0036 FF                MOV     R7,A
0037 7E00              MOV     R6,#00H
0039 120000      E     LCALL   ?C?UIDIV
003C 7CFB              MOV     R4,#0FBH
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 43  

003E 7DD0              MOV     R5,#0D0H
0040 120000      E     LCALL   ?C?IMUL
0043 E4                CLR     A
0044 FC                MOV     R4,A
0045 FD                MOV     R5,A
0046 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 323
0049         ?C0019:
                                           ; SOURCE LINE # 327
0049 7F31              MOV     R7,#031H
004B 120000      E     LCALL   _CyFlash_SetWaitCycles
                                           ; SOURCE LINE # 330
004E 900000      R     MOV     DPTR,#cyPmClockBackup+02H
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 6402              XRL     A,#02H
0056 6009              JZ      ?C0021
0058 900000      R     MOV     DPTR,#cyPmClockBackup+02H
005B E0                MOVX    A,@DPTR
005C FF                MOV     R7,A
005D EF                MOV     A,R7
005E B4031E            CJNE    A,#03H,?C0020
0061         ?C0021:
                                           ; SOURCE LINE # 332
                                           ; SOURCE LINE # 334
0061 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
0064 E0                MOVX    A,@DPTR
0065 FF                MOV     R7,A
0066 904004            MOV     DPTR,#04004H
0069 E0                MOVX    A,@DPTR
006A FE                MOV     R6,A
006B EE                MOV     A,R6
006C 6F                XRL     A,R7
006D 6008              JZ      ?C0022
                                           ; SOURCE LINE # 335
                                           ; SOURCE LINE # 337
006F 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 338
0077         ?C0022:
                                           ; SOURCE LINE # 341
0077 900000      R     MOV     DPTR,#cyPmClockBackup+02H
007A E0                MOVX    A,@DPTR
007B FF                MOV     R7,A
007C 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 342
007F         ?C0020:
                                           ; SOURCE LINE # 345
007F 900000      R     MOV     DPTR,#cyPmClockBackup+04H
0082 E0                MOVX    A,@DPTR
0083 FF                MOV     R7,A
0084 EF                MOV     A,R7
0085 5440              ANL     A,#040H
0087 FF                MOV     R7,A
0088 7E00              MOV     R6,#00H
008A EF                MOV     A,R7
008B 4E                ORL     A,R6
008C 6016              JZ      ?C0023
008E 900000      R     MOV     DPTR,#cyPmClockBackup+03H
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 44  

0091 E0                MOVX    A,@DPTR
0092 FF                MOV     R7,A
0093 EF                MOV     A,R7
0094 900000      R     MOV     DPTR,#cyPmImoFreqMhz2Reg
0097 93                MOVC    A,@A+DPTR
0098 FF                MOV     R7,A
0099 EF                MOV     A,R7
009A B40307            CJNE    A,#03H,?C0023
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 349
009D 7F08              MOV     R7,#08H
009F 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 350
00A2 8035              SJMP    ?C0024
00A4         ?C0023:
                                           ; SOURCE LINE # 352
                                           ; SOURCE LINE # 354
00A4 900000      R     MOV     DPTR,#cyPmClockBackup+03H
00A7 E0                MOVX    A,@DPTR
00A8 FF                MOV     R7,A
00A9 EF                MOV     A,R7
00AA 900000      R     MOV     DPTR,#cyPmImoFreqMhz2Reg
00AD 93                MOVC    A,@A+DPTR
00AE FF                MOV     R7,A
00AF 120000      E     LCALL   _CyIMO_SetFreq
                                           ; SOURCE LINE # 356
00B2 900000      R     MOV     DPTR,#cyPmClockBackup+04H
00B5 E0                MOVX    A,@DPTR
00B6 FF                MOV     R7,A
00B7 EF                MOV     A,R7
00B8 5440              ANL     A,#040H
00BA FF                MOV     R7,A
00BB 7E00              MOV     R6,#00H
00BD EF                MOV     A,R7
00BE 4E                ORL     A,R6
00BF 600D              JZ      ?C0025
                                           ; SOURCE LINE # 357
                                           ; SOURCE LINE # 358
00C1 904200            MOV     DPTR,#04200H
00C4 E0                MOVX    A,@DPTR
00C5 FF                MOV     R7,A
00C6 EF                MOV     A,R7
00C7 4440              ORL     A,#040H
00C9 FF                MOV     R7,A
00CA EF                MOV     A,R7
00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 359
00CC 800B              SJMP    ?C0024
00CE         ?C0025:
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
00CE 904200            MOV     DPTR,#04200H
00D1 E0                MOVX    A,@DPTR
00D2 FF                MOV     R7,A
00D3 EF                MOV     A,R7
00D4 54BF              ANL     A,#0BFH
00D6 FF                MOV     R7,A
00D7 EF                MOV     A,R7
00D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 364
00D9         ?C0024:
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 45  

                                           ; SOURCE LINE # 368
00D9 900000      R     MOV     DPTR,#cyPmClockBackup+06H
00DC E0                MOVX    A,@DPTR
00DD FF                MOV     R7,A
00DE EF                MOV     A,R7
00DF B40114            CJNE    A,#01H,?C0027
00E2 9043A0            MOV     DPTR,#043A0H
00E5 E0                MOVX    A,@DPTR
00E6 FF                MOV     R7,A
00E7 EF                MOV     A,R7
00E8 5410              ANL     A,#010H
00EA FF                MOV     R7,A
00EB 7E00              MOV     R6,#00H
00ED EF                MOV     A,R7
00EE 4E                ORL     A,R6
00EF 7005              JNZ     ?C0027
                                           ; SOURCE LINE # 369
                                           ; SOURCE LINE # 371
00F1 7F00              MOV     R7,#00H
00F3 120000      E     LCALL   _CyIMO_Start
                                           ; SOURCE LINE # 372
00F6         ?C0027:
                                           ; SOURCE LINE # 376
00F6 900000      R     MOV     DPTR,#cyPmClockBackup+06H
00F9 E0                MOVX    A,@DPTR
00FA FF                MOV     R7,A
00FB EF                MOV     A,R7
00FC 7012              JNZ     ?C0028
00FE 9043A0            MOV     DPTR,#043A0H
0101 E0                MOVX    A,@DPTR
0102 FF                MOV     R7,A
0103 EF                MOV     A,R7
0104 5410              ANL     A,#010H
0106 FF                MOV     R7,A
0107 7E00              MOV     R6,#00H
0109 EF                MOV     A,R7
010A 4E                ORL     A,R6
010B 6003              JZ      ?C0028
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
010D 120000      E     LCALL   CyIMO_Stop
                                           ; SOURCE LINE # 379
0110         ?C0028:
                                           ; SOURCE LINE # 382
0110 900000      R     MOV     DPTR,#cyPmClockBackup+07H
0113 E0                MOVX    A,@DPTR
0114 FF                MOV     R7,A
0115 120000      E     LCALL   _CyIMO_SetSource
                                           ; SOURCE LINE # 385
0118 900000      R     MOV     DPTR,#cyPmClockBackup+09H
011B E0                MOVX    A,@DPTR
011C FF                MOV     R7,A
011D EF                MOV     A,R7
011E B40103            CJNE    A,#01H,?C0029
                                           ; SOURCE LINE # 386
                                           ; SOURCE LINE # 387
0121 120000      E     LCALL   CyIMO_EnableDoubler
                                           ; SOURCE LINE # 388
0124         ?C0029:
                                           ; SOURCE LINE # 391
0124 904000            MOV     DPTR,#04000H
0127 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 46  

0128 FF                MOV     R7,A
0129 EF                MOV     A,R7
012A 5430              ANL     A,#030H
012C FF                MOV     R7,A
012D 7E00              MOV     R6,#00H
012F 900000      R     MOV     DPTR,#cyPmClockBackup+08H
0132 E0                MOVX    A,@DPTR
0133 FD                MOV     R5,A
0134 7C00              MOV     R4,#00H
0136 ED                MOV     A,R5
0137 6F                XRL     A,R7
0138 7002              JNZ     ?C0082
013A EC                MOV     A,R4
013B 6E                XRL     A,R6
013C         ?C0082:
013C 6016              JZ      ?C0030
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 393
013E 904000            MOV     DPTR,#04000H
0141 E0                MOVX    A,@DPTR
0142 FF                MOV     R7,A
0143 EF                MOV     A,R7
0144 54CF              ANL     A,#0CFH
0146 FF                MOV     R7,A
0147 900000      R     MOV     DPTR,#cyPmClockBackup+08H
014A E0                MOVX    A,@DPTR
014B FE                MOV     R6,A
014C EF                MOV     A,R7
014D 4E                ORL     A,R6
014E FF                MOV     R7,A
014F 904000            MOV     DPTR,#04000H
0152 EF                MOV     A,R7
0153 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 395
0154         ?C0030:
                                           ; SOURCE LINE # 398
0154 900000      R     MOV     DPTR,#cyPmClockBackup+0DH
0157 E0                MOVX    A,@DPTR
0158 FF                MOV     R7,A
0159 EF                MOV     A,R7
015A 6401              XRL     A,#01H
015C 703F              JNZ     ?C0031
                                           ; SOURCE LINE # 399
                                           ; SOURCE LINE # 408
015E 7F00              MOV     R7,#00H
0160 120000      E     LCALL   _CyPLL_OUT_Start
                                           ; SOURCE LINE # 411
0163 7B05              MOV     R3,#05H
0165 7A01              MOV     R2,#01H
0167 79A1              MOV     R1,#0A1H
0169 120000      E     LCALL   _cyread8
016C 7E00              MOV     R6,#00H
016E 7E00              MOV     R6,#00H
0170 EF                MOV     A,R7
0171 540F              ANL     A,#0FH
0173 FF                MOV     R7,A
0174 EF                MOV     A,R7
0175 2401              ADD     A,#01H
0177 FD                MOV     R5,A
0178 EE                MOV     A,R6
0179 3400              ADDC    A,#00H
017B FC                MOV     R4,A
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 47  

017C 904200            MOV     DPTR,#04200H
017F E0                MOVX    A,@DPTR
0180 FF                MOV     R7,A
0181 EF                MOV     A,R7
0182 5407              ANL     A,#07H
0184 FF                MOV     R7,A
0185 EF                MOV     A,R7
0186 900000      R     MOV     DPTR,#cyPmImoFreqReg2Mhz
0189 93                MOVC    A,@A+DPTR
018A FF                MOV     R7,A
018B 7E00              MOV     R6,#00H
018D 120000      E     LCALL   ?C?UIDIV
0190 7C00              MOV     R4,#00H
0192 7DFA              MOV     R5,#0FAH
0194 120000      E     LCALL   ?C?IMUL
0197 E4                CLR     A
0198 FC                MOV     R4,A
0199 FD                MOV     R5,A
019A 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 412
019D         ?C0031:
                                           ; SOURCE LINE # 416
019D 900000      R     MOV     DPTR,#cyPmClockBackup+02H
01A0 E0                MOVX    A,@DPTR
01A1 FF                MOV     R7,A
01A2 EF                MOV     A,R7
01A3 6009              JZ      ?C0033
01A5 900000      R     MOV     DPTR,#cyPmClockBackup+02H
01A8 E0                MOVX    A,@DPTR
01A9 FF                MOV     R7,A
01AA EF                MOV     A,R7
01AB B4011E            CJNE    A,#01H,?C0032
01AE         ?C0033:
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 420
01AE 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
01B1 E0                MOVX    A,@DPTR
01B2 FF                MOV     R7,A
01B3 904004            MOV     DPTR,#04004H
01B6 E0                MOVX    A,@DPTR
01B7 FE                MOV     R6,A
01B8 EE                MOV     A,R6
01B9 6F                XRL     A,R7
01BA 6008              JZ      ?C0034
                                           ; SOURCE LINE # 421
                                           ; SOURCE LINE # 422
01BC 900000      R     MOV     DPTR,#cyPmClockBackup+0AH
01BF E0                MOVX    A,@DPTR
01C0 FF                MOV     R7,A
01C1 120000      E     LCALL   _CyMasterClk_SetDivider
                                           ; SOURCE LINE # 423
01C4         ?C0034:
                                           ; SOURCE LINE # 426
01C4 900000      R     MOV     DPTR,#cyPmClockBackup+02H
01C7 E0                MOVX    A,@DPTR
01C8 FF                MOV     R7,A
01C9 120000      E     LCALL   _CyMasterClk_SetSource
                                           ; SOURCE LINE # 427
01CC         ?C0032:
                                           ; SOURCE LINE # 430
01CC 904007            MOV     DPTR,#04007H
01CF E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 48  

01D0 FF                MOV     R7,A
01D1 7E00              MOV     R6,#00H
01D3 EF                MOV     A,R7
01D4 7F00              MOV     R7,#00H
01D6 FE                MOV     R6,A
01D7 904006            MOV     DPTR,#04006H
01DA E0                MOVX    A,@DPTR
01DB FD                MOV     R5,A
01DC 7C00              MOV     R4,#00H
01DE EE                MOV     A,R6
01DF 4C                ORL     A,R4
01E0 FE                MOV     R6,A
01E1 EF                MOV     A,R7
01E2 4D                ORL     A,R5
01E3 FF                MOV     R7,A
01E4 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
01E7 E0                MOVX    A,@DPTR
01E8 FC                MOV     R4,A
01E9 A3                INC     DPTR
01EA E0                MOVX    A,@DPTR
01EB FD                MOV     R5,A
01EC EF                MOV     A,R7
01ED 6D                XRL     A,R5
01EE 7002              JNZ     ?C0083
01F0 EE                MOV     A,R6
01F1 6C                XRL     A,R4
01F2         ?C0083:
01F2 600B              JZ      ?C0035
                                           ; SOURCE LINE # 431
                                           ; SOURCE LINE # 432
01F4 900000      R     MOV     DPTR,#cyPmClockBackup+0BH
01F7 E0                MOVX    A,@DPTR
01F8 FE                MOV     R6,A
01F9 A3                INC     DPTR
01FA E0                MOVX    A,@DPTR
01FB FF                MOV     R7,A
01FC 120000      E     LCALL   _CyBusClk_SetDivider
                                           ; SOURCE LINE # 433
01FF         ?C0035:
                                           ; SOURCE LINE # 436
01FF 904800            MOV     DPTR,#04800H
0202 E0                MOVX    A,@DPTR
0203 FF                MOV     R7,A
0204 EF                MOV     A,R7
0205 543F              ANL     A,#03FH
0207 FF                MOV     R7,A
0208 900000      R     MOV     DPTR,#cyPmClockBackup+05H
020B E0                MOVX    A,@DPTR
020C FE                MOV     R6,A
020D EF                MOV     A,R7
020E 4E                ORL     A,R6
020F FF                MOV     R7,A
0210 904800            MOV     DPTR,#04800H
0213 EF                MOV     A,R7
0214 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
0215 900000      R     MOV     DPTR,#cyPmClockBackup
0218 E0                MOVX    A,@DPTR
0219 FF                MOV     R7,A
021A 9043A1            MOV     DPTR,#043A1H
021D EF                MOV     A,R7
021E F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 49  

                                           ; SOURCE LINE # 441
021F 900000      R     MOV     DPTR,#cyPmClockBackup+01H
0222 E0                MOVX    A,@DPTR
0223 FF                MOV     R7,A
0224 9043A2            MOV     DPTR,#043A2H
0227 EF                MOV     A,R7
0228 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
0229 22                RET     
             ; FUNCTION CyPmRestoreClocks (END)

             ; FUNCTION _CyPmAltAct (BEGIN)
                                           ; SOURCE LINE # 562
0000 900000      R     MOV     DPTR,#wakeupTime
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#wakeupSource
000B EC                MOV     A,R4
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E ED                MOV     A,R5
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 563
                                           ; SOURCE LINE # 578
0010 900000      R     MOV     DPTR,#wakeupTime
0013 E0                MOVX    A,@DPTR
0014 FE                MOV     R6,A
0015 A3                INC     DPTR
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 C3                CLR     C
0019 EF                MOV     A,R7
001A 940F              SUBB    A,#0FH
001C EE                MOV     A,R6
001D 9400              SUBB    A,#00H
001F 4055              JC      ?C0037
0021 900000      R     MOV     DPTR,#wakeupTime
0024 E0                MOVX    A,@DPTR
0025 FE                MOV     R6,A
0026 A3                INC     DPTR
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 D3                SETB    C
002A EF                MOV     A,R7
002B 940E              SUBB    A,#0EH
002D EE                MOV     A,R6
002E 9401              SUBB    A,#01H
0030 5044              JNC     ?C0037
                                           ; SOURCE LINE # 579
                                           ; SOURCE LINE # 580
0032 900000      R     MOV     DPTR,#wakeupTime
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 A3                INC     DPTR
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A C3                CLR     C
003B EF                MOV     A,R7
003C 942E              SUBB    A,#02EH
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 50  

003E EE                MOV     A,R6
003F 9400              SUBB    A,#00H
0041 4006              JC      ?C0038
0043 7E00              MOV     R6,#00H
0045 7F1F              MOV     R7,#01FH
0047 8016              SJMP    ?C0039
0049         ?C0038:
0049 900000      R     MOV     DPTR,#wakeupTime
004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
004E A3                INC     DPTR
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 EF                MOV     A,R7
0052 24F2              ADD     A,#0F2H
0054 FF                MOV     R7,A
0055 EE                MOV     A,R6
0056 34FF              ADDC    A,#0FFH
0058 FE                MOV     R6,A
0059 7E00              MOV     R6,#00H
005B EF                MOV     A,R7
005C 541F              ANL     A,#01FH
005E FF                MOV     R7,A
005F         ?C0039:
005F 120000      R     LCALL   _CyPmFtwSaveSet
                                           ; SOURCE LINE # 583
0062 900000      R     MOV     DPTR,#wakeupSource
0065 E0                MOVX    A,@DPTR
0066 FE                MOV     R6,A
0067 A3                INC     DPTR
0068 E0                MOVX    A,@DPTR
0069 FF                MOV     R7,A
006A EE                MOV     A,R6
006B 4404              ORL     A,#04H
006D FE                MOV     R6,A
006E 900000      R     MOV     DPTR,#wakeupSource
0071 EE                MOV     A,R6
0072 F0                MOVX    @DPTR,A
0073 A3                INC     DPTR
0074 EF                MOV     A,R7
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
0076         ?C0037:
                                           ; SOURCE LINE # 587
0076 900000      R     MOV     DPTR,#wakeupTime
0079 E0                MOVX    A,@DPTR
007A FE                MOV     R6,A
007B A3                INC     DPTR
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E C3                CLR     C
007F EF                MOV     A,R7
0080 9402              SUBB    A,#02H
0082 EE                MOV     A,R6
0083 9400              SUBB    A,#00H
0085 4037              JC      ?C0040
0087 900000      R     MOV     DPTR,#wakeupTime
008A E0                MOVX    A,@DPTR
008B FE                MOV     R6,A
008C A3                INC     DPTR
008D E0                MOVX    A,@DPTR
008E FF                MOV     R7,A
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 51  

008F D3                SETB    C
0090 EF                MOV     A,R7
0091 940D              SUBB    A,#0DH
0093 EE                MOV     A,R6
0094 9400              SUBB    A,#00H
0096 5026              JNC     ?C0040
                                           ; SOURCE LINE # 588
                                           ; SOURCE LINE # 590
0098 900000      R     MOV     DPTR,#wakeupTime
009B E0                MOVX    A,@DPTR
009C FE                MOV     R6,A
009D A3                INC     DPTR
009E E0                MOVX    A,@DPTR
009F FF                MOV     R7,A
00A0 EF                MOV     A,R7
00A1 14                DEC     A
00A2 FF                MOV     R7,A
00A3 EF                MOV     A,R7
00A4 540F              ANL     A,#0FH
00A6 FF                MOV     R7,A
00A7 120000      R     LCALL   _CyPmCtwSaveSet
                                           ; SOURCE LINE # 593
00AA 900000      R     MOV     DPTR,#wakeupSource
00AD E0                MOVX    A,@DPTR
00AE FE                MOV     R6,A
00AF A3                INC     DPTR
00B0 E0                MOVX    A,@DPTR
00B1 FF                MOV     R7,A
00B2 EE                MOV     A,R6
00B3 4408              ORL     A,#08H
00B5 FE                MOV     R6,A
00B6 900000      R     MOV     DPTR,#wakeupSource
00B9 EE                MOV     A,R6
00BA F0                MOVX    @DPTR,A
00BB A3                INC     DPTR
00BC EF                MOV     A,R7
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 594
00BE         ?C0040:
                                           ; SOURCE LINE # 597
00BE 900000      R     MOV     DPTR,#wakeupTime
00C1 E0                MOVX    A,@DPTR
00C2 FE                MOV     R6,A
00C3 A3                INC     DPTR
00C4 E0                MOVX    A,@DPTR
00C5 FF                MOV     R7,A
00C6 EF                MOV     A,R7
00C7 6401              XRL     A,#01H
00C9 4E                ORL     A,R6
00CA 7017              JNZ     ?C0041
                                           ; SOURCE LINE # 598
                                           ; SOURCE LINE # 600
00CC 120000      R     LCALL   CyPmOppsSaveSet
                                           ; SOURCE LINE # 603
00CF 900000      R     MOV     DPTR,#wakeupSource
00D2 E0                MOVX    A,@DPTR
00D3 FE                MOV     R6,A
00D4 A3                INC     DPTR
00D5 E0                MOVX    A,@DPTR
00D6 FF                MOV     R7,A
00D7 EE                MOV     A,R6
00D8 4408              ORL     A,#08H
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 52  

00DA FE                MOV     R6,A
00DB 900000      R     MOV     DPTR,#wakeupSource
00DE EE                MOV     A,R6
00DF F0                MOVX    @DPTR,A
00E0 A3                INC     DPTR
00E1 EF                MOV     A,R7
00E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 604
00E3         ?C0041:
                                           ; SOURCE LINE # 628
00E3 904393            MOV     DPTR,#04393H
00E6 E0                MOVX    A,@DPTR
00E7 FF                MOV     R7,A
00E8 EF                MOV     A,R7
00E9 54F8              ANL     A,#0F8H
00EB FF                MOV     R7,A
00EC EF                MOV     A,R7
00ED 4401              ORL     A,#01H
00EF FF                MOV     R7,A
00F0 904393            MOV     DPTR,#04393H
00F3 EF                MOV     A,R7
00F4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 631
00F5 904393            MOV     DPTR,#04393H
00F8 E0                MOVX    A,@DPTR
00F9 FF                MOV     R7,A
                                           ; SOURCE LINE # 634
00FA 00                NOP     
                                           ; SOURCE LINE # 635
00FB 00                NOP     
                                           ; SOURCE LINE # 651
00FC 22                RET     
             ; FUNCTION _CyPmAltAct (END)

             ; FUNCTION _CyPmSleep (BEGIN)
                                           ; SOURCE LINE # 780
0000 900000      R     MOV     DPTR,#wakeupTime
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#wakeupSource
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 781
                                           ; SOURCE LINE # 785
000D 120000      E     LCALL   CyEnterCriticalSection
0010 900000      R     MOV     DPTR,#interruptState
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 843
0015 900000      R     MOV     DPTR,#wakeupTime
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B C3                CLR     C
001C 9402              SUBB    A,#02H
001E 402E              JC      ?C0043
0020 900000      R     MOV     DPTR,#wakeupTime
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 53  

0025 EF                MOV     A,R7
0026 D3                SETB    C
0027 940D              SUBB    A,#0DH
0029 5023              JNC     ?C0043
                                           ; SOURCE LINE # 844
                                           ; SOURCE LINE # 846
002B 900000      R     MOV     DPTR,#wakeupTime
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 14                DEC     A
0032 FF                MOV     R7,A
0033 EF                MOV     A,R7
0034 540F              ANL     A,#0FH
0036 FF                MOV     R7,A
0037 120000      R     LCALL   _CyPmCtwSaveSet
                                           ; SOURCE LINE # 849
003A 900000      R     MOV     DPTR,#wakeupSource
003D E0                MOVX    A,@DPTR
003E FE                MOV     R6,A
003F A3                INC     DPTR
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
0042 EE                MOV     A,R6
0043 4408              ORL     A,#08H
0045 FE                MOV     R6,A
0046 900000      R     MOV     DPTR,#wakeupSource
0049 EE                MOV     A,R6
004A F0                MOVX    @DPTR,A
004B A3                INC     DPTR
004C EF                MOV     A,R7
004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 850
004E         ?C0043:
                                           ; SOURCE LINE # 853
004E 900000      R     MOV     DPTR,#wakeupTime
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 B40117            CJNE    A,#01H,?C0044
                                           ; SOURCE LINE # 854
                                           ; SOURCE LINE # 856
0057 120000      R     LCALL   CyPmOppsSaveSet
                                           ; SOURCE LINE # 859
005A 900000      R     MOV     DPTR,#wakeupSource
005D E0                MOVX    A,@DPTR
005E FE                MOV     R6,A
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 FF                MOV     R7,A
0062 EE                MOV     A,R6
0063 4408              ORL     A,#08H
0065 FE                MOV     R6,A
0066 900000      R     MOV     DPTR,#wakeupSource
0069 EE                MOV     A,R6
006A F0                MOVX    @DPTR,A
006B A3                INC     DPTR
006C EF                MOV     A,R7
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 860
006E         ?C0044:
                                           ; SOURCE LINE # 884
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 54  

006E 120000      R     LCALL   CyPmHibSlpSaveSet
                                           ; SOURCE LINE # 887
0071 904200            MOV     DPTR,#04200H
0074 E0                MOVX    A,@DPTR
0075 FF                MOV     R7,A
0076 EF                MOV     A,R7
0077 5407              ANL     A,#07H
0079 FF                MOV     R7,A
007A 7E00              MOV     R6,#00H
007C EF                MOV     A,R7
007D 4E                ORL     A,R6
007E 7008              JNZ     ?C0045
                                           ; SOURCE LINE # 888
                                           ; SOURCE LINE # 890
0080 900000      R     MOV     DPTR,#cyPmBackup+07H
0083 7401              MOV     A,#01H
0085 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 891
0086 801E              SJMP    ?C0046
0088         ?C0045:
                                           ; SOURCE LINE # 893
                                           ; SOURCE LINE # 895
0088 900000      R     MOV     DPTR,#cyPmBackup+07H
008B E4                CLR     A
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 898
008D 904200            MOV     DPTR,#04200H
0090 E0                MOVX    A,@DPTR
0091 FF                MOV     R7,A
0092 EF                MOV     A,R7
0093 5407              ANL     A,#07H
0095 FF                MOV     R7,A
0096 900000      R     MOV     DPTR,#cyPmBackup+06H
0099 EF                MOV     A,R7
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 901
009B 904200            MOV     DPTR,#04200H
009E E0                MOVX    A,@DPTR
009F FF                MOV     R7,A
00A0 EF                MOV     A,R7
00A1 54F8              ANL     A,#0F8H
00A3 FF                MOV     R7,A
00A4 EF                MOV     A,R7
00A5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 902
00A6         ?C0046:
                                           ; SOURCE LINE # 905
00A6 904393            MOV     DPTR,#04393H
00A9 E0                MOVX    A,@DPTR
00AA FF                MOV     R7,A
00AB EF                MOV     A,R7
00AC 54F8              ANL     A,#0F8H
00AE FF                MOV     R7,A
00AF EF                MOV     A,R7
00B0 4403              ORL     A,#03H
00B2 FF                MOV     R7,A
00B3 904393            MOV     DPTR,#04393H
00B6 EF                MOV     A,R7
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 908
00B8 904393            MOV     DPTR,#04393H
00BB E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 55  

00BC FF                MOV     R7,A
                                           ; SOURCE LINE # 911
00BD 00                NOP     
                                           ; SOURCE LINE # 912
00BE 00                NOP     
                                           ; SOURCE LINE # 920
00BF 900000      R     MOV     DPTR,#cyPmBackup+07H
00C2 E0                MOVX    A,@DPTR
00C3 FF                MOV     R7,A
00C4 EF                MOV     A,R7
00C5 6401              XRL     A,#01H
00C7 6016              JZ      ?C0047
                                           ; SOURCE LINE # 921
                                           ; SOURCE LINE # 922
00C9 904200            MOV     DPTR,#04200H
00CC E0                MOVX    A,@DPTR
00CD FF                MOV     R7,A
00CE EF                MOV     A,R7
00CF 54F8              ANL     A,#0F8H
00D1 FF                MOV     R7,A
00D2 900000      R     MOV     DPTR,#cyPmBackup+06H
00D5 E0                MOVX    A,@DPTR
00D6 FE                MOV     R6,A
00D7 EF                MOV     A,R7
00D8 4E                ORL     A,R6
00D9 FF                MOV     R7,A
00DA 904200            MOV     DPTR,#04200H
00DD EF                MOV     A,R7
00DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 924
00DF         ?C0047:
                                           ; SOURCE LINE # 941
00DF 120000      R     LCALL   CyPmHibSlpRestore
                                           ; SOURCE LINE # 954
00E2 900000      R     MOV     DPTR,#interruptState
00E5 E0                MOVX    A,@DPTR
00E6 FF                MOV     R7,A
00E7 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 955
00EA 22                RET     
             ; FUNCTION _CyPmSleep (END)

             ; FUNCTION CyPmHibernate (BEGIN)
                                           ; SOURCE LINE # 1011
                                           ; SOURCE LINE # 1012
                                           ; SOURCE LINE # 1016
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1041
0008 120000      R     LCALL   CyPmHibSaveSet
                                           ; SOURCE LINE # 1060
000B 904200            MOV     DPTR,#04200H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 5407              ANL     A,#07H
0013 FF                MOV     R7,A
0014 7E00              MOV     R6,#00H
0016 EF                MOV     A,R7
0017 4E                ORL     A,R6
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 56  

0018 7008              JNZ     ?C0049
                                           ; SOURCE LINE # 1061
                                           ; SOURCE LINE # 1063
001A 900000      R     MOV     DPTR,#cyPmBackup+07H
001D 7401              MOV     A,#01H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1064
0020 801E              SJMP    ?C0050
0022         ?C0049:
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1068
0022 900000      R     MOV     DPTR,#cyPmBackup+07H
0025 E4                CLR     A
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1071
0027 904200            MOV     DPTR,#04200H
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 5407              ANL     A,#07H
002F FF                MOV     R7,A
0030 900000      R     MOV     DPTR,#cyPmBackup+06H
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1074
0035 904200            MOV     DPTR,#04200H
0038 E0                MOVX    A,@DPTR
0039 FF                MOV     R7,A
003A EF                MOV     A,R7
003B 54F8              ANL     A,#0F8H
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1075
0040         ?C0050:
                                           ; SOURCE LINE # 1079
0040 904393            MOV     DPTR,#04393H
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 EF                MOV     A,R7
0046 54F8              ANL     A,#0F8H
0048 FF                MOV     R7,A
0049 EF                MOV     A,R7
004A 4404              ORL     A,#04H
004C FF                MOV     R7,A
004D 904393            MOV     DPTR,#04393H
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1082
0052 904393            MOV     DPTR,#04393H
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
                                           ; SOURCE LINE # 1085
0057 00                NOP     
                                           ; SOURCE LINE # 1086
0058 00                NOP     
                                           ; SOURCE LINE # 1095
0059 900000      R     MOV     DPTR,#cyPmBackup+07H
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E EF                MOV     A,R7
005F 6401              XRL     A,#01H
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 57  

0061 6016              JZ      ?C0051
                                           ; SOURCE LINE # 1096
                                           ; SOURCE LINE # 1097
0063 904200            MOV     DPTR,#04200H
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 EF                MOV     A,R7
0069 54F8              ANL     A,#0F8H
006B FF                MOV     R7,A
006C 900000      R     MOV     DPTR,#cyPmBackup+06H
006F E0                MOVX    A,@DPTR
0070 FE                MOV     R6,A
0071 EF                MOV     A,R7
0072 4E                ORL     A,R6
0073 FF                MOV     R7,A
0074 904200            MOV     DPTR,#04200H
0077 EF                MOV     A,R7
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1099
0079         ?C0051:
                                           ; SOURCE LINE # 1103
0079 120000      R     LCALL   CyPmHibRestore
                                           ; SOURCE LINE # 1116
007C 900000      R     MOV     DPTR,#interruptState
007F E0                MOVX    A,@DPTR
0080 FF                MOV     R7,A
0081 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1117
0084 22                RET     
             ; FUNCTION CyPmHibernate (END)

             ; FUNCTION _CyPmReadStatus (BEGIN)
                                           ; SOURCE LINE # 1149
0000 900000      R     MOV     DPTR,#mask
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1150
                                           ; SOURCE LINE # 1156
0005 120000      E     LCALL   CyEnterCriticalSection
0008 900000      R     MOV     DPTR,#interruptState
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1159
000D 900000      R     MOV     DPTR,#interruptStatus
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 904390            MOV     DPTR,#04390H
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
0017 EF                MOV     A,R7
0018 4E                ORL     A,R6
0019 FF                MOV     R7,A
001A 900000      R     MOV     DPTR,#interruptStatus
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1160
001F 900000      R     MOV     DPTR,#interruptStatus
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 900000      R     MOV     DPTR,#tmpStatus
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 58  

                                           ; SOURCE LINE # 1161
0029 900000      R     MOV     DPTR,#interruptStatus
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E 900000      R     MOV     DPTR,#mask
0031 E0                MOVX    A,@DPTR
0032 FE                MOV     R6,A
0033 EE                MOV     A,R6
0034 F4                CPL     A
0035 FE                MOV     R6,A
0036 EF                MOV     A,R7
0037 5E                ANL     A,R6
0038 FF                MOV     R7,A
0039 900000      R     MOV     DPTR,#interruptStatus
003C EF                MOV     A,R7
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1164
003E 900000      R     MOV     DPTR,#interruptState
0041 E0                MOVX    A,@DPTR
0042 FF                MOV     R7,A
0043 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 1166
0046 900000      R     MOV     DPTR,#tmpStatus
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
                                           ; SOURCE LINE # 1167
004B         ?C0053:
004B 22                RET     
             ; FUNCTION _CyPmReadStatus (END)

             ; FUNCTION CyPmHibSaveSet (BEGIN)
                                           ; SOURCE LINE # 1192
                                           ; SOURCE LINE # 1193
                                           ; SOURCE LINE # 1195
0000 904331            MOV     DPTR,#04331H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5404              ANL     A,#04H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 4E                ORL     A,R6
000D 6013              JZ      ?C0054
                                           ; SOURCE LINE # 1196
                                           ; SOURCE LINE # 1211
000F 900000      R     MOV     DPTR,#cyPmBackup+03H
0012 7401              MOV     A,#01H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1216
0015 904331            MOV     DPTR,#04331H
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
001B 54FB              ANL     A,#0FBH
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1217
0020 8005              SJMP    ?C0055
0022         ?C0054:
                                           ; SOURCE LINE # 1219
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 59  

                                           ; SOURCE LINE # 1223
0022 900000      R     MOV     DPTR,#cyPmBackup+03H
0025 E4                CLR     A
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1226
0027         ?C0055:
                                           ; SOURCE LINE # 1272
0027 120000      R     LCALL   CyPmHibSlpSaveSet
                                           ; SOURCE LINE # 1273
002A 22                RET     
             ; FUNCTION CyPmHibSaveSet (END)

             ; FUNCTION CyPmHibRestore (BEGIN)
                                           ; SOURCE LINE # 1295
                                           ; SOURCE LINE # 1296
                                           ; SOURCE LINE # 1298
0000 120000      R     LCALL   CyPmHibSlpRestore
                                           ; SOURCE LINE # 1303
0003 900000      R     MOV     DPTR,#cyPmBackup+03H
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 EF                MOV     A,R7
0009 B4010B            CJNE    A,#01H,?C0058
                                           ; SOURCE LINE # 1304
                                           ; SOURCE LINE # 1306
000C 904331            MOV     DPTR,#04331H
000F E0                MOVX    A,@DPTR
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 4404              ORL     A,#04H
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1307
                                           ; SOURCE LINE # 1339
0017         ?C0058:
0017 22                RET     
             ; FUNCTION CyPmHibRestore (END)

             ; FUNCTION _CyPmCtwSaveSet (BEGIN)
                                           ; SOURCE LINE # 1366
0000 900000      R     MOV     DPTR,#ctwInterval
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1367
                                           ; SOURCE LINE # 1369
0005 904382            MOV     DPTR,#04382H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5408              ANL     A,#08H
000D FF                MOV     R7,A
000E 7E00              MOV     R6,#00H
0010 EF                MOV     A,R7
0011 4E                ORL     A,R6
0012 600B              JZ      ?C0059
                                           ; SOURCE LINE # 1370
                                           ; SOURCE LINE # 1372
0014 904382            MOV     DPTR,#04382H
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 60  

001A 54F7              ANL     A,#0F7H
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1373
001F         ?C0059:
                                           ; SOURCE LINE # 1376
001F 904300            MOV     DPTR,#04300H
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 5402              ANL     A,#02H
0027 FF                MOV     R7,A
0028 7E00              MOV     R6,#00H
002A EF                MOV     A,R7
002B 4E                ORL     A,R6
002C 7003              JNZ     ?C0060
                                           ; SOURCE LINE # 1377
                                           ; SOURCE LINE # 1379
002E 120000      E     LCALL   CyILO_Start1K
                                           ; SOURCE LINE # 1380
0031         ?C0060:
                                           ; SOURCE LINE # 1383
0031 904382            MOV     DPTR,#04382H
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 EF                MOV     A,R7
0037 5404              ANL     A,#04H
0039 FF                MOV     R7,A
003A 7E00              MOV     R6,#00H
003C EF                MOV     A,R7
003D 4E                ORL     A,R6
003E 602F              JZ      ?C0061
                                           ; SOURCE LINE # 1384
                                           ; SOURCE LINE # 1386
0040 900000      R     MOV     DPTR,#ctwInterval
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 904381            MOV     DPTR,#04381H
0048 E0                MOVX    A,@DPTR
0049 FE                MOV     R6,A
004A EE                MOV     A,R6
004B 6F                XRL     A,R7
004C 6044              JZ      ?C0065
                                           ; SOURCE LINE # 1387
                                           ; SOURCE LINE # 1389
004E 904382            MOV     DPTR,#04382H
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 54FB              ANL     A,#0FBH
0056 FF                MOV     R7,A
0057 EF                MOV     A,R7
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1390
0059 900000      R     MOV     DPTR,#ctwInterval
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E 904381            MOV     DPTR,#04381H
0061 EF                MOV     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1391
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 61  

0063 904382            MOV     DPTR,#04382H
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 EF                MOV     A,R7
0069 4404              ORL     A,#04H
006B FF                MOV     R7,A
006C EF                MOV     A,R7
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1392
                                           ; SOURCE LINE # 1393
006E 22                RET     
006F         ?C0061:
                                           ; SOURCE LINE # 1395
                                           ; SOURCE LINE # 1397
006F 900000      R     MOV     DPTR,#ctwInterval
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 904381            MOV     DPTR,#04381H
0077 E0                MOVX    A,@DPTR
0078 FE                MOV     R6,A
0079 EE                MOV     A,R6
007A 6F                XRL     A,R7
007B 600A              JZ      ?C0064
                                           ; SOURCE LINE # 1398
                                           ; SOURCE LINE # 1400
007D 900000      R     MOV     DPTR,#ctwInterval
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 904381            MOV     DPTR,#04381H
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1401
0087         ?C0064:
                                           ; SOURCE LINE # 1404
0087 904382            MOV     DPTR,#04382H
008A E0                MOVX    A,@DPTR
008B FF                MOV     R7,A
008C EF                MOV     A,R7
008D 4404              ORL     A,#04H
008F FF                MOV     R7,A
0090 EF                MOV     A,R7
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1405
                                           ; SOURCE LINE # 1406
0092         ?C0065:
0092 22                RET     
             ; FUNCTION _CyPmCtwSaveSet (END)

             ; FUNCTION CyPmOppsSaveSet (BEGIN)
                                           ; SOURCE LINE # 1429
                                           ; SOURCE LINE # 1430
                                           ; SOURCE LINE # 1432
0000 904308            MOV     DPTR,#04308H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5401              ANL     A,#01H
0008 FF                MOV     R7,A
0009 7E00              MOV     R6,#00H
000B EF                MOV     A,R7
000C 4E                ORL     A,R6
000D 7003              JNZ     ?C0066
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 62  

                                           ; SOURCE LINE # 1433
                                           ; SOURCE LINE # 1435
000F 120000      E     LCALL   CyXTAL_32KHZ_Start
                                           ; SOURCE LINE # 1436
0012         ?C0066:
                                           ; SOURCE LINE # 1439
0012 904382            MOV     DPTR,#04382H
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 5420              ANL     A,#020H
001A FF                MOV     R7,A
001B 7E00              MOV     R6,#00H
001D EF                MOV     A,R7
001E 4E                ORL     A,R6
001F 600B              JZ      ?C0067
                                           ; SOURCE LINE # 1440
                                           ; SOURCE LINE # 1442
0021 904382            MOV     DPTR,#04382H
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 54DF              ANL     A,#0DFH
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1443
002C         ?C0067:
                                           ; SOURCE LINE # 1446
002C 904382            MOV     DPTR,#04382H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 5410              ANL     A,#010H
0034 FF                MOV     R7,A
0035 7E00              MOV     R6,#00H
0037 EF                MOV     A,R7
0038 4E                ORL     A,R6
0039 700B              JNZ     ?C0069
                                           ; SOURCE LINE # 1447
                                           ; SOURCE LINE # 1449
003B 904382            MOV     DPTR,#04382H
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 4410              ORL     A,#010H
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1450
                                           ; SOURCE LINE # 1451
0046         ?C0069:
0046 22                RET     
             ; FUNCTION CyPmOppsSaveSet (END)

             ; FUNCTION _CyPmFtwSaveSet (BEGIN)
                                           ; SOURCE LINE # 1475
0000 900000      R     MOV     DPTR,#ftwInterval
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1476
                                           ; SOURCE LINE # 1478
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 63  

0005 904382            MOV     DPTR,#04382H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5402              ANL     A,#02H
000D FF                MOV     R7,A
000E 7E00              MOV     R6,#00H
0010 EF                MOV     A,R7
0011 4E                ORL     A,R6
0012 600B              JZ      ?C0070
                                           ; SOURCE LINE # 1479
                                           ; SOURCE LINE # 1481
0014 904382            MOV     DPTR,#04382H
0017 E0                MOVX    A,@DPTR
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A 54FD              ANL     A,#0FDH
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1482
001F         ?C0070:
                                           ; SOURCE LINE # 1485
001F 904300            MOV     DPTR,#04300H
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 5404              ANL     A,#04H
0027 FF                MOV     R7,A
0028 7E00              MOV     R6,#00H
002A EF                MOV     A,R7
002B 4E                ORL     A,R6
002C 7003              JNZ     ?C0071
                                           ; SOURCE LINE # 1486
                                           ; SOURCE LINE # 1488
002E 120000      E     LCALL   CyILO_Start100K
                                           ; SOURCE LINE # 1489
0031         ?C0071:
                                           ; SOURCE LINE # 1492
0031 904382            MOV     DPTR,#04382H
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 EF                MOV     A,R7
0037 5401              ANL     A,#01H
0039 FF                MOV     R7,A
003A 7E00              MOV     R6,#00H
003C EF                MOV     A,R7
003D 4E                ORL     A,R6
003E 602F              JZ      ?C0072
                                           ; SOURCE LINE # 1493
                                           ; SOURCE LINE # 1495
0040 900000      R     MOV     DPTR,#ftwInterval
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 904380            MOV     DPTR,#04380H
0048 E0                MOVX    A,@DPTR
0049 FE                MOV     R6,A
004A EE                MOV     A,R6
004B 6F                XRL     A,R7
004C 6044              JZ      ?C0076
                                           ; SOURCE LINE # 1496
                                           ; SOURCE LINE # 1498
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 64  

004E 904382            MOV     DPTR,#04382H
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 EF                MOV     A,R7
0054 54FE              ANL     A,#0FEH
0056 FF                MOV     R7,A
0057 EF                MOV     A,R7
0058 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1499
0059 900000      R     MOV     DPTR,#ftwInterval
005C E0                MOVX    A,@DPTR
005D FF                MOV     R7,A
005E 904380            MOV     DPTR,#04380H
0061 EF                MOV     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1500
0063 904382            MOV     DPTR,#04382H
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 EF                MOV     A,R7
0069 4401              ORL     A,#01H
006B FF                MOV     R7,A
006C EF                MOV     A,R7
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1501
                                           ; SOURCE LINE # 1502
006E 22                RET     
006F         ?C0072:
                                           ; SOURCE LINE # 1504
                                           ; SOURCE LINE # 1506
006F 900000      R     MOV     DPTR,#ftwInterval
0072 E0                MOVX    A,@DPTR
0073 FF                MOV     R7,A
0074 904380            MOV     DPTR,#04380H
0077 E0                MOVX    A,@DPTR
0078 FE                MOV     R6,A
0079 EE                MOV     A,R6
007A 6F                XRL     A,R7
007B 600A              JZ      ?C0075
                                           ; SOURCE LINE # 1507
                                           ; SOURCE LINE # 1509
007D 900000      R     MOV     DPTR,#ftwInterval
0080 E0                MOVX    A,@DPTR
0081 FF                MOV     R7,A
0082 904380            MOV     DPTR,#04380H
0085 EF                MOV     A,R7
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1510
0087         ?C0075:
                                           ; SOURCE LINE # 1513
0087 904382            MOV     DPTR,#04382H
008A E0                MOVX    A,@DPTR
008B FF                MOV     R7,A
008C EF                MOV     A,R7
008D 4401              ORL     A,#01H
008F FF                MOV     R7,A
0090 EF                MOV     A,R7
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1514
                                           ; SOURCE LINE # 1515
0092         ?C0076:
0092 22                RET     
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 65  

             ; FUNCTION _CyPmFtwSaveSet (END)

             ; FUNCTION CyPmHibSlpSaveSet (BEGIN)
                                           ; SOURCE LINE # 1639
                                           ; SOURCE LINE # 1640
                                           ; SOURCE LINE # 1653
0000 9046F5            MOV     DPTR,#046F5H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5407              ANL     A,#07H
0008 FF                MOV     R7,A
0009 900000      R     MOV     DPTR,#cyPmBackup+04H
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1656
000E 9046F5            MOV     DPTR,#046F5H
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 54F8              ANL     A,#0F8H
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1922
0019 904684            MOV     DPTR,#04684H
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F 540F              ANL     A,#0FH
0021 FF                MOV     R7,A
0022 900000      R     MOV     DPTR,#cyPmBackup+05H
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1924
0027 904684            MOV     DPTR,#04684H
002A E0                MOVX    A,@DPTR
002B FF                MOV     R7,A
002C EF                MOV     A,R7
002D 54F0              ANL     A,#0F0H
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 4408              ORL     A,#08H
0033 FF                MOV     R7,A
0034 904684            MOV     DPTR,#04684H
0037 EF                MOV     A,R7
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1935
0039 90400B            MOV     DPTR,#0400BH
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F 5404              ANL     A,#04H
0041 FF                MOV     R7,A
0042 7E00              MOV     R6,#00H
0044 EF                MOV     A,R7
0045 4E                ORL     A,R6
0046 6007              JZ      ?C0077
                                           ; SOURCE LINE # 1936
                                           ; SOURCE LINE # 1937
0048 900000      R     MOV     DPTR,#cyPmBackup+08H
004B 7401              MOV     A,#01H
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 66  

004D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1938
004E 22                RET     
004F         ?C0077:
                                           ; SOURCE LINE # 1940
                                           ; SOURCE LINE # 1941
004F 900000      R     MOV     DPTR,#cyPmBackup+08H
0052 E4                CLR     A
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1942
                                           ; SOURCE LINE # 1943
0054         ?C0079:
0054 22                RET     
             ; FUNCTION CyPmHibSlpSaveSet (END)

             ; FUNCTION CyPmHibSlpRestore (BEGIN)
                                           ; SOURCE LINE # 1967
                                           ; SOURCE LINE # 1968
                                           ; SOURCE LINE # 1970
0000 9046F5            MOV     DPTR,#046F5H
0003 C083              PUSH    DPH
0005 C082              PUSH    DPL
0007 E0                MOVX    A,@DPTR
0008 FF                MOV     R7,A
0009 900000      R     MOV     DPTR,#cyPmBackup+04H
000C E0                MOVX    A,@DPTR
000D FE                MOV     R6,A
000E EF                MOV     A,R7
000F 4E                ORL     A,R6
0010 FF                MOV     R7,A
0011 D082              POP     DPL
0013 D083              POP     DPH
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2107
0017 904684            MOV     DPTR,#04684H
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 54F0              ANL     A,#0F0H
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#cyPmBackup+05H
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 4E                ORL     A,R6
0027 FF                MOV     R7,A
0028 904684            MOV     DPTR,#04684H
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2114
002D 900000      R     MOV     DPTR,#cyPmBackup+08H
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 B4010B            CJNE    A,#01H,?C0081
                                           ; SOURCE LINE # 2115
                                           ; SOURCE LINE # 2117
0036 90400B            MOV     DPTR,#0400BH
0039 E0                MOVX    A,@DPTR
003A FF                MOV     R7,A
003B EF                MOV     A,R7
C51 COMPILER V9.03   CYPM                                                                  07/11/2012 14:12:39 PAGE 67  

003C 4404              ORL     A,#04H
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 2118
                                           ; SOURCE LINE # 2120
0041         ?C0081:
0041 22                RET     
             ; FUNCTION CyPmHibSlpRestore (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2308    ----
   CONSTANT SIZE    =     14    ----
   XDATA SIZE       =     25      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
