C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE ADC_DELSIG_1
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\ADC_DelSig_1.obj
COMPILER INVOKED BY: D:\dev_soft\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Generated_Source\
                    -PSoC3\ADC_DelSig_1.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\ADC_DelSig_1.lst) CD DB NOIP OT(2,SI
                    -ZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\ADC_DelSig_1.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: ADC_DelSig_1.c  
   3          * Version 2.20
   4          *
   5          * Description:
   6          *  This file provides the source code to the API for the Delta-Sigma ADC
   7          *  Component.
   8          *
   9          * Note:
  10          *
  11          *******************************************************************************
  12          * Copyright 2008-2011, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include "ADC_DelSig_1.h"
  19          
  20          #if(ADC_DelSig_1_DEFAULT_INTERNAL_CLK)
  21              #include "ADC_DelSig_1_theACLK.h"
  22          #endif /* ADC_DelSig_1_DEFAULT_INTERNAL_CLK */
  23          
  24          #if(ADC_DelSig_1_DEFAULT_CHARGE_PUMP_CLOCK)
  25              #include "ADC_DelSig_1_Ext_CP_Clk.h"
  26          #endif /* ADC_DelSig_1_DEFAULT_CHARGE_PUMP_CLOCK */
  27          
  28          #if(ADC_DelSig_1_DEFAULT_INPUT_MODE)
  29              #include "ADC_DelSig_1_AMux.h"
  30          #endif /* ADC_DelSig_1_DEFAULT_INPUT_MODE */
  31          
  32          /* Software flag for checking conversion completed or not */
  33          volatile uint8 ADC_DelSig_1_convDone = 0u;
  34          
  35          /* Software flag to stop conversion for single sample conversion mode 
  36             with resolution above 16 bits */
  37          volatile uint8 ADC_DelSig_1_stopConversion = 0u;
  38          
  39          /* To run the initialization block only at the start up */
  40          uint8 ADC_DelSig_1_initVar = 0u;
  41          
  42          /* To check whether ADC started or not before switching the configuration */
  43          volatile uint8 ADC_DelSig_1_started = 0u;
  44          
  45          volatile int32 ADC_DelSig_1_Offset = 0u;
  46          volatile int32 ADC_DelSig_1_CountsPerVolt = (uint32)ADC_DelSig_1_CFG1_COUNTS_PER_VOLT;
  47          
  48          /* Only valid for PSoC5 ES1 */
  49          /* Variable to decide whether or not to restore the register values from
  50              backup structure */
  51          #if (CY_PSOC5_ES1)
                  uint8 ADC_DelSig_1_restoreReg = 0u;
              #endif /* CY_PSOC5_ES1 */
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 2   

  54          
  55          /* Valid only for PSoC5 ES2 silicon */
  56          #if (CY_PSOC5_ES1)
                  /* Backup struct for power mode registers */
                  static ADC_DelSig_1_POWERMODE_BACKUP_STRUCT ADC_DelSig_1_powerModeBackup = 
                  {
                      /* Initializing the structure fields with power mode registers of 
                         config1 */
                      ADC_DelSig_1_CFG1_DSM_CR14,
                      ADC_DelSig_1_CFG1_DSM_CR15,
                      ADC_DelSig_1_CFG1_DSM_CR16,
                      ADC_DelSig_1_CFG1_DSM_CR17,
                      ADC_DelSig_1_CFG1_DSM_REF0,
                      ADC_DelSig_1_CFG1_DSM_BUF0,
                      ADC_DelSig_1_CFG1_DSM_BUF1,
                      ADC_DelSig_1_CFG1_DSM_CLK,
                      ADC_DelSig_1_BYPASS_DISABLED
                  };
              #endif /* CY_PSOC5_ES1 */
  73          
  74          
  75          /****************************************************************************** 
  76          * Function Name: ADC_DelSig_1_Init
  77          *******************************************************************************
  78          *
  79          * Summary:
  80          *  Initialize component's parameters to the parameters set by user in the 
  81          *  customizer of the component placed onto schematic. Usually called in 
  82          * ADC_DelSig_1_Start().
  83          *  
  84          *
  85          * Parameters:  
  86          *  void
  87          *
  88          * Return: 
  89          *  void 
  90          *
  91          * Reentrance: 
  92          *  Yes
  93          *
  94          *******************************************************************************/
  95          void ADC_DelSig_1_Init(void) 
  96          {
  97   1          /* Initialize the registers with default customizer settings for config1 */
  98   1          ADC_DelSig_1_InitConfig(1);
  99   1      
 100   1          /* This is only valid if there is an internal clock */
 101   1          #if(ADC_DelSig_1_DEFAULT_INTERNAL_CLK)
 102   1              ADC_DelSig_1_theACLK_SetMode(CYCLK_DUTY);
 103   1          #endif /* ADC_DelSig_1_DEFAULT_INTERNAL_CLK */
 104   1          
 105   1          /* This is only valid if there is an external charge pump clock */
 106   1          #if(ADC_DelSig_1_DEFAULT_CHARGE_PUMP_CLOCK)
 107   1              ADC_DelSig_1_Ext_CP_Clk_SetMode(CYCLK_DUTY);
 108   1          #endif /* ADC_DelSig_1_DEFAULT_CHARGE_PUMP_CLOCK */
 109   1      
 110   1          /* To perform ADC calibration */
 111   1          ADC_DelSig_1_GainCompensation(ADC_DelSig_1_CFG1_RANGE, 
 112   1                                            ADC_DelSig_1_CFG1_IDEAL_DEC_GAIN, 
 113   1                                            ADC_DelSig_1_CFG1_IDEAL_ODDDEC_GAIN, 
 114   1                                            ADC_DelSig_1_CFG1_RESOLUTION);        
 115   1      }
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 3   

 116          
 117          
 118          /******************************************************************************
 119          * Function Name: ADC_DelSig_1_Enable
 120          *******************************************************************************
 121          *
 122          * Summary: 
 123          *  Enables the ADC DelSig block operation.
 124          *  
 125          *
 126          * Parameters:  
 127          *  void
 128          *
 129          * Return: 
 130          *  void 
 131          *
 132          * Reentrance: 
 133          *  Yes
 134          *
 135          *******************************************************************************/
 136          void ADC_DelSig_1_Enable(void) 
 137          {
 138   1          /* Restore the power registers if silicon used is PSoC5 ES1 */
 139   1          #if (CY_PSOC5_ES1)
                      if(ADC_DelSig_1_restoreReg && 
                         (!(ADC_DelSig_1_powerModeBackup.bypassRestore)))
                      {
                          ADC_DelSig_1_RestorePowerRegisters();
                          ADC_DelSig_1_restoreReg = 0u;
                      }
                      ADC_DelSig_1_powerModeBackup.bypassRestore = ADC_DelSig_1_BYPASS_DISABLED;
                  #endif /* CY_PSOC5_ES1 */
 148   1      
 149   1          /* Enable active mode power for ADC */
 150   1          ADC_DelSig_1_PWRMGR_DEC_REG |= ADC_DelSig_1_ACT_PWR_DEC_EN;
 151   1          ADC_DelSig_1_PWRMGR_DSM_REG |= ADC_DelSig_1_ACT_PWR_DSM_EN;
 152   1          
 153   1           /* Enable alternative active mode power for ADC */
 154   1          ADC_DelSig_1_STBY_PWRMGR_DEC_REG |= ADC_DelSig_1_STBY_PWR_DEC_EN;
 155   1          #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
                  ADC_DelSig_1_STBY_PWRMGR_DSM_REG |= ADC_DelSig_1_STBY_PWR_DSM_EN;
                  #endif /* CY_PSOC3_ES3 || CY_PSOC5_ES2 */
 158   1      
 159   1          /* Disable PRES, Enable power to VCMBUF0, REFBUF0 and REFBUF1, enable 
 160   1             PRES */
 161   1          #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
                      ADC_DelSig_1_RESET_CR4_REG |= ADC_DelSig_1_IGNORE_PRESA1;
                      ADC_DelSig_1_RESET_CR5_REG |= ADC_DelSig_1_IGNORE_PRESA2;
                  #elif (CY_PSOC5_ES1 || CY_PSOC3_ES2)
 165   1              ADC_DelSig_1_RESET_CR1_REG |= ADC_DelSig_1_DIS_PRES1;
 166   1              ADC_DelSig_1_RESET_CR3_REG |= ADC_DelSig_1_DIS_PRES2;
 167   1          #endif /* CY_PSOC5_ES1 || CY_PSOC3_ES2 */
 168   1          
 169   1          ADC_DelSig_1_DSM_CR17_REG |= (ADC_DelSig_1_DSM_EN_BUF_VREF | ADC_DelSig_1_DSM_EN_BUF_VCM);
 170   1          #if ((ADC_DelSig_1_CFG1_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) || \
 171   1               (ADC_DelSig_1_CFG1_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32))
                      ADC_DelSig_1_DSM_CR17_REG &= ~ADC_DelSig_1_DSM_EN_BUF_VREF;
                  #endif /* Check for exteranl reference option */
 174   1          #if ((ADC_DelSig_1_CFG1_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF) && \
 175   1                (CY_PSOC3_ES3 || CY_PSOC5_ES2) && \
 176   1                ((ADC_DelSig_1_CFG1_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P03) && \
 177   1               (ADC_DelSig_1_CFG1_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P32)))
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 4   

                      ADC_DelSig_1_DSM_REF0_REG |= ADC_DelSig_1_DSM_EN_BUF_VREF_INN;
                  #endif /* ADC_DelSig_1_IR_VSSA_TO_2VREF */
 180   1          
 181   1              /* Wait for 3 microseconds */
 182   1          CyDelayUs(3);
 183   1          
 184   1          #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
                      ADC_DelSig_1_RESET_CR4_REG &= ~ADC_DelSig_1_IGNORE_PRESA1;
                      ADC_DelSig_1_RESET_CR5_REG &= ~ADC_DelSig_1_IGNORE_PRESA2;
                      
                      ADC_DelSig_1_RESET_CR3_REG = ADC_DelSig_1_EN_PRESA;
                  #elif (CY_PSOC5_ES1 || CY_PSOC3_ES2)
 190   1              ADC_DelSig_1_RESET_CR1_REG &= ~ADC_DelSig_1_DIS_PRES1;
 191   1              ADC_DelSig_1_RESET_CR3_REG &= ~ADC_DelSig_1_DIS_PRES2;
 192   1          #endif /* CY_PSOC5_ES1 || CY_PSOC3_ES2 */
 193   1          
 194   1          /* Enable negative pumps for DSM  */
 195   1          ADC_DelSig_1_PUMP_CR1_REG  |= ( ADC_DelSig_1_PUMP_CR1_CLKSEL | ADC_DelSig_1_PUMP_CR1_FORCE );
 196   1       
 197   1          /* This is only valid if there is an internal clock */
 198   1          #if(ADC_DelSig_1_DEFAULT_INTERNAL_CLK)
 199   1              ADC_DelSig_1_PWRMGR_CLK_REG |= ADC_DelSig_1_ACT_PWR_CLK_EN;        
 200   1              ADC_DelSig_1_STBY_PWRMGR_CLK_REG |= ADC_DelSig_1_STBY_PWR_CLK_EN;
 201   1              
 202   1              ADC_DelSig_1_theACLK_Enable();
 203   1          #endif /* ADC_DelSig_1_DEFAULT_INTERNAL_CLK */
 204   1          
 205   1          /* This is only valid if there is an external charge pump clock */
 206   1          #if(ADC_DelSig_1_DEFAULT_CHARGE_PUMP_CLOCK)
 207   1              ADC_DelSig_1_PWRMGR_CHARGE_PUMP_CLK_REG |= ADC_DelSig_1_ACT_PWR_CHARGE_PUMP_CLK_EN;
 208   1              ADC_DelSig_1_STBY_PWRMGR_CHARGE_PUMP_CLK_REG |= ADC_DelSig_1_STBY_PWR_CHARGE_PUMP_CLK_EN;
 209   1              
 210   1              ADC_DelSig_1_Ext_CP_Clk_Enable();
 211   1          #endif /* ADC_DelSig_1_DEFAULT_CHARGE_PUMP_CLOCK */
 212   1      
 213   1      }
 214          
 215          
 216          #if (CY_PSOC5_ES1) /* valid only for PSoC5 ES1 silicon */
                  /******************************************************************************* 
                  * Function Name: ADC_DelSig_1_RestorePowerRegisters
                  ********************************************************************************
                  *
                  * Summary: 
                  *  Restores the power registers on calling Start() API. This API is only 
                  *   for internal use and valid only for PSoC5 ES1.
                  *  
                  *
                  * Parameters:  
                  *  void
                  *
                  * Return: 
                  *  void 
                  *
                  * Reentrance: 
                  *  Yes
                  *
                  ***************************************************************************/
                  void ADC_DelSig_1_RestorePowerRegisters(void)
                  {
                      ADC_DelSig_1_DSM_CR14_REG = ADC_DelSig_1_powerModeBackup.DSM_CR_14;
                      ADC_DelSig_1_DSM_CR15_REG = ADC_DelSig_1_powerModeBackup.DSM_CR_15;
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 5   

                      ADC_DelSig_1_DSM_CR16_REG = ADC_DelSig_1_powerModeBackup.DSM_CR_16;
                      ADC_DelSig_1_DSM_CR17_REG = ADC_DelSig_1_powerModeBackup.DSM_CR_17;
                      ADC_DelSig_1_DSM_REF0_REG = ADC_DelSig_1_powerModeBackup.DSM_REF0;
                      ADC_DelSig_1_DSM_BUF0_REG = ADC_DelSig_1_powerModeBackup.DSM_BUF0;
                      ADC_DelSig_1_DSM_BUF1_REG = ADC_DelSig_1_powerModeBackup.DSM_BUF1;
                      ADC_DelSig_1_DSM_CLK_REG = ADC_DelSig_1_powerModeBackup.DSM_CLK;
                  }
              
              
                  /************************************************************************** 
                  * Function Name: ADC_DelSig_1_SavePowerRegisters
                  ***************************************************************************
                  *
                  * Summary: 
                  *  Save the power registers before stopping the block operation. This is 
                  *  called by Stop() API. This API is only for internal use and valid only 
                  *  for PSoC5 ES1.
                  *  
                  *
                  * Parameters:  
                  *  void
                  *
                  * Return: 
                  *  void 
                  *
                  * Reentrance: 
                  *  Yes
                  *
                  **************************************************************************/
                  void ADC_DelSig_1_SavePowerRegisters(void)
                  {
                      ADC_DelSig_1_powerModeBackup.DSM_CR_14 = ADC_DelSig_1_DSM_CR14_REG;
                      ADC_DelSig_1_powerModeBackup.DSM_CR_15 = ADC_DelSig_1_DSM_CR15_REG;
                      ADC_DelSig_1_powerModeBackup.DSM_CR_16 = ADC_DelSig_1_DSM_CR16_REG;
                      ADC_DelSig_1_powerModeBackup.DSM_CR_17 = ADC_DelSig_1_DSM_CR17_REG;
                      ADC_DelSig_1_powerModeBackup.DSM_REF0 = ADC_DelSig_1_DSM_REF0_REG;
                      ADC_DelSig_1_powerModeBackup.DSM_BUF0 = ADC_DelSig_1_DSM_BUF0_REG;
                      ADC_DelSig_1_powerModeBackup.DSM_BUF1 = ADC_DelSig_1_DSM_BUF1_REG;
                      ADC_DelSig_1_powerModeBackup.DSM_CLK = ADC_DelSig_1_DSM_CLK_REG;
                  }
              
              
                  /************************************************************************* 
                  * Function Name: ADC_DelSig_1_SetLowPower
                  ***************************************************************************
                  *
                  * Summary: 
                  *  Set all the power registers of DSM block to low power mode. This API is
                  *   called by Stop() API. This API is only for internal use and valid for 
                  *   only PSoC5 ES1.
                  *  
                  *
                  * Parameters:  
                  *  void
                  *
                  * Return: 
                  *  void 
                  *
                  * Reentrance: 
                  *  Yes
                  *
                  ***************************************************************************/
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 6   

                  void ADC_DelSig_1_SetLowPower(void)
                  {
                      ADC_DelSig_1_DSM_CR14_REG &= ~ADC_DelSig_1_DSM_POWER1_MASK;
                      ADC_DelSig_1_DSM_CR14_REG |= ADC_DelSig_1_DSM_POWER1_44UA;
                      
                      ADC_DelSig_1_DSM_CR15_REG &= ~(ADC_DelSig_1_DSM_POWER2_3_MASK | ADC_DelSig_1_DSM_POWER_COMP_MASK);
                      ADC_DelSig_1_DSM_CR15_REG |= (ADC_DelSig_1_DSM_POWER2_3_LOW | ADC_DelSig_1_DSM_POWER_VERYLOW);
                      
                      ADC_DelSig_1_DSM_CR16_REG &= ~(ADC_DelSig_1_DSM_CP_PWRCTL_MASK | ADC_DelSig_1_DSM_POWER_SUM_MASK |
                                                         ADC_DelSig_1_DSM_CP_ENABLE);
                      ADC_DelSig_1_DSM_CR16_REG |= (ADC_DelSig_1_DSM_POWER_SUM_LOW | ADC_DelSig_1_DSM_CP_PWRCTL_LOW);
                      
                      ADC_DelSig_1_DSM_CR17_REG &= ~(ADC_DelSig_1_DSM_EN_BUF_VREF | ADC_DelSig_1_DSM_PWR_CTRL_VCM_MASK |
                                                         ADC_DelSig_1_DSM_PWR_CTRL_VREF_MASK | ADC_DelSig_1_DSM_EN_BUF_V
             -CM |
                                                         ADC_DelSig_1_DSM_PWR_CTRL_VREF_INN_MASK);
                      ADC_DelSig_1_DSM_CR17_REG |= (ADC_DelSig_1_DSM_PWR_CTRL_VREF_0 | ADC_DelSig_1_DSM_PWR_CTRL_VCM_0 |
                                                         ADC_DelSig_1_DSM_PWR_CTRL_VREF_INN_0);
                      
                      /* Disable reference buffers */
                      ADC_DelSig_1_DSM_REF0_REG &= ~(ADC_DelSig_1_DSM_EN_BUF_VREF_INN | ADC_DelSig_1_DSM_VREF_RES_DIV_EN
             - |
                                                         ADC_DelSig_1_DSM_VCM_RES_DIV_EN);
                          
                      /* Disable the positive input buffer */
                      ADC_DelSig_1_DSM_BUF0_REG &= ~ADC_DelSig_1_DSM_ENABLE_P;
                      /* Disable the negative input buffer */
                      ADC_DelSig_1_DSM_BUF1_REG &= ~ADC_DelSig_1_DSM_ENABLE_N;
                      /* Disable the clock to DSM */
                      ADC_DelSig_1_DSM_CLK_REG &= ~(ADC_DelSig_1_DSM_CLK_CLK_EN | ADC_DelSig_1_DSM_CLK_BYPASS_SYNC);
                  }
              #endif /* CY_PSOC5_ES1 */
 332          
 333          
 334          /******************************************************************************* 
 335          * Function Name: ADC_DelSig_1_Start
 336          ********************************************************************************
 337          *
 338          * Summary:
 339          *  The start function initializes the Delta Sigma Modulator with the default  
 340          *  values, and sets the power to the given level.  A power level of 0, is the 
 341          *  same as executing the stop function.
 342          *
 343          * Parameters:  
 344          *  None
 345          *
 346          * Return: 
 347          *  void 
 348          *
 349          * Global variables:
 350          *  ADC_DelSig_1_initVar:  Used to check the initial configuration,
 351          *  modified when this function is called for the first time.
 352          
 353          *
 354          * Reetrance: 
 355          *  No
 356          *
 357          *******************************************************************************/
 358          void ADC_DelSig_1_Start() 
 359          {
 360   1          if(ADC_DelSig_1_initVar == 0u)
 361   1          {
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 7   

 362   2              if(!(ADC_DelSig_1_started))
 363   2              {
 364   3                  ADC_DelSig_1_Init();
 365   3              }
 366   2              ADC_DelSig_1_initVar = 1u;
 367   2          }
 368   1      
 369   1          /* Enable the ADC */
 370   1          ADC_DelSig_1_Enable();
 371   1      }
 372          
 373          
 374          /*******************************************************************************
 375          * Function Name: ADC_DelSig_1_Stop
 376          ********************************************************************************
 377          *
 378          * Summary:
 379          *  Stops and powers down ADC to lowest power state.
 380          *
 381          * Parameters:  
 382          *  void
 383          *
 384          * Return: 
 385          *  void 
 386          *
 387          * Reentrance: 
 388          *  Yes
 389          *
 390          *******************************************************************************/
 391          void ADC_DelSig_1_Stop(void) 
 392          {
 393   1          /* Stop conversions */
 394   1          ADC_DelSig_1_DEC_CR_REG &= ~ADC_DelSig_1_DEC_START_CONV;
 395   1          ADC_DelSig_1_DEC_SR_REG |=  ADC_DelSig_1_DEC_INTR_CLEAR;
 396   1          
 397   1          /* Disable PRES, Disable power to VCMBUF0, REFBUF0 and REFBUF1, 
 398   1             enable PRES */
 399   1          #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
                      ADC_DelSig_1_RESET_CR4_REG |= ADC_DelSig_1_IGNORE_PRESA1;
                      ADC_DelSig_1_RESET_CR5_REG |= ADC_DelSig_1_IGNORE_PRESA2;
                  #elif (CY_PSOC5_ES1 || CY_PSOC3_ES2)
 403   1              ADC_DelSig_1_RESET_CR1_REG |= ADC_DelSig_1_DIS_PRES1;
 404   1              ADC_DelSig_1_RESET_CR3_REG |= ADC_DelSig_1_DIS_PRES2;
 405   1          #endif /* CY_PSOC5_ES1 || CY_PSOC3_ES2 */
 406   1          
 407   1          ADC_DelSig_1_DSM_CR17_REG &= ~(ADC_DelSig_1_DSM_EN_BUF_VREF | ADC_DelSig_1_DSM_EN_BUF_VCM);
 408   1          ADC_DelSig_1_DSM_REF0_REG &= ~ADC_DelSig_1_DSM_EN_BUF_VREF_INN;
 409   1          
 410   1          /* Wait for 3 microseconds. */
 411   1          CyDelayUs(3);
 412   1          
 413   1          #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
                      ADC_DelSig_1_RESET_CR4_REG &= ~ADC_DelSig_1_IGNORE_PRESA1;
                      ADC_DelSig_1_RESET_CR5_REG &= ~ADC_DelSig_1_IGNORE_PRESA2;
                      
                      /* Enable the press circuit */
                      ADC_DelSig_1_RESET_CR3_REG = ADC_DelSig_1_EN_PRESA;
                  #elif (CY_PSOC5_ES1 || CY_PSOC3_ES2)
 420   1              ADC_DelSig_1_RESET_CR1_REG &= ~ADC_DelSig_1_DIS_PRES1;
 421   1              ADC_DelSig_1_RESET_CR3_REG &= ~ADC_DelSig_1_DIS_PRES2;
 422   1          #endif /* CY_PSOC5_ES1 || CY_PSOC3_ES2 */
 423   1          
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 8   

 424   1          /* If PSoC5 ES1 then don't disable the power instead put the block to  
 425   1             low power mode. Also, save current state of all the power configuration 
 426   1             registers before putting block to low power mode */
 427   1          #if (CY_PSOC5_ES1)
                      
                      /* set the flag */
                      ADC_DelSig_1_restoreReg = 1u;
                      
                      ADC_DelSig_1_SavePowerRegisters();
                      ADC_DelSig_1_SetLowPower();
                  #else    
 435   1              /* Disable power to the ADC */
 436   1              ADC_DelSig_1_PWRMGR_DSM_REG &= ~ADC_DelSig_1_ACT_PWR_DSM_EN;
 437   1          #endif /* CY_PSOC5_ES1 */
 438   1          
 439   1          /* Disable power to Decimator block */
 440   1          ADC_DelSig_1_PWRMGR_DEC_REG &= ~ADC_DelSig_1_ACT_PWR_DEC_EN;
 441   1          
 442   1          /* Disable alternative active power to the ADC */
 443   1          ADC_DelSig_1_STBY_PWRMGR_DEC_REG &= ~ADC_DelSig_1_STBY_PWR_DEC_EN;
 444   1          #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
                  ADC_DelSig_1_STBY_PWRMGR_DSM_REG &= ~ADC_DelSig_1_STBY_PWR_DSM_EN;
                  #endif /* CY_PSOC3_ES3 || CY_PSOC5_ES2 */
 447   1      
 448   1         /* Disable negative pumps for DSM  */
 449   1          ADC_DelSig_1_PUMP_CR1_REG &= ~(ADC_DelSig_1_PUMP_CR1_CLKSEL | ADC_DelSig_1_PUMP_CR1_FORCE );
 450   1          
 451   1          /* This is only valid if there is an internal clock */
 452   1          #if(ADC_DelSig_1_DEFAULT_INTERNAL_CLK)
 453   1              ADC_DelSig_1_PWRMGR_CLK_REG &= ~ADC_DelSig_1_ACT_PWR_CLK_EN;
 454   1              ADC_DelSig_1_STBY_PWRMGR_CLK_REG &= ~ADC_DelSig_1_STBY_PWR_CLK_EN;
 455   1              
 456   1              ADC_DelSig_1_theACLK_Disable();
 457   1          #endif /* ADC_DelSig_1_DEFAULT_INTERNAL_CLK */
 458   1          
 459   1          /* This is only valid if there is an external charge pump clock */
 460   1          #if(ADC_DelSig_1_DEFAULT_CHARGE_PUMP_CLOCK)
 461   1              ADC_DelSig_1_PWRMGR_CHARGE_PUMP_CLK_REG &= ~ADC_DelSig_1_ACT_PWR_CHARGE_PUMP_CLK_EN;
 462   1              ADC_DelSig_1_STBY_PWRMGR_CHARGE_PUMP_CLK_REG &= ~ADC_DelSig_1_STBY_PWR_CHARGE_PUMP_CLK_EN;
 463   1              
 464   1              ADC_DelSig_1_Ext_CP_Clk_Disable();
 465   1          #endif /* ADC_DelSig_1_DEFAULT_CHARGE_PUMP_CLOCK */    
 466   1      }
 467          
 468          
 469          /*******************************************************************************
 470          * Function Name: ADC_DelSig_1_SetBufferGain
 471          ********************************************************************************
 472          *
 473          * Summary:
 474          *  Set input buffer range.
 475          *
 476          * Parameters:  
 477          *  gain:  Two bit value to select a gain of 1, 2, 4, or 8.
 478          *
 479          * Return: 
 480          *  void
 481          *
 482          * Reentrance: 
 483          *  Yes
 484          *
 485          *******************************************************************************/
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 9   

 486          void ADC_DelSig_1_SetBufferGain(uint8 gain) 
 487          {
 488   1          uint8 tmpReg;
 489   1          tmpReg = ADC_DelSig_1_DSM_BUF1_REG & ~ADC_DelSig_1_DSM_GAIN_MASK;
 490   1          tmpReg |= (gain << 2);
 491   1          ADC_DelSig_1_DSM_BUF1_REG = tmpReg;
 492   1      }
 493          
 494          
 495          /*******************************************************************************
 496          * Function Name: ADC_DelSig_1_SetCoherency
 497          ********************************************************************************
 498          *
 499          * Summary:
 500          *  Sets the ADC output register coherency bit.
 501          *
 502          * Parameters:  
 503          *  gain:  Two bit value to set the coherency bit.
 504                    00-Coherency checking off
 505                    01-low byte is key byte
 506                    02-middle byte is the key byte
 507                    03-high byte is the key byte
 508          *
 509          * Return: 
 510          *  void
 511          *
 512          * Side Effects:  If the coherency is changed, for any reason, it should be 
 513          *                changed back to the LSB when the provided “GetResult” API 
 514          *                is used.
 515          *
 516          * Reentrance: 
 517          *  Yes
 518          *
 519          *******************************************************************************/
 520          void ADC_DelSig_1_SetCoherency(uint8 coherency) 
 521          {
 522   1          uint8 tmpReg;    
 523   1          tmpReg = ADC_DelSig_1_DEC_COHER_REG & ~ADC_DelSig_1_DEC_SAMP_KEY_MASK;
 524   1          tmpReg |= coherency;
 525   1          ADC_DelSig_1_DEC_COHER_REG = tmpReg;
 526   1      }
 527          
 528          
 529          /*******************************************************************************
 530          * Function Name: ADC_DelSig_1_SetGCOR
 531          ********************************************************************************
 532          *
 533          * Summary:
 534          *  Calculates a new GCOR value and writes it into the GCOR register.
 535          *
 536          * Parameters:  
 537          *  gainAdjust:  floating point value to set GCOR registers.
 538          *
 539          * Return: 
 540          *  uint8:  0-if GCOR value is within the expected range.
 541                     1- if GCOR is outside the expected range.
 542          *
 543          * Side Effects:  The GVAL register is set to the amount of valid bits in the
 544          *                GCOR  register minus one. If GVAL is 15 (0x0F), all 16 bits
 545          *                of the GCOR registers will be valid. If for example GVAL is 
 546          *                11 (0x0B) only 12 bits will be valid. The least 4 bits will
 547          *                be lost when the GCOR value is shifted 4 places to the right.
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 10  

 548          *
 549          * Reentrance: 
 550          *  Yes
 551          *
 552          ******************************************************************************/
 553          uint8 ADC_DelSig_1_SetGCOR(float gainAdjust) 
 554          {
 555   1          uint16 tmpReg;
 556   1          uint8 status;
 557   1          float tmpValue;
 558   1          
 559   1          tmpReg = ADC_DelSig_1_DEC_GCORH_REG;
 560   1          tmpReg = (tmpReg << 8) | ADC_DelSig_1_DEC_GCOR_REG;
 561   1          tmpValue = ((float)tmpReg / ADC_DelSig_1_IDEAL_GAIN_CONST);
 562   1          tmpValue = tmpValue * gainAdjust;
 563   1          
 564   1          if (tmpValue > 1.9999)
 565   1          {
 566   2              status = 1;
 567   2          }
 568   1          else
 569   1          {
 570   2              tmpReg = (uint16)(tmpValue * ADC_DelSig_1_IDEAL_GAIN_CONST);
 571   2              ADC_DelSig_1_DEC_GCOR_REG = (uint8)tmpReg;
 572   2              ADC_DelSig_1_DEC_GCORH_REG = (uint8) (tmpReg >> 8);
 573   2              status = 0;
 574   2          }
 575   1          
 576   1          return status;
 577   1      }
 578          
 579          
 580          /******************************************************************************
 581          * Function Name: ADC_DelSig_1_ReadGCOR
 582          *******************************************************************************
 583          *
 584          * Summary:
 585          *  This API returns the current GCOR register value, normalized based on the 
 586          *  GVAL register settings.
 587          *
 588          * Parameters:  
 589          *  void
 590          *
 591          * Return: 
 592          *  uint16:  Normalized GCOR value.
 593          *
 594          * Side Effects:  If the GVAL register is set to a value greater than 0x0F, then
 595                           it gives unexpected value.
 596          *
 597          * Reentrance: 
 598          *  Yes
 599          *
 600          *******************************************************************************/
 601          uint16 ADC_DelSig_1_ReadGCOR(void) 
 602          {
 603   1          uint8 gValue;
 604   1          uint16 gcorValue, gcorRegValue;
 605   1          
 606   1          gValue = ADC_DelSig_1_DEC_GVAL_REG;
 607   1          gcorRegValue = CY_GET_REG16(ADC_DelSig_1_DEC_GCOR_PTR);
 608   1          
 609   1          switch (gValue)
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 11  

 610   1          {
 611   2              case ADC_DelSig_1_GVAL_RESOLUTIN_8:
 612   2                  gcorValue = gcorRegValue << (ADC_DelSig_1_MAX_GVAL - gValue);
 613   2                  break;
 614   2              
 615   2              case ADC_DelSig_1_GVAL_RESOLUTIN_9:
 616   2                  gcorValue = gcorRegValue << (ADC_DelSig_1_MAX_GVAL - gValue);
 617   2                  break;
 618   2                  
 619   2              case ADC_DelSig_1_GVAL_RESOLUTIN_10:
 620   2                  gcorValue = gcorRegValue << (ADC_DelSig_1_MAX_GVAL - gValue);
 621   2                  break;
 622   2                  
 623   2              case ADC_DelSig_1_GVAL_RESOLUTIN_11:
 624   2                  gcorValue = gcorRegValue << (ADC_DelSig_1_MAX_GVAL - gValue);
 625   2                  break;
 626   2                  
 627   2              case ADC_DelSig_1_GVAL_RESOLUTIN_12:
 628   2                  gcorValue = gcorRegValue << (ADC_DelSig_1_MAX_GVAL - gValue);
 629   2                  break;
 630   2                  
 631   2              case ADC_DelSig_1_GVAL_RESOLUTIN_13:
 632   2                  gcorValue = gcorRegValue << (ADC_DelSig_1_MAX_GVAL - gValue);
 633   2                  break;
 634   2                  
 635   2              default:
 636   2                  gcorValue = gcorRegValue;
 637   2                  break;
 638   2          }
 639   1              
 640   1          return gcorValue;
 641   1      }
 642          
 643          
 644          /*******************************************************************************
 645          * Function Name: ADC_DelSig_1_SetBufferChop
 646          ********************************************************************************
 647          *
 648          * Summary:
 649          *  Sets the Delta Sigma Modulator Buffer chopper mode.
 650          *
 651          * Parameters:  
 652          *  chopen:  If non-zero set the chopper mode.
 653          *  chopFreq:  Chop frequency value.
 654          *
 655          * Return: 
 656          *  void
 657          *
 658          * Reentrance: 
 659          *  Yes
 660          *
 661          *******************************************************************************/
 662          void ADC_DelSig_1_SetBufferChop(uint8 chopen, uint8 chopFreq) 
 663          {
 664   1          if(chopen != 0u)
 665   1          {
 666   2              ADC_DelSig_1_DSM_BUF2_REG = (ADC_DelSig_1_DSM_BUF_FCHOP_MASK & chopFreq) | \
 667   2                                               ADC_DelSig_1_DSM_BUF_CHOP_EN;
 668   2          }
 669   1          else
 670   1          {
 671   2              ADC_DelSig_1_DSM_BUF2_REG = 0x00u;
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 12  

 672   2          }
 673   1      }
 674          
 675          
 676          /*******************************************************************************
 677          * Function Name: ADC_DelSig_1_StartConvert
 678          ********************************************************************************
 679          *
 680          * Summary:
 681          *  Starts ADC conversion using the given mode.
 682          *
 683          * Parameters:  
 684          *  void
 685          *
 686          * Return: 
 687          *  void 
 688          *
 689          * Reentrance: 
 690          *  Yes
 691          *
 692          *******************************************************************************/
 693          void ADC_DelSig_1_StartConvert(void) 
 694          {
 695   1          /* Start the conversion */
 696   1          ADC_DelSig_1_DEC_CR_REG |= ADC_DelSig_1_DEC_START_CONV;  
 697   1      }
 698          
 699          
 700          /*******************************************************************************
 701          * Function Name: ADC_DelSig_1_StopConvert
 702          ********************************************************************************
 703          *
 704          * Summary:
 705          *  Starts ADC conversion using the given mode.
 706          *
 707          * Parameters:  
 708          *  void
 709          *
 710          * Return: 
 711          *  void
 712          *
 713          * Global variables:
 714          *  ADC_DelSig_1_convDone:  Modified when conversion is complete for single
 715          *   sample mode with resolution is above 16.
 716          *
 717          * Reentrance: 
 718          *  No
 719          *
 720          *******************************************************************************/
 721          void ADC_DelSig_1_StopConvert(void)
 722          {
 723   1          /* Stop all conversions */
 724   1          ADC_DelSig_1_DEC_CR_REG &= ~ADC_DelSig_1_DEC_START_CONV; 
 725   1          
 726   1          /* Software flag for checking conversion complete or not. Will be used when
 727   1             resolution is above 16 bits and conversion mode is single sample */
 728   1          ADC_DelSig_1_convDone = 1u;
 729   1      }
 730          
 731          
 732          /*******************************************************************************
 733          * Function Name: ADC_DelSig_1_IsEndConversion
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 13  

 734          ********************************************************************************
 735          *
 736          * Summary:
 737          *  Queries the ADC to see if conversion is complete
 738          *
 739          * Parameters:  
 740          *  wMode:  Wait mode, 0 if return with answer immediately.
 741          *                     1 if wait until conversion is complete, then return.
 742          *
 743          * Return: 
 744          *  uint8 status:  0 =>  Conversion not complete.
 745          *                 1 =>  Conversion complete.
 746          *
 747          * Global variables:
 748          *  ADC_DelSig_1_convDone:  Used to check whether conversion is complete
 749          *  or not for single sample mode with resolution is above 16
 750          *
 751          * Reentrance: 
 752          *  Yes
 753          *
 754          *******************************************************************************/
 755          uint8 ADC_DelSig_1_IsEndConversion(uint8 wMode) 
 756          {
 757   1          uint8 status;
 758   1              
 759   1          /* Check for stop convert if conversion mode is Single Sample with 
 760   1             resolution above 16 bit */
 761   1          if(ADC_DelSig_1_stopConversion == 1u)
 762   1          {
 763   2              do
 764   2              {
 765   3                  status = ADC_DelSig_1_convDone;
 766   3              } while((status != ADC_DelSig_1_DEC_CONV_DONE) && (wMode == ADC_DelSig_1_WAIT_FOR_RESULT));
 767   2          }
 768   1          else
 769   1          {
 770   2              do 
 771   2              {
 772   3                  status = ADC_DelSig_1_DEC_SR_REG & ADC_DelSig_1_DEC_CONV_DONE;
 773   3              } while((status != ADC_DelSig_1_DEC_CONV_DONE) && (wMode == ADC_DelSig_1_WAIT_FOR_RESULT));
 774   2          }
 775   1          return(status);
 776   1      }
 777          
 778          
 779          /*******************************************************************************
 780          * Function Name: ADC_DelSig_1_GetResult8
 781          ********************************************************************************
 782          *
 783          * Summary:
 784          *  Returns an 8-bit result or the LSB of the last conversion.
 785          *
 786          * Parameters:  
 787          *  void
 788          *
 789          * Return: 
 790          *  int8:  ADC result.
 791          *
 792          * Reentrance: 
 793          *  Yes
 794          *
 795          *******************************************************************************/
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 14  

 796          int8 ADC_DelSig_1_GetResult8( void ) 
 797          {
 798   1           return( ADC_DelSig_1_DEC_SAMP_REG );
 799   1      }
 800          
 801          
 802          /*******************************************************************************
 803          * Function Name: ADC_DelSig_1_GetResult16
 804          ********************************************************************************
 805          *
 806          * Summary:
 807          *  Returns a 16-bit result from the last ADC conversion.
 808          *
 809          * Parameters:  
 810          *   void
 811          *
 812          * Return: 
 813          *  int16:  ADC result.
 814          *
 815          * Reentrance: 
 816          *  Yes
 817          *
 818          *******************************************************************************/
 819          int16 ADC_DelSig_1_GetResult16(void) 
 820          {
 821   1          uint16 result;
 822   1          
 823   1          #if (CY_PSOC3)
 824   1              result = ADC_DelSig_1_DEC_SAMPM_REG ;
 825   1              result = (result << 8 ) | ADC_DelSig_1_DEC_SAMP_REG;
 826   1          #else
                      result = (CY_GET_REG16(ADC_DelSig_1_DEC_SAMP_PTR));
                  #endif /* CY_PSOC3 */
 829   1          
 830   1          return result;
 831   1      }
 832          
 833          
 834          /*******************************************************************************
 835          * Function Name: ADC_DelSig_1_GetResult32
 836          ********************************************************************************
 837          *
 838          * Summary:
 839          *  Returns an 32-bit result from ADC
 840          *
 841          * Parameters:  
 842          *  void
 843          *
 844          * Return: 
 845          *  int32:  ADC result.
 846          *
 847          * Reentrance: 
 848          *  Yes
 849          *
 850          *******************************************************************************/
 851          int32 ADC_DelSig_1_GetResult32(void) 
 852          {
 853   1          uint32 result;
 854   1      
 855   1          #if (CY_PSOC3)
 856   1              /* to make upper bits fo result to 0 */
 857   1              result = (int8) (0xff & ADC_DelSig_1_DEC_SAMPH_REG); 
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 15  

 858   1              result = (result << 8) | ADC_DelSig_1_DEC_SAMPM_REG;
 859   1              result = (result << 8) | ADC_DelSig_1_DEC_SAMP_REG;
 860   1          #else
                      result = CY_GET_REG16(ADC_DelSig_1_DEC_SAMPH_PTR);
                      result = (result << 16) | (CY_GET_REG16(ADC_DelSig_1_DEC_SAMP_PTR));
                  #endif /* CY_PSOC3 */
 864   1          
 865   1          return result;
 866   1      }
 867          
 868          
 869          /*******************************************************************************
 870          * Function Name: ADC_DelSig_1_SetOffset
 871          ********************************************************************************
 872          *
 873          * Summary:
 874          *  This function sets the offset for voltage readings.
 875          *
 876          * Parameters:  
 877          *  int32:  offset  Offset in counts
 878          *
 879          * Return: 
 880          *  void
 881          *
 882          * Global variables:
 883          *  ADC_DelSig_1_Offset:  Modified to set the user provided offset. This 
 884          *  variable is used for offset calibration purpose.
 885          *  Affects the ADC_DelSig_1_CountsTo_Volts, 
 886          *  ADC_DelSig_1_CountsTo_mVolts, ADC_DelSig_1_CountsTo_uVolts functions 
 887          *  by subtracting the given offset. 
 888          *
 889          * Reentrance: 
 890          *  No
 891          *
 892          *******************************************************************************/
 893          void ADC_DelSig_1_SetOffset(int32 offset)
 894          {
 895   1       
 896   1          ADC_DelSig_1_Offset = offset;
 897   1      }
 898          
 899          
 900          /*******************************************************************************
 901          * Function Name: ADC_DelSig_1_SetGain
 902          ********************************************************************************
 903          *
 904          * Summary:
 905          *  This function sets the ADC gain in counts per volt.
 906          *
 907          * Parameters:  
 908          *  int32:  offset  Offset in counts
 909          *
 910          * Return: 
 911          *  void 
 912          *
 913          * Global variables:
 914          *  ADC_DelSig_1_CountsPerVolt:  modified to set the ADC gain in counts 
 915          *   per volt.
 916          *
 917          * Reentrance: 
 918          *  No
 919          *
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 16  

 920          *******************************************************************************/
 921          void ADC_DelSig_1_SetGain(int32 adcGain)
 922          {
 923   1       
 924   1          ADC_DelSig_1_CountsPerVolt = adcGain;
 925   1      }
 926          
 927          
 928          /*******************************************************************************
 929          * Function Name: ADC_DelSig_1_CountsTo_mVolts
 930          ********************************************************************************
 931          *
 932          * Summary:
 933          *  This function converts ADC counts to mVolts.
 934          *
 935          * Parameters:  
 936          *  int32:  adcCounts   Reading from ADC.
 937          *
 938          * Return: 
 939          *  int32:  Result in mVolts
 940          *
 941          * Global variables:
 942          *  ADC_DelSig_1_CountsPerVolt:  used to convert ADC counts to mVolts.
 943          *  ADC_DelSig_1_Offset:  Used as the offset while converting ADC counts 
 944          *   to mVolts.
 945          *
 946          * Reentrance: 
 947          *  Yes
 948          *
 949          *******************************************************************************/
 950          int16 ADC_DelSig_1_CountsTo_mVolts( int32 adcCounts) 
 951          {
 952   1      
 953   1          int32 mVolts = 0;
 954   1          int32 A, B;
 955   1      
 956   1          /* Subtract ADC offset */
 957   1          adcCounts -= ADC_DelSig_1_Offset;
 958   1      
 959   1          if(ADC_DelSig_1_CFG1_RESOLUTION < 17)
 960   1          {
 961   2              A = 1000;
 962   2              B = 1;
 963   2          }
 964   1          else
 965   1          {
 966   2              A = 100;
 967   2              B = 10;
 968   2          }
 969   1      
 970   1          mVolts = ((A * adcCounts) / ((int32)ADC_DelSig_1_CountsPerVolt/B)) ;   
 971   1      
 972   1          return( (int16)mVolts );
 973   1      }
 974          
 975          
 976          /*******************************************************************************
 977          * Function Name: ADC_DelSig_1_CountsTo_Volts
 978          ********************************************************************************
 979          *
 980          * Summary:
 981          *  This function converts ADC counts to Volts
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 17  

 982          *
 983          * Parameters:  
 984          *  int32:  adcCounts   Reading from ADC.
 985          *
 986          * Return: 
 987          *  float:  Result in Volts
 988          *
 989          * Global variables:
 990          *  ADC_DelSig_1_CountsPerVolt:  used to convert to Volts.
 991          *  ADC_DelSig_1_Offset:  Used as the offset while converting ADC counts 
 992          *   to Volts.
 993          *
 994          * Reentrance: 
 995          *  Yes
 996          *
 997          *******************************************************************************/
 998          float ADC_DelSig_1_CountsTo_Volts( int32 adcCounts) 
 999          {
1000   1      
1001   1          float Volts = 0;
1002   1      
1003   1          /* Subtract ADC offset */
1004   1          adcCounts -= ADC_DelSig_1_Offset;
1005   1      
1006   1          Volts = (float)adcCounts / (float)ADC_DelSig_1_CountsPerVolt;   
1007   1          
1008   1          return( Volts );
1009   1      }
1010          
1011          
1012          /*******************************************************************************
1013          * Function Name: ADC_DelSig_1_CountsTo_uVolts
1014          ********************************************************************************
1015          *
1016          * Summary:
1017          *  This function converts ADC counts to uVolts
1018          *
1019          * Parameters:  
1020          *  int32:  adcCounts   Reading from ADC.
1021          *
1022          * Return: 
1023          *  int32:  Result in uVolts
1024          *
1025          * Global variables:
1026          *  ADC_DelSig_1_CountsPerVolt:  used to convert ADC counts to mVolts.
1027          *  ADC_DelSig_1_Offset:  Used as the offset while converting ADC counts 
1028          *   to mVolts.
1029          *
1030          * Theory: 
1031          * Care must be taken to not exceed the maximum value for a 32 bit signed
1032          * number in the conversion to uVolts and at the same time not loose 
1033          * resolution.
1034          *
1035          * uVolts = ((A * adcCounts) / ((int32)ADC_DelSig_1_CountsPerVolt/B)) ;   
1036          *
1037          *  Resolution       A           B
1038          *   8 - 11      1,000,000         1
1039          *  12 - 14        100,000        10
1040          *  15 - 17         10,000       100
1041          *  18 - 20           1000      1000
1042          *
1043          * Reentrance:
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 18  

1044          *  Yes
1045          *
1046          *******************************************************************************/
1047          int32 ADC_DelSig_1_CountsTo_uVolts( int32 adcCounts) 
1048          {
1049   1      
1050   1          int32 uVolts = 0;
1051   1          int32 A, B;
1052   1          
1053   1          if(ADC_DelSig_1_CFG1_RESOLUTION < 12)
1054   1          {
1055   2              A = 1000000;
1056   2              B = 1;
1057   2          }
1058   1          else if(ADC_DelSig_1_CFG1_RESOLUTION < 15)
1059   1          {
1060   2              A = 100000;
1061   2              B = 10;
1062   2          }
1063   1          else if(ADC_DelSig_1_CFG1_RESOLUTION < 18)
1064   1          {
1065   2              A = 10000;
1066   2              B = 100;
1067   2          }
1068   1          else
1069   1          {
1070   2              A = 1000;
1071   2              B = 1000;
1072   2          }
1073   1      
1074   1          /* Subtract ADC offset */
1075   1          adcCounts -= ADC_DelSig_1_Offset;
1076   1      
1077   1          uVolts = ((A * adcCounts) / ((int32)ADC_DelSig_1_CountsPerVolt/B)) ;   
1078   1        
1079   1          return( uVolts );
1080   1      }
1081          
1082          
1083          /*******************************************************************************
1084          * Function Name: ADC_DelSig_1_IRQ_Start(void)
1085          ********************************************************************************
1086          *
1087          * Summary:
1088          *  Set up the interrupt and enable it. The IRQ_Start() API is included to 
1089          *  support legacy code. The routine has been replaced by the library source 
1090          *  code for interrupts. IRQ_Start() should not be used in new designs.
1091          * 
1092          * Parameters:  
1093          *   void.
1094          *
1095          * Return:
1096          *   void.
1097          *
1098          * Reentrance:
1099          *  No
1100          *
1101          *******************************************************************************/
1102          void ADC_DelSig_1_IRQ_Start(void) 
1103          {
1104   1          /* For all we know the interrupt is active. */
1105   1          CyIntDisable(ADC_DelSig_1_IRQ__INTC_NUMBER );
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 19  

1106   1      
1107   1          /* Set the ISR to point to the ADC_DelSig_1_IRQ Interrupt. */
1108   1          CyIntSetVector(ADC_DelSig_1_IRQ__INTC_NUMBER, ADC_DelSig_1_ISR1);
1109   1      
1110   1          /* Set the priority. */
1111   1          CyIntSetPriority(ADC_DelSig_1_IRQ__INTC_NUMBER, ADC_DelSig_1_IRQ_INTC_PRIOR_NUMBER);
1112   1      
1113   1          /* Enable interrupt. */
1114   1          CyIntEnable(ADC_DelSig_1_IRQ__INTC_NUMBER);
1115   1      }
1116          
1117          
1118          /*******************************************************************************
1119          * Function Name: ADC_DelSig_1_InitConfig(uint8 config)
1120          ********************************************************************************
1121          *
1122          * Summary:
1123          *  Initializes all registers based on customizer settings
1124          *
1125          * Parameters:  
1126          *   void
1127          *
1128          * Return: 
1129          *  void
1130          *
1131          * Global variables:
1132          *  ADC_DelSig_1_initVar:  used to set the common registers in the beginning.
1133          *  ADC_DelSig_1_CountsPerVolt:  Used to set the default counts per volt.
1134          *
1135          * Reentrance: 
1136          *  No
1137          *
1138          *******************************************************************************/
1139          void ADC_DelSig_1_InitConfig(uint8 config)
1140          {
1141   1          ADC_DelSig_1_stopConversion = 0u;
1142   1          
1143   1          if(ADC_DelSig_1_initVar == 0u)
1144   1              {
1145   2                  ADC_DelSig_1_DSM_DEM0_REG    = ADC_DelSig_1_CFG1_DSM_DEM0;    
1146   2                  ADC_DelSig_1_DSM_DEM1_REG    = ADC_DelSig_1_CFG1_DSM_DEM1;    
1147   2                  ADC_DelSig_1_DSM_MISC_REG    = ADC_DelSig_1_CFG1_DSM_MISC;    
1148   2                  ADC_DelSig_1_DSM_CLK_REG    |= ADC_DelSig_1_CFG1_DSM_CLK; 
1149   2                  ADC_DelSig_1_DSM_REF1_REG    = ADC_DelSig_1_CFG1_DSM_REF1;    
1150   2              
1151   2                  ADC_DelSig_1_DSM_OUT0_REG    = ADC_DelSig_1_CFG1_DSM_OUT0;    
1152   2                  ADC_DelSig_1_DSM_OUT1_REG    = ADC_DelSig_1_CFG1_DSM_OUT1;   
1153   2              
1154   2                  ADC_DelSig_1_DSM_CR0_REG     = ADC_DelSig_1_CFG1_DSM_CR0;     
1155   2                  ADC_DelSig_1_DSM_CR1_REG     = ADC_DelSig_1_CFG1_DSM_CR1;     
1156   2                  ADC_DelSig_1_DSM_CR2_REG     = ADC_DelSig_1_CFG1_DSM_CR2;     
1157   2                  ADC_DelSig_1_DSM_CR3_REG     = ADC_DelSig_1_CFG1_DSM_CR3;     
1158   2                  ADC_DelSig_1_DSM_CR13_REG    = ADC_DelSig_1_CFG1_DSM_CR13;     
1159   2                  
1160   2                  ADC_DelSig_1_DEC_SR_REG      = ADC_DelSig_1_CFG1_DEC_SR;      
1161   2                  ADC_DelSig_1_DEC_COHER_REG   = ADC_DelSig_1_CFG1_DEC_COHER;   
1162   2              }
1163   1      
1164   1          if (config == 1u)
1165   1          {
1166   2              /* Default Config */   
1167   2              ADC_DelSig_1_DEC_CR_REG      = ADC_DelSig_1_CFG1_DEC_CR;      
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 20  

1168   2              ADC_DelSig_1_DEC_SHIFT1_REG  = ADC_DelSig_1_CFG1_DEC_SHIFT1;  
1169   2              ADC_DelSig_1_DEC_SHIFT2_REG  = ADC_DelSig_1_CFG1_DEC_SHIFT2;  
1170   2              ADC_DelSig_1_DEC_DR2_REG     = ADC_DelSig_1_CFG1_DEC_DR2;     
1171   2              ADC_DelSig_1_DEC_DR2H_REG    = ADC_DelSig_1_CFG1_DEC_DR2H;    
1172   2              ADC_DelSig_1_DEC_DR1_REG     = ADC_DelSig_1_CFG1_DEC_DR1;     
1173   2              ADC_DelSig_1_DEC_OCOR_REG    = ADC_DelSig_1_CFG1_DEC_OCOR;    
1174   2              ADC_DelSig_1_DEC_OCORM_REG   = ADC_DelSig_1_CFG1_DEC_OCORM;   
1175   2              ADC_DelSig_1_DEC_OCORH_REG   = ADC_DelSig_1_CFG1_DEC_OCORH;   
1176   2              
1177   2              ADC_DelSig_1_DSM_CR4_REG     = ADC_DelSig_1_CFG1_DSM_CR4;     
1178   2              ADC_DelSig_1_DSM_CR5_REG     = ADC_DelSig_1_CFG1_DSM_CR5;     
1179   2              ADC_DelSig_1_DSM_CR6_REG     = ADC_DelSig_1_CFG1_DSM_CR6;     
1180   2              ADC_DelSig_1_DSM_CR7_REG     = ADC_DelSig_1_CFG1_DSM_CR7;     
1181   2              ADC_DelSig_1_DSM_CR8_REG     = ADC_DelSig_1_CFG1_DSM_CR8;     
1182   2              ADC_DelSig_1_DSM_CR9_REG     = ADC_DelSig_1_CFG1_DSM_CR9;     
1183   2              ADC_DelSig_1_DSM_CR10_REG    = ADC_DelSig_1_CFG1_DSM_CR10;    
1184   2              ADC_DelSig_1_DSM_CR11_REG    = ADC_DelSig_1_CFG1_DSM_CR11;    
1185   2              ADC_DelSig_1_DSM_CR12_REG    = ADC_DelSig_1_CFG1_DSM_CR12;    
1186   2              ADC_DelSig_1_DSM_CR14_REG    = ADC_DelSig_1_CFG1_DSM_CR14;    
1187   2              ADC_DelSig_1_DSM_CR15_REG    = ADC_DelSig_1_CFG1_DSM_CR15;    
1188   2              ADC_DelSig_1_DSM_CR16_REG    = ADC_DelSig_1_CFG1_DSM_CR16;    
1189   2              ADC_DelSig_1_DSM_CR17_REG    = ADC_DelSig_1_CFG1_DSM_CR17;    
1190   2              ADC_DelSig_1_DSM_REF0_REG    = ADC_DelSig_1_CFG1_DSM_REF0;    
1191   2              ADC_DelSig_1_DSM_REF2_REG    = ADC_DelSig_1_CFG1_DSM_REF2;    
1192   2              ADC_DelSig_1_DSM_REF3_REG    = ADC_DelSig_1_CFG1_DSM_REF3;    
1193   2              
1194   2              ADC_DelSig_1_DSM_BUF0_REG    = ADC_DelSig_1_CFG1_DSM_BUF0;    
1195   2              ADC_DelSig_1_DSM_BUF1_REG    = ADC_DelSig_1_CFG1_DSM_BUF1;    
1196   2              ADC_DelSig_1_DSM_BUF2_REG    = ADC_DelSig_1_CFG1_DSM_BUF2;   
1197   2              ADC_DelSig_1_DSM_BUF3_REG    = ADC_DelSig_1_CFG1_DSM_BUF3;
1198   2              #if (CY_PSOC5_ES1)
                          ADC_DelSig_1_DSM_CLK_REG    |= ADC_DelSig_1_CFG1_DSM_CLK; 
                      #endif /* CY_PSOC5_ES1 */
1201   2              
1202   2              /* To select either Vssa or Vref to -ve input of DSM depending on 
1203   2                the input  range selected.
1204   2              */
1205   2              
1206   2              #if(ADC_DelSig_1_DEFAULT_INPUT_MODE)
1207   2                  #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
                              #if (ADC_DelSig_1_CFG1_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF)
                                  ADC_DelSig_1_AMux_Select(1);
                              #else
                                  ADC_DelSig_1_AMux_Select(0);
                              #endif /* ADC_DelSig_1_IR_VSSA_TO_2VREF) */
                          #elif (CY_PSOC3_ES2 || CY_PSOC5_ES1)
1214   2                      ADC_DelSig_1_AMux_Select(0);
1215   2                  #endif /* CY_PSOC3_ES3 || CY_PSOC5_ES2 */
1216   2              #endif /* ADC_DelSig_1_DEFAULT_INPUT_MODE */
1217   2              
1218   2              /* Set the Conversion stop if resolution is above 16 bit and conversion 
1219   2                 mode is Single sample */
1220   2              #if(ADC_DelSig_1_CFG1_RESOLUTION > 16 && \
1221   2                  ADC_DelSig_1_CFG1_CONV_MODE == ADC_DelSig_1_MODE_SINGLE_SAMPLE) 
                          ADC_DelSig_1_stopConversion = 1;
                      #endif /* Single sample with resolution above 16 bits. */
1224   2              ADC_DelSig_1_CountsPerVolt = (uint32)ADC_DelSig_1_CFG1_COUNTS_PER_VOLT;
1225   2              
1226   2              /* Start and set interrupt vector */
1227   2              CyIntSetPriority(ADC_DelSig_1_IRQ__INTC_NUMBER, ADC_DelSig_1_IRQ_INTC_PRIOR_NUMBER);
1228   2              CyIntSetVector(ADC_DelSig_1_IRQ__INTC_NUMBER, ADC_DelSig_1_ISR1 );
1229   2              CyIntEnable(ADC_DelSig_1_IRQ__INTC_NUMBER);
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 21  

1230   2          }
1231   1          
1232   1          #if(ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 1)
1233   1              if(config == 2u)
1234   1              {
1235   2                  /* Second Config */
1236   2                  ADC_DelSig_1_DEC_CR_REG      = ADC_DelSig_1_CFG2_DEC_CR;      
1237   2                  ADC_DelSig_1_DEC_SHIFT1_REG  = ADC_DelSig_1_CFG2_DEC_SHIFT1;  
1238   2                  ADC_DelSig_1_DEC_SHIFT2_REG  = ADC_DelSig_1_CFG2_DEC_SHIFT2;  
1239   2                  ADC_DelSig_1_DEC_DR2_REG     = ADC_DelSig_1_CFG2_DEC_DR2;     
1240   2                  ADC_DelSig_1_DEC_DR2H_REG    = ADC_DelSig_1_CFG2_DEC_DR2H;    
1241   2                  ADC_DelSig_1_DEC_DR1_REG     = ADC_DelSig_1_CFG2_DEC_DR1;     
1242   2                  ADC_DelSig_1_DEC_OCOR_REG    = ADC_DelSig_1_CFG2_DEC_OCOR;    
1243   2                  ADC_DelSig_1_DEC_OCORM_REG   = ADC_DelSig_1_CFG2_DEC_OCORM;   
1244   2                  ADC_DelSig_1_DEC_OCORH_REG   = ADC_DelSig_1_CFG2_DEC_OCORH;   
1245   2              
1246   2                  ADC_DelSig_1_DSM_CR4_REG     = ADC_DelSig_1_CFG2_DSM_CR4;     
1247   2                  ADC_DelSig_1_DSM_CR5_REG     = ADC_DelSig_1_CFG2_DSM_CR5;     
1248   2                  ADC_DelSig_1_DSM_CR6_REG     = ADC_DelSig_1_CFG2_DSM_CR6;     
1249   2                  ADC_DelSig_1_DSM_CR7_REG     = ADC_DelSig_1_CFG2_DSM_CR7;     
1250   2                  ADC_DelSig_1_DSM_CR8_REG     = ADC_DelSig_1_CFG2_DSM_CR8;     
1251   2                  ADC_DelSig_1_DSM_CR9_REG     = ADC_DelSig_1_CFG2_DSM_CR9;     
1252   2                  ADC_DelSig_1_DSM_CR10_REG    = ADC_DelSig_1_CFG2_DSM_CR10;    
1253   2                  ADC_DelSig_1_DSM_CR11_REG    = ADC_DelSig_1_CFG2_DSM_CR11;    
1254   2                  ADC_DelSig_1_DSM_CR12_REG    = ADC_DelSig_1_CFG2_DSM_CR12;    
1255   2                  ADC_DelSig_1_DSM_CR14_REG    = ADC_DelSig_1_CFG2_DSM_CR14;    
1256   2                  ADC_DelSig_1_DSM_CR15_REG    = ADC_DelSig_1_CFG2_DSM_CR15;    
1257   2                  ADC_DelSig_1_DSM_CR16_REG    = ADC_DelSig_1_CFG2_DSM_CR16;    
1258   2                  ADC_DelSig_1_DSM_CR17_REG    = ADC_DelSig_1_CFG2_DSM_CR17;    
1259   2                  ADC_DelSig_1_DSM_REF0_REG    = ADC_DelSig_1_CFG2_DSM_REF0;    
1260   2                  ADC_DelSig_1_DSM_REF2_REG    = ADC_DelSig_1_CFG2_DSM_REF2;    
1261   2                  ADC_DelSig_1_DSM_REF3_REG    = ADC_DelSig_1_CFG2_DSM_REF3;    
1262   2              
1263   2                  ADC_DelSig_1_DSM_BUF0_REG    = ADC_DelSig_1_CFG2_DSM_BUF0;    
1264   2                  ADC_DelSig_1_DSM_BUF1_REG    = ADC_DelSig_1_CFG2_DSM_BUF1;    
1265   2                  ADC_DelSig_1_DSM_BUF2_REG    = ADC_DelSig_1_CFG2_DSM_BUF2;    
1266   2                  ADC_DelSig_1_DSM_BUF3_REG    = ADC_DelSig_1_CFG2_DSM_BUF3; 
1267   2                  #if (CY_PSOC5_ES1)
                              ADC_DelSig_1_DSM_CLK_REG    |= ADC_DelSig_1_CFG1_DSM_CLK; 
                          #endif /* CY_PSOC5_ES1 */
1270   2                  
1271   2                  /* To select either Vssa or Vref to -ve input of DSM depending on 
1272   2                     the input range selected.
1273   2                  */
1274   2                  
1275   2                  #if(ADC_DelSig_1_DEFAULT_INPUT_MODE)
1276   2                      #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
                                  #if (ADC_DelSig_1_CFG2_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF)
                                      ADC_DelSig_1_AMux_Select(1);
                                  #else
                                      ADC_DelSig_1_AMux_Select(0);
                                  #endif /* ADC_DelSig_1_IR_VSSA_TO_2VREF) */
                              #elif (CY_PSOC3_ES2 || CY_PSOC5_ES1)
1283   2                          ADC_DelSig_1_AMux_Select(0);
1284   2                      #endif /* CY_PSOC3_ES3 || CY_PSOC5_ES2 */
1285   2                  #endif /* ADC_DelSig_1_DEFAULT_INPUT_MODE */
1286   2                  
1287   2                  /* Set the Conversion stop if resolution is above 16 bit and 
1288   2                     conversion mode is Single sample */
1289   2                  #if(ADC_DelSig_1_CFG2_RESOLUTION > 16 && \
1290   2                      ADC_DelSig_1_CFG2_CONVMODE == ADC_DelSig_1_MODE_SINGLE_SAMPLE) 
                              ADC_DelSig_1_stopConversion = 1;
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 22  

                          #endif /* Single sample with resolution above 16 bits. */
1293   2                  
1294   2                  ADC_DelSig_1_CountsPerVolt = (uint32)ADC_DelSig_1_CFG2_COUNTS_PER_VOLT;
1295   2                  
1296   2                  /* Start and set interrupt vector */
1297   2                  CyIntSetPriority(ADC_DelSig_1_IRQ__INTC_NUMBER, ADC_DelSig_1_IRQ_INTC_PRIOR_NUMBER);
1298   2                  CyIntSetVector(ADC_DelSig_1_IRQ__INTC_NUMBER, ADC_DelSig_1_ISR2 );
1299   2                  CyIntEnable(ADC_DelSig_1_IRQ__INTC_NUMBER);
1300   2              }
1301   1          #endif /* ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 1 */
1302   1      
1303   1          #if(ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 2)
1304   1              if(config == 3u)
1305   1              {
1306   2                  /* Third Config */
1307   2                  ADC_DelSig_1_DEC_CR_REG      = ADC_DelSig_1_CFG3_DEC_CR;      
1308   2                  ADC_DelSig_1_DEC_SHIFT1_REG  = ADC_DelSig_1_CFG3_DEC_SHIFT1;  
1309   2                  ADC_DelSig_1_DEC_SHIFT2_REG  = ADC_DelSig_1_CFG3_DEC_SHIFT2;  
1310   2                  ADC_DelSig_1_DEC_DR2_REG     = ADC_DelSig_1_CFG3_DEC_DR2;     
1311   2                  ADC_DelSig_1_DEC_DR2H_REG    = ADC_DelSig_1_CFG3_DEC_DR2H;    
1312   2                  ADC_DelSig_1_DEC_DR1_REG     = ADC_DelSig_1_CFG3_DEC_DR1;     
1313   2                  ADC_DelSig_1_DEC_OCOR_REG    = ADC_DelSig_1_CFG3_DEC_OCOR;    
1314   2                  ADC_DelSig_1_DEC_OCORM_REG   = ADC_DelSig_1_CFG3_DEC_OCORM;   
1315   2                  ADC_DelSig_1_DEC_OCORH_REG   = ADC_DelSig_1_CFG3_DEC_OCORH;   
1316   2               
1317   2                  ADC_DelSig_1_DSM_CR4_REG     = ADC_DelSig_1_CFG3_DSM_CR4;     
1318   2                  ADC_DelSig_1_DSM_CR5_REG     = ADC_DelSig_1_CFG3_DSM_CR5;     
1319   2                  ADC_DelSig_1_DSM_CR6_REG     = ADC_DelSig_1_CFG3_DSM_CR6;     
1320   2                  ADC_DelSig_1_DSM_CR7_REG     = ADC_DelSig_1_CFG3_DSM_CR7;     
1321   2                  ADC_DelSig_1_DSM_CR8_REG     = ADC_DelSig_1_CFG3_DSM_CR8;     
1322   2                  ADC_DelSig_1_DSM_CR9_REG     = ADC_DelSig_1_CFG3_DSM_CR9;     
1323   2                  ADC_DelSig_1_DSM_CR10_REG    = ADC_DelSig_1_CFG3_DSM_CR10;    
1324   2                  ADC_DelSig_1_DSM_CR11_REG    = ADC_DelSig_1_CFG3_DSM_CR11;    
1325   2                  ADC_DelSig_1_DSM_CR12_REG    = ADC_DelSig_1_CFG3_DSM_CR12;    
1326   2                  ADC_DelSig_1_DSM_CR14_REG    = ADC_DelSig_1_CFG3_DSM_CR14;    
1327   2                  ADC_DelSig_1_DSM_CR15_REG    = ADC_DelSig_1_CFG3_DSM_CR15;    
1328   2                  ADC_DelSig_1_DSM_CR16_REG    = ADC_DelSig_1_CFG3_DSM_CR16;    
1329   2                  ADC_DelSig_1_DSM_CR17_REG    = ADC_DelSig_1_CFG3_DSM_CR17;    
1330   2                  ADC_DelSig_1_DSM_REF0_REG    = ADC_DelSig_1_CFG3_DSM_REF0;    
1331   2                  ADC_DelSig_1_DSM_REF2_REG    = ADC_DelSig_1_CFG3_DSM_REF2;    
1332   2                  ADC_DelSig_1_DSM_REF3_REG    = ADC_DelSig_1_CFG3_DSM_REF3;    
1333   2              
1334   2                  ADC_DelSig_1_DSM_BUF0_REG    = ADC_DelSig_1_CFG3_DSM_BUF0;    
1335   2                  ADC_DelSig_1_DSM_BUF1_REG    = ADC_DelSig_1_CFG3_DSM_BUF1;    
1336   2                  ADC_DelSig_1_DSM_BUF2_REG    = ADC_DelSig_1_CFG3_DSM_BUF2;
1337   2                  ADC_DelSig_1_DSM_BUF3_REG    = ADC_DelSig_1_CFG3_DSM_BUF3;
1338   2                  #if (CY_PSOC5_ES1)
                              ADC_DelSig_1_DSM_CLK_REG    |= ADC_DelSig_1_CFG1_DSM_CLK; 
                          #endif /* CY_PSOC5_ES1 */
1341   2                  
1342   2                  /* To select either Vssa or Vref to -ve input of DSM depending on 
1343   2                     the input range selected.
1344   2                  */
1345   2                  
1346   2                  #if(ADC_DelSig_1_DEFAULT_INPUT_MODE)
1347   2                      #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
                                  #if (ADC_DelSig_1_CFG3_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF)
                                      ADC_DelSig_1_AMux_Select(1);
                                  #else
                                      ADC_DelSig_1_AMux_Select(0);
                                  #endif /* ADC_DelSig_1_IR_VSSA_TO_2VREF) */
                              #elif (CY_PSOC3_ES2 || CY_PSOC5_ES1)
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 23  

1354   2                          ADC_DelSig_1_AMux_Select(0);
1355   2                      #endif /* CY_PSOC3_ES3 || CY_PSOC5_ES2 */
1356   2                  #endif /* ADC_DelSig_1_DEFAULT_INPUT_MODE */
1357   2                             
1358   2                  /* Set the Conversion stop if resolution is above 16 bit and 
1359   2                     conversion  mode is Single sample */
1360   2                  #if(ADC_DelSig_1_CFG3_RESOLUTION > 16 && \
1361   2                      ADC_DelSig_1_CFG3_CONVMODE == ADC_DelSig_1_MODE_SINGLE_SAMPLE) 
                              ADC_DelSig_1_stopConversion = 1;
                          #endif /* Single sample with resolution above 16 bits */
1364   2                  
1365   2                  ADC_DelSig_1_CountsPerVolt = (uint32)ADC_DelSig_1_CFG3_COUNTS_PER_VOLT;
1366   2                  
1367   2                  /* Start and set interrupt vector */
1368   2                  CyIntSetPriority(ADC_DelSig_1_IRQ__INTC_NUMBER, ADC_DelSig_1_IRQ_INTC_PRIOR_NUMBER);
1369   2                  CyIntSetVector(ADC_DelSig_1_IRQ__INTC_NUMBER, ADC_DelSig_1_ISR3 );
1370   2                  CyIntEnable(ADC_DelSig_1_IRQ__INTC_NUMBER);
1371   2              }
1372   1          #endif /* ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 3 */
1373   1      
1374   1          #if(ADC_DelSig_1_DEFAULT_NUM_CONFIGS == 4)
1375   1              if (config == 4u)
1376   1              {
1377   2                  /* Fourth Config */
1378   2                  ADC_DelSig_1_DEC_CR_REG      = ADC_DelSig_1_CFG4_DEC_CR;      
1379   2                  ADC_DelSig_1_DEC_SHIFT1_REG  = ADC_DelSig_1_CFG4_DEC_SHIFT1;  
1380   2                  ADC_DelSig_1_DEC_SHIFT2_REG  = ADC_DelSig_1_CFG4_DEC_SHIFT2;  
1381   2                  ADC_DelSig_1_DEC_DR2_REG     = ADC_DelSig_1_CFG4_DEC_DR2;     
1382   2                  ADC_DelSig_1_DEC_DR2H_REG    = ADC_DelSig_1_CFG4_DEC_DR2H;    
1383   2                  ADC_DelSig_1_DEC_DR1_REG     = ADC_DelSig_1_CFG4_DEC_DR1;     
1384   2                  ADC_DelSig_1_DEC_OCOR_REG    = ADC_DelSig_1_CFG4_DEC_OCOR;    
1385   2                  ADC_DelSig_1_DEC_OCORM_REG   = ADC_DelSig_1_CFG4_DEC_OCORM;   
1386   2                  ADC_DelSig_1_DEC_OCORH_REG   = ADC_DelSig_1_CFG4_DEC_OCORH;   
1387   2      
1388   2                  ADC_DelSig_1_DSM_CR4_REG     = ADC_DelSig_1_CFG4_DSM_CR4;     
1389   2                  ADC_DelSig_1_DSM_CR5_REG     = ADC_DelSig_1_CFG4_DSM_CR5;     
1390   2                  ADC_DelSig_1_DSM_CR6_REG     = ADC_DelSig_1_CFG4_DSM_CR6;     
1391   2                  ADC_DelSig_1_DSM_CR7_REG     = ADC_DelSig_1_CFG4_DSM_CR7;     
1392   2                  ADC_DelSig_1_DSM_CR8_REG     = ADC_DelSig_1_CFG4_DSM_CR8;     
1393   2                  ADC_DelSig_1_DSM_CR9_REG     = ADC_DelSig_1_CFG4_DSM_CR9;     
1394   2                  ADC_DelSig_1_DSM_CR10_REG    = ADC_DelSig_1_CFG4_DSM_CR10;    
1395   2                  ADC_DelSig_1_DSM_CR11_REG    = ADC_DelSig_1_CFG4_DSM_CR11;    
1396   2                  ADC_DelSig_1_DSM_CR12_REG    = ADC_DelSig_1_CFG4_DSM_CR12;    
1397   2                  ADC_DelSig_1_DSM_CR14_REG    = ADC_DelSig_1_CFG4_DSM_CR14;    
1398   2                  ADC_DelSig_1_DSM_CR15_REG    = ADC_DelSig_1_CFG4_DSM_CR15;    
1399   2                  ADC_DelSig_1_DSM_CR16_REG    = ADC_DelSig_1_CFG4_DSM_CR16;    
1400   2                  ADC_DelSig_1_DSM_CR17_REG    = ADC_DelSig_1_CFG4_DSM_CR17;    
1401   2                  ADC_DelSig_1_DSM_REF0_REG    = ADC_DelSig_1_CFG4_DSM_REF0;    
1402   2                  ADC_DelSig_1_DSM_REF2_REG    = ADC_DelSig_1_CFG4_DSM_REF2;    
1403   2                  ADC_DelSig_1_DSM_REF3_REG    = ADC_DelSig_1_CFG4_DSM_REF3;    
1404   2              
1405   2                  ADC_DelSig_1_DSM_BUF0_REG    = ADC_DelSig_1_CFG4_DSM_BUF0;    
1406   2                  ADC_DelSig_1_DSM_BUF1_REG    = ADC_DelSig_1_CFG4_DSM_BUF1;    
1407   2                  ADC_DelSig_1_DSM_BUF2_REG    = ADC_DelSig_1_CFG4_DSM_BUF2;
1408   2                  ADC_DelSig_1_DSM_BUF3_REG    = ADC_DelSig_1_CFG4_DSM_BUF3;
1409   2                  #if (CY_PSOC5_ES1)
                              ADC_DelSig_1_DSM_CLK_REG    |= ADC_DelSig_1_CFG1_DSM_CLK; 
                          #endif /* CY_PSOC5_ES1 */
1412   2                  
1413   2                  /* To select either Vssa or Vref to -ve input of DSM depending on 
1414   2                     the input range selected.
1415   2                  */
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 24  

1416   2                  
1417   2                  #if(ADC_DelSig_1_DEFAULT_INPUT_MODE)
1418   2                      #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
                                  #if (ADC_DelSig_1_CFG4_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF)
                                      ADC_DelSig_1_AMux_Select(1);
                                  #else
                                      ADC_DelSig_1_AMux_Select(0);
                                  #endif /* ADC_DelSig_1_IR_VSSA_TO_2VREF) */
                              #elif (CY_PSOC3_ES2 || CY_PSOC5_ES1)
1425   2                          ADC_DelSig_1_AMux_Select(0);
1426   2                      #endif /* CY_PSOC3_ES3 || CY_PSOC5_ES2 */
1427   2                  #endif /* ADC_DelSig_1_DEFAULT_INPUT_MODE */
1428   2                             
1429   2                  /* Set the Conversion stop if resolution is above 16 bit and 
1430   2                     conversion mode is Single sample */
1431   2                  #if(ADC_DelSig_1_CFG4_RESOLUTION > 16 && \
1432   2                      ADC_DelSig_1_CFG4_CONVMODE == ADC_DelSig_1_MODE_SINGLE_SAMPLE) 
                              ADC_DelSig_1_stopConversion = 1;
                          #endif /* Single sample with resolution above 16 bits */
1435   2                  
1436   2                  ADC_DelSig_1_CountsPerVolt = (uint32)ADC_DelSig_1_CFG4_COUNTS_PER_VOLT;
1437   2      
1438   2                  /* Start and set interrupt vector */
1439   2                  CyIntSetPriority(ADC_DelSig_1_IRQ__INTC_NUMBER, ADC_DelSig_1_IRQ_INTC_PRIOR_NUMBER);
1440   2                  CyIntSetVector(ADC_DelSig_1_IRQ__INTC_NUMBER, ADC_DelSig_1_ISR4 );
1441   2                  CyIntEnable(ADC_DelSig_1_IRQ__INTC_NUMBER);
1442   2              }
1443   1          #endif /* ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 4 */
1444   1      }
1445          
1446          
1447          /*******************************************************************************
1448          * Function Name: ADC_DelSig_1_RoundValue(uint32 busClockFreq, 
1449          *                                            uint32 clockFreq)
1450          ********************************************************************************
1451          *
1452          * Summary:
1453          *  Function to round an integer value.
1454          *
1455          * Parameters:  
1456          *  busClockFreq:  Frequency of the bus clock.
1457          *  clockFreq:  Frequency of the component clock.
1458          *
1459          * Return: 
1460          *  uint16: rounded integer value.
1461          *
1462          * Reentrance: 
1463          *  Yes
1464          *
1465          *******************************************************************************/
1466          uint16 ADC_DelSig_1_RoundValue(uint32 busClockFreq, uint32 clockFreq) \
1467                                            
1468          {
1469   1          uint16 divider1, divider2;
1470   1          
1471   1          divider1 = ((busClockFreq * 10) / clockFreq);
1472   1          divider2 = (busClockFreq / clockFreq);
1473   1          if ( divider1 - (divider2 * 10) >= 5)
1474   1          {
1475   2              divider2 += 1;
1476   2          }
1477   1          return divider2;
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 25  

1478   1      }
1479                   
1480          
1481          /*******************************************************************************
1482          * Function Name: ADC_DelSig_1_SelectCofiguration(uint8 config, 
1483          *                                                    uint8 restart)
1484          ********************************************************************************
1485          *
1486          * Summary:
1487          *  Selects the user defined configuration. This API first stops the current ADC
1488          *  and then initializes the registers with the default values for that config. 
1489          *  This also performs calibration by writing GCOR registers with trim values 
1490          *  stored in the flash.
1491          *
1492          * Parameters:  
1493          *  config:  configuration user wants to select.
1494          *
1495          * Return: 
1496          *  void
1497          *
1498          * Reentrance: 
1499          *  Yes
1500          *
1501          *******************************************************************************/
1502          void ADC_DelSig_1_SelectConfiguration(uint8 config, uint8 restart) \
1503                                                        
1504          {
1505   1          uint8 inputRange = 0, resolution = 16;
1506   1          uint16 idealGain = 0, clockDivider = 1;    
1507   1          uint16 idealOddGain = 0;
1508   1          
1509   1          /* Check whether the config is valid or not */
1510   1          if( config <= ADC_DelSig_1_DEFAULT_NUM_CONFIGS)
1511   1          {   
1512   2             /* Set the flag to ensure start() API dont override the config
1513   2                 selected if ADC is not already started */
1514   2              if(ADC_DelSig_1_initVar == 0u)
1515   2              {
1516   3                  ADC_DelSig_1_started = 1u;
1517   3              }
1518   2             
1519   2              /* Stop the ADC  */
1520   2              ADC_DelSig_1_Stop();
1521   2              
1522   2              #if (CY_PSOC5_ES1)
                          /* Set the structure field which checks whether or not to
                             restore the power registers */
                          ADC_DelSig_1_powerModeBackup.bypassRestore = ADC_DelSig_1_BYPASS_ENABLED;
                      #endif /* CY_PSOC5_ES1 */
1527   2              
1528   2              /* Set the  ADC registers based on the configuration */
1529   2              ADC_DelSig_1_InitConfig(config);
1530   2              
1531   2              /* Trim value calculation */
1532   2              if(config == 1u)
1533   2              {
1534   3                  inputRange = ADC_DelSig_1_CFG1_RANGE;
1535   3                  resolution = ADC_DelSig_1_CFG1_RESOLUTION;
1536   3                  idealGain = ADC_DelSig_1_CFG1_IDEAL_DEC_GAIN;
1537   3                  idealOddGain = ADC_DelSig_1_CFG1_IDEAL_ODDDEC_GAIN;
1538   3                  clockDivider = ADC_DelSig_1_RoundValue((uint32)BCLK__BUS_CLK__HZ,
1539   3                                                             (uint32)ADC_DelSig_1_CFG1_CLOCK_FREQ);
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 26  

1540   3              }
1541   2      
1542   2              #if (ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 1)
1543   2                  if(config == 2u)
1544   2                  {
1545   3                      inputRange = ADC_DelSig_1_CFG2_INPUT_RANGE;
1546   3                      resolution = ADC_DelSig_1_CFG2_RESOLUTION;
1547   3                      idealGain = ADC_DelSig_1_CFG2_IDEAL_DEC_GAIN;
1548   3                      idealOddGain = ADC_DelSig_1_CFG2_IDEAL_ODDDEC_GAIN;
1549   3                      clockDivider = ADC_DelSig_1_RoundValue((uint32)BCLK__BUS_CLK__HZ,
1550   3                                                                  (uint32)ADC_DelSig_1_CFG2_CLOCK_FREQ);
1551   3                  }
1552   2              #endif /* ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 1 */
1553   2      
1554   2              #if(ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 2)
1555   2                  if(config == 3u)
1556   2                  {
1557   3                      inputRange = ADC_DelSig_1_CFG3_INPUT_RANGE;
1558   3                      resolution = ADC_DelSig_1_CFG3_RESOLUTION;
1559   3                      idealGain = ADC_DelSig_1_CFG3_IDEAL_DEC_GAIN;
1560   3                      idealOddGain = ADC_DelSig_1_CFG3_IDEAL_ODDDEC_GAIN;
1561   3                      clockDivider = ADC_DelSig_1_RoundValue((uint32)BCLK__BUS_CLK__HZ,
1562   3                                                                  (uint32)ADC_DelSig_1_CFG3_CLOCK_FREQ);
1563   3                  }
1564   2              #endif /* ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 2 */
1565   2      
1566   2              #if (ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 3)
1567   2                  if(config == 4u)
1568   2                  {
1569   3                      inputRange = ADC_DelSig_1_CFG4_INPUT_RANGE;
1570   3                      resolution = ADC_DelSig_1_CFG4_RESOLUTION;
1571   3                      idealGain = ADC_DelSig_1_CFG4_IDEAL_DEC_GAIN;
1572   3                      idealOddGain = ADC_DelSig_1_CFG4_IDEAL_ODDDEC_GAIN;
1573   3                      clockDivider = ADC_DelSig_1_RoundValue((uint32)BCLK__BUS_CLK__HZ,  
1574   3                                                                  (uint32)ADC_DelSig_1_CFG4_CLOCK_FREQ);
1575   3                  }
1576   2              #endif /* ADC_DelSig_1_DEFAULT_NUM_CONFIGS > 3 */
1577   2              
1578   2              clockDivider = clockDivider - 1;
1579   2              /* Set the proper divider for the internal clock */
1580   2              #if(ADC_DelSig_1_DEFAULT_INTERNAL_CLK)
1581   2                  ADC_DelSig_1_theACLK_SetDividerRegister(clockDivider, 1);
1582   2              #endif /* ADC_DelSig_1_DEFAULT_INTERNAL_CLK */
1583   2              
1584   2              /* Compensate the gain */
1585   2              ADC_DelSig_1_GainCompensation(inputRange, idealGain, idealOddGain, resolution);
1586   2              
1587   2              if(restart == 1u)
1588   2              {        
1589   3                  /* Restart the ADC */
1590   3                  ADC_DelSig_1_Start();
1591   3                  
1592   3                  /* Code to disable the REFBUF0 if reference chosen is External ref */
1593   3                  #if (((ADC_DelSig_1_CFG2_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) || \
1594   3                       (ADC_DelSig_1_CFG2_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32)) || \
1595   3                       ((ADC_DelSig_1_CFG3_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) || \
1596   3                       (ADC_DelSig_1_CFG3_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32)) || \
1597   3                       ((ADC_DelSig_1_CFG4_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) || \
1598   3                       (ADC_DelSig_1_CFG4_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32)))
                              if (((config == 2) && 
                                  ((ADC_DelSig_1_CFG2_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) ||
                                  (ADC_DelSig_1_CFG2_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32))) ||
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 27  

                                  ((config == 3) && 
                                  ((ADC_DelSig_1_CFG3_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) ||
                                  (ADC_DelSig_1_CFG3_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32))) ||
                                  ((config == 4) && 
                                  ((ADC_DelSig_1_CFG4_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P03) ||
                                  (ADC_DelSig_1_CFG4_REFERENCE == ADC_DelSig_1_EXT_REF_ON_P32))))
                              {
                                  /* Disable PRES, Enable power to VCMBUF0, REFBUF0 and 
                                     REFBUF1, enable PRES */
                                  #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
                                      ADC_DelSig_1_RESET_CR4_REG |= ADC_DelSig_1_IGNORE_PRESA1;
                                      ADC_DelSig_1_RESET_CR5_REG |= ADC_DelSig_1_IGNORE_PRESA2;
                                  #elif (CY_PSOC5_ES1 || CY_PSOC3_ES2)
                                      ADC_DelSig_1_RESET_CR1_REG |= ADC_DelSig_1_DIS_PRES1;
                                      ADC_DelSig_1_RESET_CR3_REG |= ADC_DelSig_1_DIS_PRES2;
                                  #endif /* CY_PSOC5_ES1 || CY_PSOC3_ES2 */
                      
                                  /* Disable the REFBUF0 */
                                  ADC_DelSig_1_DSM_CR17_REG &= ~ADC_DelSig_1_DSM_EN_BUF_VREF;
                                  
                                  /* Wait for 3 microseconds */
                                  CyDelayUs(3);
                      
                                  #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
                                      ADC_DelSig_1_RESET_CR4_REG &= ~ADC_DelSig_1_IGNORE_PRESA1;
                                      ADC_DelSig_1_RESET_CR5_REG &= ~ADC_DelSig_1_IGNORE_PRESA2;
                          
                                      ADC_DelSig_1_RESET_CR3_REG = ADC_DelSig_1_EN_PRESA;
                                  #elif (CY_PSOC5_ES1 || CY_PSOC3_ES2)
                                      ADC_DelSig_1_RESET_CR1_REG &= ~ADC_DelSig_1_DIS_PRES1;
                                      ADC_DelSig_1_RESET_CR3_REG &= ~ADC_DelSig_1_DIS_PRES2;
                                  #endif /* CY_PSOC5_ES1 || CY_PSOC3_ES2 */
                              }
                          #endif /* */
1636   3                  
1637   3                  #if ((CY_PSOC3_ES3 || CY_PSOC5_ES2) && \
1638   3                       ((ADC_DelSig_1_CFG2_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF) || \
1639   3                        (ADC_DelSig_1_CFG3_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF) || \
1640   3                        (ADC_DelSig_1_CFG4_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF)))
                              if(((config == 2) && 
                                  (ADC_DelSig_1_CFG2_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF) && 
                                  ((ADC_DelSig_1_CFG2_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P03) && 
                                   (ADC_DelSig_1_CFG2_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P32))) ||
                                   ((config == 3) && 
                                    (ADC_DelSig_1_CFG3_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF) && 
                                   ((ADC_DelSig_1_CFG3_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P03) && 
                                   (ADC_DelSig_1_CFG3_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P32))) ||
                                   ((config == 4) && 
                                    (ADC_DelSig_1_CFG4_INPUT_RANGE == ADC_DelSig_1_IR_VSSA_TO_2VREF) && 
                                   ((ADC_DelSig_1_CFG4_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P03) && 
                                   (ADC_DelSig_1_CFG4_REFERENCE != ADC_DelSig_1_EXT_REF_ON_P32))))
                              {
                                  /* Disable PRES, Enable power to VCMBUF0, REFBUF0 and 
                                     REFBUF1, enable PRES */
                                  #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
                                      ADC_DelSig_1_RESET_CR4_REG |= ADC_DelSig_1_IGNORE_PRESA1;
                                      ADC_DelSig_1_RESET_CR5_REG |= ADC_DelSig_1_IGNORE_PRESA2;
                                  #elif (CY_PSOC5_ES1 || CY_PSOC3_ES2)
                                      ADC_DelSig_1_RESET_CR1_REG |= ADC_DelSig_1_DIS_PRES1;
                                      ADC_DelSig_1_RESET_CR3_REG |= ADC_DelSig_1_DIS_PRES2;
                                  #endif /* CY_PSOC5_ES1 || CY_PSOC3_ES2 */
                      
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 28  

                                  /* Enable the REFBUF1 */
                                  ADC_DelSig_1_DSM_REF0_REG |= ADC_DelSig_1_DSM_EN_BUF_VREF_INN;
                                  
                                  /* Wait for 3 microseconds */
                                  CyDelayUs(3);
                      
                                  #if (CY_PSOC3_ES3 || CY_PSOC5_ES2)
                                      ADC_DelSig_1_RESET_CR4_REG &= ~ADC_DelSig_1_IGNORE_PRESA1;
                                      ADC_DelSig_1_RESET_CR5_REG &= ~ADC_DelSig_1_IGNORE_PRESA2;
                          
                                      ADC_DelSig_1_RESET_CR3_REG = ADC_DelSig_1_EN_PRESA;
                                  #elif (CY_PSOC5_ES1 || CY_PSOC3_ES2)
                                      ADC_DelSig_1_RESET_CR1_REG &= ~ADC_DelSig_1_DIS_PRES1;
                                      ADC_DelSig_1_RESET_CR3_REG &= ~ADC_DelSig_1_DIS_PRES2;
                                  #endif /* CY_PSOC5_ES1 || CY_PSOC3_ES2 */
                              }
                          #endif /* (CY_PSOC3_ES3 || CY_PSOC5_ES2) */
1681   3              
1682   3                  /* Restart the ADC conversion */
1683   3                  ADC_DelSig_1_StartConvert();
1684   3              }
1685   2          }
1686   1      }     
1687          
1688          
1689          /*******************************************************************************
1690          * Function Name: ADC_DelSig_1_GainCompensation(uint8, uint16, uint16, uint8)
1691          ********************************************************************************
1692          *
1693          * Summary:
1694          *  This API calculates the trim value and then loads this to GCOR register.
1695          *
1696          * Parameters:  
1697          *  inputRange:  input range for which trim value is to be calculated.
1698          *  IdealDecGain:  Ideal Decimator gain for the selected resolution and 
1699          *                 conversion  mode.
1700          *  IdealOddDecGain:  Ideal odd decimation gain for the selected resolution and 
1701                               conversion mode.
1702          *  resolution:  Resolution to select the proper flash location for trim value.
1703          *
1704          * Return: 
1705          *  void
1706          *
1707          * Reentrance: 
1708          *  Yes
1709          *
1710          *******************************************************************************/
1711          void ADC_DelSig_1_GainCompensation(uint8 inputRange, uint16 IdealDecGain, uint16 IdealOddDecGain,  \
1712                                                 uint8 resolution) 
1713          {
1714   1          int8 flash;
1715   1          int16 Normalised;
1716   1          uint16 GcorValue;
1717   1          uint32 GcorTmp;
1718   1          
1719   1          switch(inputRange)
1720   1          {         
1721   2              case ADC_DelSig_1_IR_VNEG_VREF_DIFF:
1722   2              
1723   2              /* Normalize the flash Value */
1724   2              if(resolution > 15)
1725   2              {
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 29  

1726   3                  flash = ADC_DelSig_1_DEC_TRIM_VREF_DIFF_16_20; 
1727   3              }    
1728   2              else
1729   2              {
1730   3                  flash = ADC_DelSig_1_DEC_TRIM_VREF_DIFF_8_15;
1731   3              }        
1732   2              break;
1733   2              
1734   2              case ADC_DelSig_1_IR_VNEG_VREF_2_DIFF:
1735   2              
1736   2              /* Normalize the flash Value */
1737   2              if(resolution > 15)
1738   2              {
1739   3                  flash = ADC_DelSig_1_DEC_TRIM_VREF_2_DIFF_16_20;
1740   3              }    
1741   2              else
1742   2              {
1743   3                  flash = ADC_DelSig_1_DEC_TRIM_VREF_2_DIFF_8_15;
1744   3              }    
1745   2              break;
1746   2              
1747   2              case ADC_DelSig_1_IR_VNEG_VREF_4_DIFF:
1748   2              
1749   2              /* Normalize the flash Value */
1750   2              if(resolution > 15)
1751   2              {
1752   3                  flash = ADC_DelSig_1_DEC_TRIM_VREF_4_DIFF_16_20;
1753   3              }    
1754   2              else
1755   2              {
1756   3                  flash = ADC_DelSig_1_DEC_TRIM_VREF_4_DIFF_8_15;
1757   3              }    
1758   2              break;
1759   2              
1760   2              case ADC_DelSig_1_IR_VNEG_VREF_16_DIFF:
1761   2              
1762   2              /* Normalize the flash Value */
1763   2              if(resolution > 15)
1764   2              {
1765   3                  flash = ADC_DelSig_1_DEC_TRIM_VREF_16_DIFF_16_20;
1766   3              }    
1767   2              else
1768   2              {
1769   3                  flash = ADC_DelSig_1_DEC_TRIM_VREF_16_DIFF_8_15;
1770   3              }    
1771   2              break;
1772   2              
1773   2              default:
1774   2                  flash = 0;
1775   2              break;
1776   2          }    
1777   1          if(inputRange == ADC_DelSig_1_IR_VSSA_TO_VREF || inputRange == ADC_DelSig_1_IR_VSSA_TO_2VREF || 
1778   1             inputRange == ADC_DelSig_1_IR_VSSA_TO_VDDA || inputRange == ADC_DelSig_1_IR_VSSA_TO_6VREF || 
1779   1             inputRange == ADC_DelSig_1_IR_VNEG_2VREF_DIFF || inputRange == ADC_DelSig_1_IR_VNEG_6VREF_DIFF ||
1780   1             inputRange == ADC_DelSig_1_IR_VNEG_VREF_8_DIFF)
1781   1          {
1782   2              Normalised  = 0;
1783   2          }
1784   1          else
1785   1          {
1786   2              Normalised  = ((int16)flash) * 32;
1787   2          }
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 30  

1788   1                          
1789   1          /* Add two values */
1790   1          GcorValue = IdealDecGain + Normalised;  
1791   1          GcorTmp = (uint32)GcorValue * (uint32)IdealOddDecGain;
1792   1          GcorValue = (uint16)(GcorTmp / ADC_DelSig_1_IDEAL_GAIN_CONST);
1793   1              
1794   1          if (resolution < 14)
1795   1          {
1796   2              GcorValue = (GcorValue >> (15 - (resolution + 1)));
1797   2              ADC_DelSig_1_DEC_GVAL_REG = (resolution + 1);
1798   2          }
1799   1          else
1800   1          {
1801   2              /* Use all 16 bits */
1802   2              ADC_DelSig_1_DEC_GVAL_REG = 15u;  
1803   2          }
1804   1            
1805   1          /* Load the gain correction register */    
1806   1          ADC_DelSig_1_DEC_GCOR_REG  = (uint8)GcorValue;
1807   1          ADC_DelSig_1_DEC_GCORH_REG = (uint8)(GcorValue >> 8);    
1808   1          
1809   1          /* Workaround for 0 to 2*Vref mode with PSoC3 ES2 and PSoC5 ES1 siliocn */
1810   1          #if( CY_PSOC3_ES2 || CY_PSOC5_ES1) 
1811   1              if( inputRange == ADC_DelSig_1_IR_VSSA_TO_2VREF)
1812   1              {
1813   2                  ADC_DelSig_1_DEC_GCOR_REG = 0x00u;
1814   2                  ADC_DelSig_1_DEC_GCORH_REG = 0x00u;
1815   2                  ADC_DelSig_1_DEC_GVAL_REG = 0x00u;
1816   2              }
1817   1          #endif /* CY_PSOC3_ES2 || CY_PSOC5_ES1 */
1818   1          
1819   1      }        
1820          
1821          
1822          /* [] END OF FILE */
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 31  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ADC_DelSig_1_Init (BEGIN)
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
                                           ; SOURCE LINE # 98
0000 7F01              MOV     R7,#01H
0002 120000      R     LCALL   _ADC_DelSig_1_InitConfig
                                           ; SOURCE LINE # 102
0005 7F10              MOV     R7,#010H
0007 120000      E     LCALL   _ADC_DelSig_1_theACLK_SetModeRegister
                                           ; SOURCE LINE # 107
000A 7F10              MOV     R7,#010H
000C 120000      E     LCALL   _ADC_DelSig_1_Ext_CP_Clk_SetModeRegister
                                           ; SOURCE LINE # 111
000F 900000      R     MOV     DPTR,#?_ADC_DelSig_1_GainCompensation?BYTE+05H
0012 740D              MOV     A,#0DH
0014 F0                MOVX    @DPTR,A
0015 7B0B              MOV     R3,#0BH
0017 7A74              MOV     R2,#074H
0019 7D00              MOV     R5,#00H
001B 7C90              MOV     R4,#090H
001D 7F02              MOV     R7,#02H
001F 120000      R     LCALL   _ADC_DelSig_1_GainCompensation
                                           ; SOURCE LINE # 115
0022 22                RET     
             ; FUNCTION ADC_DelSig_1_Init (END)

             ; FUNCTION ADC_DelSig_1_Enable (BEGIN)
                                           ; SOURCE LINE # 136
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 150
0000 9043AA            MOV     DPTR,#043AAH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 151
000B 9043C5            MOV     DPTR,#043C5H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4401              ORL     A,#01H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
0016 9043BA            MOV     DPTR,#043BAH
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4401              ORL     A,#01H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 165
0021 9046F5            MOV     DPTR,#046F5H
0024 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 32  

0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 4410              ORL     A,#010H
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 166
002C 9046F7            MOV     DPTR,#046F7H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 4408              ORL     A,#08H
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 169
0037 905891            MOV     DPTR,#05891H
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 4403              ORL     A,#03H
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
0042 7F03              MOV     R7,#03H
0044 7E00              MOV     R6,#00H
0046 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 190
0049 9046F5            MOV     DPTR,#046F5H
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 54EF              ANL     A,#0EFH
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 191
0054 9046F7            MOV     DPTR,#046F7H
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 54F7              ANL     A,#0F7H
005C FF                MOV     R7,A
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
005F 905877            MOV     DPTR,#05877H
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
0064 EF                MOV     A,R7
0065 4406              ORL     A,#06H
0067 FF                MOV     R7,A
0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
006A 9043A1            MOV     DPTR,#043A1H
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 4401              ORL     A,#01H
0072 FF                MOV     R7,A
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 33  

0073 EF                MOV     A,R7
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 200
0075 9043B1            MOV     DPTR,#043B1H
0078 E0                MOVX    A,@DPTR
0079 FF                MOV     R7,A
007A EF                MOV     A,R7
007B 4401              ORL     A,#01H
007D FF                MOV     R7,A
007E EF                MOV     A,R7
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 202
0080 120000      E     LCALL   ADC_DelSig_1_theACLK_Start
                                           ; SOURCE LINE # 207
0083 9043A2            MOV     DPTR,#043A2H
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 EF                MOV     A,R7
0089 4404              ORL     A,#04H
008B FF                MOV     R7,A
008C EF                MOV     A,R7
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 208
008E 9043B2            MOV     DPTR,#043B2H
0091 E0                MOVX    A,@DPTR
0092 FF                MOV     R7,A
0093 EF                MOV     A,R7
0094 4404              ORL     A,#04H
0096 FF                MOV     R7,A
0097 EF                MOV     A,R7
0098 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 210
0099 120000      E     LCALL   ADC_DelSig_1_Ext_CP_Clk_Start
                                           ; SOURCE LINE # 213
009C 22                RET     
             ; FUNCTION ADC_DelSig_1_Enable (END)

             ; FUNCTION ADC_DelSig_1_Start (BEGIN)
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 359
                                           ; SOURCE LINE # 360
0000 900000      R     MOV     DPTR,#ADC_DelSig_1_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7011              JNZ     ?C0003
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
0008 900000      R     MOV     DPTR,#ADC_DelSig_1_started
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 7003              JNZ     ?C0004
                                           ; SOURCE LINE # 363
                                           ; SOURCE LINE # 364
0010 120000      R     LCALL   ADC_DelSig_1_Init
                                           ; SOURCE LINE # 365
0013         ?C0004:
                                           ; SOURCE LINE # 366
0013 900000      R     MOV     DPTR,#ADC_DelSig_1_initVar
0016 7401              MOV     A,#01H
0018 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 34  

                                           ; SOURCE LINE # 367
0019         ?C0003:
                                           ; SOURCE LINE # 370
0019 120000      R     LCALL   ADC_DelSig_1_Enable
                                           ; SOURCE LINE # 371
001C 22                RET     
             ; FUNCTION ADC_DelSig_1_Start (END)

             ; FUNCTION ADC_DelSig_1_Stop (BEGIN)
                                           ; SOURCE LINE # 391
                                           ; SOURCE LINE # 392
                                           ; SOURCE LINE # 394
0000 904E00            MOV     DPTR,#04E00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 395
000B 904E01            MOV     DPTR,#04E01H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 4404              ORL     A,#04H
0013 FF                MOV     R7,A
0014 EF                MOV     A,R7
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 403
0016 9046F5            MOV     DPTR,#046F5H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4410              ORL     A,#010H
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 404
0021 9046F7            MOV     DPTR,#046F7H
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 EF                MOV     A,R7
0027 4408              ORL     A,#08H
0029 FF                MOV     R7,A
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
002C 905891            MOV     DPTR,#05891H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54FC              ANL     A,#0FCH
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 408
0037 905892            MOV     DPTR,#05892H
003A E0                MOVX    A,@DPTR
003B FF                MOV     R7,A
003C EF                MOV     A,R7
003D 54F7              ANL     A,#0F7H
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 35  

003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 411
0042 7F03              MOV     R7,#03H
0044 7E00              MOV     R6,#00H
0046 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 420
0049 9046F5            MOV     DPTR,#046F5H
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 54EF              ANL     A,#0EFH
0051 FF                MOV     R7,A
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 421
0054 9046F7            MOV     DPTR,#046F7H
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 54F7              ANL     A,#0F7H
005C FF                MOV     R7,A
005D EF                MOV     A,R7
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 436
005F 9043C5            MOV     DPTR,#043C5H
0062 E0                MOVX    A,@DPTR
0063 FF                MOV     R7,A
0064 EF                MOV     A,R7
0065 54FE              ANL     A,#0FEH
0067 FF                MOV     R7,A
0068 EF                MOV     A,R7
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
006A 9043AA            MOV     DPTR,#043AAH
006D E0                MOVX    A,@DPTR
006E FF                MOV     R7,A
006F EF                MOV     A,R7
0070 54FE              ANL     A,#0FEH
0072 FF                MOV     R7,A
0073 EF                MOV     A,R7
0074 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 443
0075 9043BA            MOV     DPTR,#043BAH
0078 E0                MOVX    A,@DPTR
0079 FF                MOV     R7,A
007A EF                MOV     A,R7
007B 54FE              ANL     A,#0FEH
007D FF                MOV     R7,A
007E EF                MOV     A,R7
007F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
0080 905877            MOV     DPTR,#05877H
0083 E0                MOVX    A,@DPTR
0084 FF                MOV     R7,A
0085 EF                MOV     A,R7
0086 54F9              ANL     A,#0F9H
0088 FF                MOV     R7,A
0089 EF                MOV     A,R7
008A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 453
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 36  

008B 9043A1            MOV     DPTR,#043A1H
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
0090 EF                MOV     A,R7
0091 54FE              ANL     A,#0FEH
0093 FF                MOV     R7,A
0094 EF                MOV     A,R7
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 454
0096 9043B1            MOV     DPTR,#043B1H
0099 E0                MOVX    A,@DPTR
009A FF                MOV     R7,A
009B EF                MOV     A,R7
009C 54FE              ANL     A,#0FEH
009E FF                MOV     R7,A
009F EF                MOV     A,R7
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
00A1 120000      E     LCALL   ADC_DelSig_1_theACLK_Stop
                                           ; SOURCE LINE # 461
00A4 9043A2            MOV     DPTR,#043A2H
00A7 E0                MOVX    A,@DPTR
00A8 FF                MOV     R7,A
00A9 EF                MOV     A,R7
00AA 54FB              ANL     A,#0FBH
00AC FF                MOV     R7,A
00AD EF                MOV     A,R7
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 462
00AF 9043B2            MOV     DPTR,#043B2H
00B2 E0                MOVX    A,@DPTR
00B3 FF                MOV     R7,A
00B4 EF                MOV     A,R7
00B5 54FB              ANL     A,#0FBH
00B7 FF                MOV     R7,A
00B8 EF                MOV     A,R7
00B9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 464
00BA 120000      E     LCALL   ADC_DelSig_1_Ext_CP_Clk_Stop
                                           ; SOURCE LINE # 466
00BD 22                RET     
             ; FUNCTION ADC_DelSig_1_Stop (END)

             ; FUNCTION _ADC_DelSig_1_SetBufferGain (BEGIN)
                                           ; SOURCE LINE # 486
0000 900000      R     MOV     DPTR,#gain
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 487
                                           ; SOURCE LINE # 489
0005 90589B            MOV     DPTR,#0589BH
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54F3              ANL     A,#0F3H
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#tmpReg
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 490
0013 900000      R     MOV     DPTR,#tmpReg
0016 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 37  

0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#gain
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D EE                MOV     A,R6
001E 25E0              ADD     A,ACC
0020 25E0              ADD     A,ACC
0022 FE                MOV     R6,A
0023 EF                MOV     A,R7
0024 4E                ORL     A,R6
0025 FF                MOV     R7,A
0026 900000      R     MOV     DPTR,#tmpReg
0029 EF                MOV     A,R7
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 491
002B 900000      R     MOV     DPTR,#tmpReg
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 90589B            MOV     DPTR,#0589BH
0033 EF                MOV     A,R7
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
0035 22                RET     
             ; FUNCTION _ADC_DelSig_1_SetBufferGain (END)

             ; FUNCTION _ADC_DelSig_1_SetCoherency (BEGIN)
                                           ; SOURCE LINE # 520
0000 900000      R     MOV     DPTR,#coherency
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 521
                                           ; SOURCE LINE # 523
0005 904E14            MOV     DPTR,#04E14H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 54FC              ANL     A,#0FCH
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#tmpReg
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 524
0013 900000      R     MOV     DPTR,#tmpReg
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 900000      R     MOV     DPTR,#coherency
001B E0                MOVX    A,@DPTR
001C FE                MOV     R6,A
001D EF                MOV     A,R7
001E 4E                ORL     A,R6
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#tmpReg
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 525
0025 900000      R     MOV     DPTR,#tmpReg
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A 904E14            MOV     DPTR,#04E14H
002D EF                MOV     A,R7
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 526
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 38  

002F 22                RET     
             ; FUNCTION _ADC_DelSig_1_SetCoherency (END)

             ; FUNCTION _ADC_DelSig_1_SetGCOR (BEGIN)
                                           ; SOURCE LINE # 553
0000 900000      R     MOV     DPTR,#gainAdjust
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 554
                                           ; SOURCE LINE # 559
0006 904E0D            MOV     DPTR,#04E0DH
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B 7E00              MOV     R6,#00H
000D 900000      R     MOV     DPTR,#tmpReg
0010 EE                MOV     A,R6
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 560
0015 900000      R     MOV     DPTR,#tmpReg
0018 E0                MOVX    A,@DPTR
0019 FE                MOV     R6,A
001A A3                INC     DPTR
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 7F00              MOV     R7,#00H
0020 FE                MOV     R6,A
0021 904E0C            MOV     DPTR,#04E0CH
0024 E0                MOVX    A,@DPTR
0025 FD                MOV     R5,A
0026 7C00              MOV     R4,#00H
0028 EE                MOV     A,R6
0029 4C                ORL     A,R4
002A FE                MOV     R6,A
002B EF                MOV     A,R7
002C 4D                ORL     A,R5
002D FF                MOV     R7,A
002E 900000      R     MOV     DPTR,#tmpReg
0031 EE                MOV     A,R6
0032 F0                MOVX    @DPTR,A
0033 A3                INC     DPTR
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 561
0036 900000      R     MOV     DPTR,#tmpReg
0039 E0                MOVX    A,@DPTR
003A FC                MOV     R4,A
003B A3                INC     DPTR
003C E0                MOVX    A,@DPTR
003D FD                MOV     R5,A
003E E4                CLR     A
003F 120000      E     LCALL   ?C?FCASTI
0042 7B00              MOV     R3,#00H
0044 7A00              MOV     R2,#00H
0046 7900              MOV     R1,#00H
0048 7847              MOV     R0,#047H
004A 120000      E     LCALL   ?C?FPDIV
004D 900000      R     MOV     DPTR,#tmpValue
0050 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 562
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 39  

0053 900000      R     MOV     DPTR,#tmpValue
0056 120000      E     LCALL   ?C?LLDXDATA
0059 900000      R     MOV     DPTR,#gainAdjust
005C 120000      E     LCALL   ?C?LLDXDATA0
005F 120000      E     LCALL   ?C?FPMUL
0062 900000      R     MOV     DPTR,#tmpValue
0065 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 564
0068 7FB9              MOV     R7,#0B9H
006A 7EFC              MOV     R6,#0FCH
006C 7DFF              MOV     R5,#0FFH
006E 7C3F              MOV     R4,#03FH
0070 900000      R     MOV     DPTR,#tmpValue
0073 120000      E     LCALL   ?C?LLDXDATA0
0076 120000      E     LCALL   ?C?FPCMP3
0079 600A              JZ      ?C0009
007B 4008              JC      ?C0009
                                           ; SOURCE LINE # 565
                                           ; SOURCE LINE # 566
007D 900000      R     MOV     DPTR,#status
0080 7401              MOV     A,#01H
0082 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 567
0083 803F              SJMP    ?C0010
0085         ?C0009:
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 570
0085 7F00              MOV     R7,#00H
0087 7E00              MOV     R6,#00H
0089 7D00              MOV     R5,#00H
008B 7C47              MOV     R4,#047H
008D 900000      R     MOV     DPTR,#tmpValue
0090 120000      E     LCALL   ?C?LLDXDATA0
0093 120000      E     LCALL   ?C?FPMUL
0096 120000      E     LCALL   ?C?CASTF
0099 900000      R     MOV     DPTR,#tmpReg
009C EE                MOV     A,R6
009D F0                MOVX    @DPTR,A
009E A3                INC     DPTR
009F EF                MOV     A,R7
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 571
00A1 900000      R     MOV     DPTR,#tmpReg
00A4 E0                MOVX    A,@DPTR
00A5 FE                MOV     R6,A
00A6 A3                INC     DPTR
00A7 E0                MOVX    A,@DPTR
00A8 FF                MOV     R7,A
00A9 904E0C            MOV     DPTR,#04E0CH
00AC EF                MOV     A,R7
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 572
00AE 900000      R     MOV     DPTR,#tmpReg
00B1 E0                MOVX    A,@DPTR
00B2 FE                MOV     R6,A
00B3 A3                INC     DPTR
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 EE                MOV     A,R6
00B7 FF                MOV     R7,A
00B8 7E00              MOV     R6,#00H
00BA 904E0D            MOV     DPTR,#04E0DH
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 40  

00BD EF                MOV     A,R7
00BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 573
00BF 900000      R     MOV     DPTR,#status
00C2 E4                CLR     A
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 574
00C4         ?C0010:
                                           ; SOURCE LINE # 576
00C4 900000      R     MOV     DPTR,#status
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
                                           ; SOURCE LINE # 577
00C9         ?C0011:
00C9 22                RET     
             ; FUNCTION _ADC_DelSig_1_SetGCOR (END)

             ; FUNCTION ADC_DelSig_1_ReadGCOR (BEGIN)
                                           ; SOURCE LINE # 601
                                           ; SOURCE LINE # 602
                                           ; SOURCE LINE # 606
0000 904E0E            MOV     DPTR,#04E0EH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 900000      R     MOV     DPTR,#gValue
0008 EF                MOV     A,R7
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 607
000A 7B02              MOV     R3,#02H
000C 7A4E              MOV     R2,#04EH
000E 790C              MOV     R1,#0CH
0010 120000      E     LCALL   _cyread16_nodpx
0013 900000      R     MOV     DPTR,#gcorRegValue
0016 EE                MOV     A,R6
0017 F0                MOVX    @DPTR,A
0018 A3                INC     DPTR
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 609
001B 900000      R     MOV     DPTR,#gValue
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 120000      E     LCALL   ?C?CCASE
0024 0000        R     DW      ?C0013
0026 09                DB      09H
0027 0000        R     DW      ?C0014
0029 0A                DB      0AH
002A 0000        R     DW      ?C0015
002C 0B                DB      0BH
002D 0000        R     DW      ?C0016
002F 0C                DB      0CH
0030 0000        R     DW      ?C0017
0032 0D                DB      0DH
0033 0000        R     DW      ?C0018
0035 0E                DB      0EH
0036 0000              DW      00H
0038 0000        R     DW      ?C0019
                                           ; SOURCE LINE # 610
                                           ; SOURCE LINE # 611
003A         ?C0013:
                                           ; SOURCE LINE # 612
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 41  

003A 900000      R     MOV     DPTR,#gValue
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F C3                CLR     C
0040 740F              MOV     A,#0FH
0042 9F                SUBB    A,R7
0043 FF                MOV     R7,A
0044 900000      R     MOV     DPTR,#gcorRegValue
0047 E0                MOVX    A,@DPTR
0048 FC                MOV     R4,A
0049 A3                INC     DPTR
004A E0                MOVX    A,@DPTR
004B FD                MOV     R5,A
004C ED                MOV     A,R5
004D AE04              MOV     R6,AR4
004F A807              MOV     R0,AR7
0051 08                INC     R0
0052 8005              SJMP    ?C0092
0054         ?C0091:
0054 C3                CLR     C
0055 33                RLC     A
0056 CE                XCH     A,R6
0057 33                RLC     A
0058 CE                XCH     A,R6
0059         ?C0092:
0059 D8F9              DJNZ    R0,?C0091
005B FF                MOV     R7,A
005C 900000      R     MOV     DPTR,#gcorValue
005F EE                MOV     A,R6
0060 F0                MOVX    @DPTR,A
0061 A3                INC     DPTR
0062 EF                MOV     A,R7
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 613
0064 020000      R     LJMP    ?C0012
                                           ; SOURCE LINE # 615
0067         ?C0014:
                                           ; SOURCE LINE # 616
0067 900000      R     MOV     DPTR,#gValue
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
006C C3                CLR     C
006D 740F              MOV     A,#0FH
006F 9F                SUBB    A,R7
0070 FF                MOV     R7,A
0071 900000      R     MOV     DPTR,#gcorRegValue
0074 E0                MOVX    A,@DPTR
0075 FC                MOV     R4,A
0076 A3                INC     DPTR
0077 E0                MOVX    A,@DPTR
0078 FD                MOV     R5,A
0079 ED                MOV     A,R5
007A AE04              MOV     R6,AR4
007C A807              MOV     R0,AR7
007E 08                INC     R0
007F 8005              SJMP    ?C0094
0081         ?C0093:
0081 C3                CLR     C
0082 33                RLC     A
0083 CE                XCH     A,R6
0084 33                RLC     A
0085 CE                XCH     A,R6
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 42  

0086         ?C0094:
0086 D8F9              DJNZ    R0,?C0093
0088 FF                MOV     R7,A
0089 900000      R     MOV     DPTR,#gcorValue
008C EE                MOV     A,R6
008D F0                MOVX    @DPTR,A
008E A3                INC     DPTR
008F EF                MOV     A,R7
0090 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 617
0091 020000      R     LJMP    ?C0012
                                           ; SOURCE LINE # 619
0094         ?C0015:
                                           ; SOURCE LINE # 620
0094 900000      R     MOV     DPTR,#gValue
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 C3                CLR     C
009A 740F              MOV     A,#0FH
009C 9F                SUBB    A,R7
009D FF                MOV     R7,A
009E 900000      R     MOV     DPTR,#gcorRegValue
00A1 E0                MOVX    A,@DPTR
00A2 FC                MOV     R4,A
00A3 A3                INC     DPTR
00A4 E0                MOVX    A,@DPTR
00A5 FD                MOV     R5,A
00A6 ED                MOV     A,R5
00A7 AE04              MOV     R6,AR4
00A9 A807              MOV     R0,AR7
00AB 08                INC     R0
00AC 8005              SJMP    ?C0096
00AE         ?C0095:
00AE C3                CLR     C
00AF 33                RLC     A
00B0 CE                XCH     A,R6
00B1 33                RLC     A
00B2 CE                XCH     A,R6
00B3         ?C0096:
00B3 D8F9              DJNZ    R0,?C0095
00B5 FF                MOV     R7,A
00B6 900000      R     MOV     DPTR,#gcorValue
00B9 EE                MOV     A,R6
00BA F0                MOVX    @DPTR,A
00BB A3                INC     DPTR
00BC EF                MOV     A,R7
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 621
00BE 020000      R     LJMP    ?C0012
                                           ; SOURCE LINE # 623
00C1         ?C0016:
                                           ; SOURCE LINE # 624
00C1 900000      R     MOV     DPTR,#gValue
00C4 E0                MOVX    A,@DPTR
00C5 FF                MOV     R7,A
00C6 C3                CLR     C
00C7 740F              MOV     A,#0FH
00C9 9F                SUBB    A,R7
00CA FF                MOV     R7,A
00CB 900000      R     MOV     DPTR,#gcorRegValue
00CE E0                MOVX    A,@DPTR
00CF FC                MOV     R4,A
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 43  

00D0 A3                INC     DPTR
00D1 E0                MOVX    A,@DPTR
00D2 FD                MOV     R5,A
00D3 ED                MOV     A,R5
00D4 AE04              MOV     R6,AR4
00D6 A807              MOV     R0,AR7
00D8 08                INC     R0
00D9 8005              SJMP    ?C0098
00DB         ?C0097:
00DB C3                CLR     C
00DC 33                RLC     A
00DD CE                XCH     A,R6
00DE 33                RLC     A
00DF CE                XCH     A,R6
00E0         ?C0098:
00E0 D8F9              DJNZ    R0,?C0097
00E2 FF                MOV     R7,A
00E3 900000      R     MOV     DPTR,#gcorValue
00E6 EE                MOV     A,R6
00E7 F0                MOVX    @DPTR,A
00E8 A3                INC     DPTR
00E9 EF                MOV     A,R7
00EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 625
00EB 8068              SJMP    ?C0012
                                           ; SOURCE LINE # 627
00ED         ?C0017:
                                           ; SOURCE LINE # 628
00ED 900000      R     MOV     DPTR,#gValue
00F0 E0                MOVX    A,@DPTR
00F1 FF                MOV     R7,A
00F2 C3                CLR     C
00F3 740F              MOV     A,#0FH
00F5 9F                SUBB    A,R7
00F6 FF                MOV     R7,A
00F7 900000      R     MOV     DPTR,#gcorRegValue
00FA E0                MOVX    A,@DPTR
00FB FC                MOV     R4,A
00FC A3                INC     DPTR
00FD E0                MOVX    A,@DPTR
00FE FD                MOV     R5,A
00FF ED                MOV     A,R5
0100 AE04              MOV     R6,AR4
0102 A807              MOV     R0,AR7
0104 08                INC     R0
0105 8005              SJMP    ?C0100
0107         ?C0099:
0107 C3                CLR     C
0108 33                RLC     A
0109 CE                XCH     A,R6
010A 33                RLC     A
010B CE                XCH     A,R6
010C         ?C0100:
010C D8F9              DJNZ    R0,?C0099
010E FF                MOV     R7,A
010F 900000      R     MOV     DPTR,#gcorValue
0112 EE                MOV     A,R6
0113 F0                MOVX    @DPTR,A
0114 A3                INC     DPTR
0115 EF                MOV     A,R7
0116 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 629
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 44  

0117 803C              SJMP    ?C0012
                                           ; SOURCE LINE # 631
0119         ?C0018:
                                           ; SOURCE LINE # 632
0119 900000      R     MOV     DPTR,#gValue
011C E0                MOVX    A,@DPTR
011D FF                MOV     R7,A
011E C3                CLR     C
011F 740F              MOV     A,#0FH
0121 9F                SUBB    A,R7
0122 FF                MOV     R7,A
0123 900000      R     MOV     DPTR,#gcorRegValue
0126 E0                MOVX    A,@DPTR
0127 FC                MOV     R4,A
0128 A3                INC     DPTR
0129 E0                MOVX    A,@DPTR
012A FD                MOV     R5,A
012B ED                MOV     A,R5
012C AE04              MOV     R6,AR4
012E A807              MOV     R0,AR7
0130 08                INC     R0
0131 8005              SJMP    ?C0102
0133         ?C0101:
0133 C3                CLR     C
0134 33                RLC     A
0135 CE                XCH     A,R6
0136 33                RLC     A
0137 CE                XCH     A,R6
0138         ?C0102:
0138 D8F9              DJNZ    R0,?C0101
013A FF                MOV     R7,A
013B 900000      R     MOV     DPTR,#gcorValue
013E EE                MOV     A,R6
013F F0                MOVX    @DPTR,A
0140 A3                INC     DPTR
0141 EF                MOV     A,R7
0142 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 633
0143 8010              SJMP    ?C0012
                                           ; SOURCE LINE # 635
0145         ?C0019:
                                           ; SOURCE LINE # 636
0145 900000      R     MOV     DPTR,#gcorRegValue
0148 E0                MOVX    A,@DPTR
0149 FE                MOV     R6,A
014A A3                INC     DPTR
014B E0                MOVX    A,@DPTR
014C FF                MOV     R7,A
014D 900000      R     MOV     DPTR,#gcorValue
0150 EE                MOV     A,R6
0151 F0                MOVX    @DPTR,A
0152 A3                INC     DPTR
0153 EF                MOV     A,R7
0154 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 637
                                           ; SOURCE LINE # 638
0155         ?C0012:
                                           ; SOURCE LINE # 640
0155 900000      R     MOV     DPTR,#gcorValue
0158 E0                MOVX    A,@DPTR
0159 FE                MOV     R6,A
015A A3                INC     DPTR
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 45  

015B E0                MOVX    A,@DPTR
015C FF                MOV     R7,A
                                           ; SOURCE LINE # 641
015D         ?C0020:
015D 22                RET     
             ; FUNCTION ADC_DelSig_1_ReadGCOR (END)

             ; FUNCTION _ADC_DelSig_1_SetBufferChop (BEGIN)
                                           ; SOURCE LINE # 662
0000 900000      R     MOV     DPTR,#chopen
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#chopFreq
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 663
                                           ; SOURCE LINE # 664
000A 900000      R     MOV     DPTR,#chopen
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 6013              JZ      ?C0021
                                           ; SOURCE LINE # 665
                                           ; SOURCE LINE # 666
0012 900000      R     MOV     DPTR,#chopFreq
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 5407              ANL     A,#07H
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 4408              ORL     A,#08H
001E FF                MOV     R7,A
001F 90589C            MOV     DPTR,#0589CH
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 668
0024 22                RET     
0025         ?C0021:
                                           ; SOURCE LINE # 670
                                           ; SOURCE LINE # 671
0025 90589C            MOV     DPTR,#0589CH
0028 E4                CLR     A
0029 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 672
                                           ; SOURCE LINE # 673
002A         ?C0023:
002A 22                RET     
             ; FUNCTION _ADC_DelSig_1_SetBufferChop (END)

             ; FUNCTION ADC_DelSig_1_StartConvert (BEGIN)
                                           ; SOURCE LINE # 693
                                           ; SOURCE LINE # 694
                                           ; SOURCE LINE # 696
0000 904E00            MOV     DPTR,#04E00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4401              ORL     A,#01H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 46  

                                           ; SOURCE LINE # 697
000B 22                RET     
             ; FUNCTION ADC_DelSig_1_StartConvert (END)

             ; FUNCTION ADC_DelSig_1_StopConvert (BEGIN)
                                           ; SOURCE LINE # 721
                                           ; SOURCE LINE # 722
                                           ; SOURCE LINE # 724
0000 904E00            MOV     DPTR,#04E00H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FE              ANL     A,#0FEH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 728
000B 900000      R     MOV     DPTR,#ADC_DelSig_1_convDone
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 729
0011 22                RET     
             ; FUNCTION ADC_DelSig_1_StopConvert (END)

             ; FUNCTION _ADC_DelSig_1_IsEndConversion (BEGIN)
                                           ; SOURCE LINE # 755
0000 900000      R     MOV     DPTR,#wMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 756
                                           ; SOURCE LINE # 761
0005 900000      R     MOV     DPTR,#ADC_DelSig_1_stopConversion
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B B4011E            CJNE    A,#01H,?C0034
                                           ; SOURCE LINE # 762
000E         ?C0029:
                                           ; SOURCE LINE # 764
                                           ; SOURCE LINE # 765
000E 900000      R     MOV     DPTR,#ADC_DelSig_1_convDone
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 900000      R     MOV     DPTR,#status
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 766
0018 900000      R     MOV     DPTR,#status
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 6401              XRL     A,#01H
0020 602A              JZ      ?C0031
0022 900000      R     MOV     DPTR,#wMode
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 60E4              JZ      ?C0029
                                           ; SOURCE LINE # 767
002A 8020              SJMP    ?C0031
                                           ; SOURCE LINE # 769
002C         ?C0034:
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 47  

                                           ; SOURCE LINE # 771
                                           ; SOURCE LINE # 772
002C 904E01            MOV     DPTR,#04E01H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 5401              ANL     A,#01H
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#status
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 773
003A 900000      R     MOV     DPTR,#status
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 6401              XRL     A,#01H
0042 6008              JZ      ?C0031
0044 900000      R     MOV     DPTR,#wMode
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 EF                MOV     A,R7
004A 60E0              JZ      ?C0034
                                           ; SOURCE LINE # 774
004C         ?C0031:
                                           ; SOURCE LINE # 775
004C 900000      R     MOV     DPTR,#status
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
                                           ; SOURCE LINE # 776
0051         ?C0036:
0051 22                RET     
             ; FUNCTION _ADC_DelSig_1_IsEndConversion (END)

             ; FUNCTION ADC_DelSig_1_GetResult8 (BEGIN)
                                           ; SOURCE LINE # 796
                                           ; SOURCE LINE # 797
                                           ; SOURCE LINE # 798
0000 904E10            MOV     DPTR,#04E10H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
                                           ; SOURCE LINE # 799
0005         ?C0037:
0005 22                RET     
             ; FUNCTION ADC_DelSig_1_GetResult8 (END)

             ; FUNCTION ADC_DelSig_1_GetResult16 (BEGIN)
                                           ; SOURCE LINE # 819
                                           ; SOURCE LINE # 820
                                           ; SOURCE LINE # 824
0000 904E11            MOV     DPTR,#04E11H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 7E00              MOV     R6,#00H
0007 900000      R     MOV     DPTR,#result
000A EE                MOV     A,R6
000B F0                MOVX    @DPTR,A
000C A3                INC     DPTR
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 825
000F 900000      R     MOV     DPTR,#result
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 48  

0012 E0                MOVX    A,@DPTR
0013 FE                MOV     R6,A
0014 A3                INC     DPTR
0015 E0                MOVX    A,@DPTR
0016 FF                MOV     R7,A
0017 EF                MOV     A,R7
0018 7F00              MOV     R7,#00H
001A FE                MOV     R6,A
001B 904E10            MOV     DPTR,#04E10H
001E E0                MOVX    A,@DPTR
001F FD                MOV     R5,A
0020 7C00              MOV     R4,#00H
0022 EE                MOV     A,R6
0023 4C                ORL     A,R4
0024 FE                MOV     R6,A
0025 EF                MOV     A,R7
0026 4D                ORL     A,R5
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#result
002B EE                MOV     A,R6
002C F0                MOVX    @DPTR,A
002D A3                INC     DPTR
002E EF                MOV     A,R7
002F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 830
0030 900000      R     MOV     DPTR,#result
0033 E0                MOVX    A,@DPTR
0034 FE                MOV     R6,A
0035 A3                INC     DPTR
0036 E0                MOVX    A,@DPTR
0037 FF                MOV     R7,A
                                           ; SOURCE LINE # 831
0038         ?C0038:
0038 22                RET     
             ; FUNCTION ADC_DelSig_1_GetResult16 (END)

             ; FUNCTION ADC_DelSig_1_GetResult32 (BEGIN)
                                           ; SOURCE LINE # 851
                                           ; SOURCE LINE # 852
                                           ; SOURCE LINE # 857
0000 904E12            MOV     DPTR,#04E12H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FF              ANL     A,#0FFH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A 33                RLC     A
000B 95E0              SUBB    A,ACC
000D FE                MOV     R6,A
000E FD                MOV     R5,A
000F FC                MOV     R4,A
0010 900000      R     MOV     DPTR,#result
0013 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 858
0016 900000      R     MOV     DPTR,#result
0019 120000      E     LCALL   ?C?LLDXDATA
001C 7808              MOV     R0,#08H
001E 120000      E     LCALL   ?C?LSHL
0021 A804              MOV     R0,AR4
0023 A905              MOV     R1,AR5
0025 AA06              MOV     R2,AR6
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 49  

0027 AB07              MOV     R3,AR7
0029 904E11            MOV     DPTR,#04E11H
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E E4                CLR     A
002F FC                MOV     R4,A
0030 FD                MOV     R5,A
0031 FE                MOV     R6,A
0032 120000      E     LCALL   ?C?LOR
0035 900000      R     MOV     DPTR,#result
0038 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 859
003B 900000      R     MOV     DPTR,#result
003E 120000      E     LCALL   ?C?LLDXDATA
0041 7808              MOV     R0,#08H
0043 120000      E     LCALL   ?C?LSHL
0046 A804              MOV     R0,AR4
0048 A905              MOV     R1,AR5
004A AA06              MOV     R2,AR6
004C AB07              MOV     R3,AR7
004E 904E10            MOV     DPTR,#04E10H
0051 E0                MOVX    A,@DPTR
0052 FF                MOV     R7,A
0053 E4                CLR     A
0054 FC                MOV     R4,A
0055 FD                MOV     R5,A
0056 FE                MOV     R6,A
0057 120000      E     LCALL   ?C?LOR
005A 900000      R     MOV     DPTR,#result
005D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 865
0060 900000      R     MOV     DPTR,#result
0063 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 866
0066         ?C0039:
0066 22                RET     
             ; FUNCTION ADC_DelSig_1_GetResult32 (END)

             ; FUNCTION _ADC_DelSig_1_SetOffset (BEGIN)
                                           ; SOURCE LINE # 893
0000 900000      R     MOV     DPTR,#offset
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 894
                                           ; SOURCE LINE # 896
0006 900000      R     MOV     DPTR,#offset
0009 120000      E     LCALL   ?C?LLDXDATA
000C 900000      R     MOV     DPTR,#ADC_DelSig_1_Offset
000F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 897
0012 22                RET     
             ; FUNCTION _ADC_DelSig_1_SetOffset (END)

             ; FUNCTION _ADC_DelSig_1_SetGain (BEGIN)
                                           ; SOURCE LINE # 921
0000 900000      R     MOV     DPTR,#adcGain
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 922
                                           ; SOURCE LINE # 924
0006 900000      R     MOV     DPTR,#adcGain
0009 120000      E     LCALL   ?C?LLDXDATA
000C 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
000F 120000      E     LCALL   ?C?LSTXDATA
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 50  

                                           ; SOURCE LINE # 925
0012 22                RET     
             ; FUNCTION _ADC_DelSig_1_SetGain (END)

             ; FUNCTION _ADC_DelSig_1_CountsTo_mVolts (BEGIN)
                                           ; SOURCE LINE # 950
0000 900000      R     MOV     DPTR,#adcCounts
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 951
                                           ; SOURCE LINE # 953
0006 7F00              MOV     R7,#00H
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#mVolts
0011 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 957
0014 900000      R     MOV     DPTR,#adcCounts
0017 120000      E     LCALL   ?C?LLDXDATA
001A 900000      R     MOV     DPTR,#ADC_DelSig_1_Offset
001D 120000      E     LCALL   ?C?LLDXDATA0
0020 120000      E     LCALL   ?C?LSUB
0023 900000      R     MOV     DPTR,#adcCounts
0026 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 959
                                           ; SOURCE LINE # 960
                                           ; SOURCE LINE # 961
0029 7FE8              MOV     R7,#0E8H
002B 7E03              MOV     R6,#03H
002D 7D00              MOV     R5,#00H
002F 7C00              MOV     R4,#00H
0031 900000      R     MOV     DPTR,#A
0034 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 962
0037 7F01              MOV     R7,#01H
0039 7E00              MOV     R6,#00H
003B 7D00              MOV     R5,#00H
003D 7C00              MOV     R4,#00H
003F 900000      R     MOV     DPTR,#B
0042 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 963
                                           ; SOURCE LINE # 965
                                           ; SOURCE LINE # 966
                                           ; SOURCE LINE # 967
                                           ; SOURCE LINE # 968
0045         ?C0043:
                                           ; SOURCE LINE # 970
0045 900000      R     MOV     DPTR,#B
0048 120000      E     LCALL   ?C?LLDXDATA0
004B 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
004E 120000      E     LCALL   ?C?LLDXDATA
0051 120000      E     LCALL   ?C?SLDIV
0054 C004              PUSH    AR4
0056 C005              PUSH    AR5
0058 C006              PUSH    AR6
005A C007              PUSH    AR7
005C 900000      R     MOV     DPTR,#adcCounts
005F 120000      E     LCALL   ?C?LLDXDATA
0062 900000      R     MOV     DPTR,#A
0065 120000      E     LCALL   ?C?LLDXDATA0
0068 120000      E     LCALL   ?C?LMUL
006B D003              POP     AR3
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 51  

006D D002              POP     AR2
006F D001              POP     AR1
0071 D000              POP     AR0
0073 120000      E     LCALL   ?C?SLDIV
0076 900000      R     MOV     DPTR,#mVolts
0079 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 972
007C 900000      R     MOV     DPTR,#mVolts
007F 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 973
0082         ?C0044:
0082 22                RET     
             ; FUNCTION _ADC_DelSig_1_CountsTo_mVolts (END)

             ; FUNCTION _ADC_DelSig_1_CountsTo_Volts (BEGIN)
                                           ; SOURCE LINE # 998
0000 900000      R     MOV     DPTR,#adcCounts
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 999
                                           ; SOURCE LINE # 1001
0006 7F00              MOV     R7,#00H
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#Volts
0011 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1004
0014 900000      R     MOV     DPTR,#adcCounts
0017 120000      E     LCALL   ?C?LLDXDATA
001A 900000      R     MOV     DPTR,#ADC_DelSig_1_Offset
001D 120000      E     LCALL   ?C?LLDXDATA0
0020 120000      E     LCALL   ?C?LSUB
0023 900000      R     MOV     DPTR,#adcCounts
0026 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1006
0029 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
002C 120000      E     LCALL   ?C?LLDXDATA
002F EC                MOV     A,R4
0030 120000      E     LCALL   ?C?FCASTL
0033 C004              PUSH    AR4
0035 C005              PUSH    AR5
0037 C006              PUSH    AR6
0039 C007              PUSH    AR7
003B 900000      R     MOV     DPTR,#adcCounts
003E 120000      E     LCALL   ?C?LLDXDATA
0041 EC                MOV     A,R4
0042 120000      E     LCALL   ?C?FCASTL
0045 D003              POP     AR3
0047 D002              POP     AR2
0049 D001              POP     AR1
004B D000              POP     AR0
004D 120000      E     LCALL   ?C?FPDIV
0050 900000      R     MOV     DPTR,#Volts
0053 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1008
0056 900000      R     MOV     DPTR,#Volts
0059 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 1009
005C         ?C0045:
005C 22                RET     
             ; FUNCTION _ADC_DelSig_1_CountsTo_Volts (END)

C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 52  

             ; FUNCTION _ADC_DelSig_1_CountsTo_uVolts (BEGIN)
                                           ; SOURCE LINE # 1047
0000 900000      R     MOV     DPTR,#adcCounts
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1048
                                           ; SOURCE LINE # 1050
0006 7F00              MOV     R7,#00H
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#uVolts
0011 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1053
                                           ; SOURCE LINE # 1054
                                           ; SOURCE LINE # 1055
                                           ; SOURCE LINE # 1056
                                           ; SOURCE LINE # 1057
0014         ?C0046:
                                           ; SOURCE LINE # 1058
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1060
0014 7FA0              MOV     R7,#0A0H
0016 7E86              MOV     R6,#086H
0018 7D01              MOV     R5,#01H
001A 7C00              MOV     R4,#00H
001C 900000      R     MOV     DPTR,#A
001F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1061
0022 7F0A              MOV     R7,#0AH
0024 7E00              MOV     R6,#00H
0026 7D00              MOV     R5,#00H
0028 7C00              MOV     R4,#00H
002A 900000      R     MOV     DPTR,#B
002D 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1062
                                           ; SOURCE LINE # 1063
                                           ; SOURCE LINE # 1064
                                           ; SOURCE LINE # 1065
                                           ; SOURCE LINE # 1066
                                           ; SOURCE LINE # 1067
                                           ; SOURCE LINE # 1069
                                           ; SOURCE LINE # 1070
                                           ; SOURCE LINE # 1071
                                           ; SOURCE LINE # 1072
0030         ?C0047:
                                           ; SOURCE LINE # 1075
0030 900000      R     MOV     DPTR,#adcCounts
0033 120000      E     LCALL   ?C?LLDXDATA
0036 900000      R     MOV     DPTR,#ADC_DelSig_1_Offset
0039 120000      E     LCALL   ?C?LLDXDATA0
003C 120000      E     LCALL   ?C?LSUB
003F 900000      R     MOV     DPTR,#adcCounts
0042 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1077
0045 900000      R     MOV     DPTR,#B
0048 120000      E     LCALL   ?C?LLDXDATA0
004B 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
004E 120000      E     LCALL   ?C?LLDXDATA
0051 120000      E     LCALL   ?C?SLDIV
0054 C004              PUSH    AR4
0056 C005              PUSH    AR5
0058 C006              PUSH    AR6
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 53  

005A C007              PUSH    AR7
005C 900000      R     MOV     DPTR,#adcCounts
005F 120000      E     LCALL   ?C?LLDXDATA
0062 900000      R     MOV     DPTR,#A
0065 120000      E     LCALL   ?C?LLDXDATA0
0068 120000      E     LCALL   ?C?LMUL
006B D003              POP     AR3
006D D002              POP     AR2
006F D001              POP     AR1
0071 D000              POP     AR0
0073 120000      E     LCALL   ?C?SLDIV
0076 900000      R     MOV     DPTR,#uVolts
0079 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1079
007C 900000      R     MOV     DPTR,#uVolts
007F 120000      E     LCALL   ?C?LLDXDATA
                                           ; SOURCE LINE # 1080
0082         ?C0052:
0082 22                RET     
             ; FUNCTION _ADC_DelSig_1_CountsTo_uVolts (END)

             ; FUNCTION ADC_DelSig_1_IRQ_Start (BEGIN)
                                           ; SOURCE LINE # 1102
                                           ; SOURCE LINE # 1103
                                           ; SOURCE LINE # 1105
0000 7F1D              MOV     R7,#01DH
0002 120000      E     LCALL   _?CyIntDisable
                                           ; SOURCE LINE # 1108
0005 7C00        E     MOV     R4,#HIGH ADC_DelSig_1_ISR1
0007 7D00        E     MOV     R5,#LOW ADC_DelSig_1_ISR1
0009 7F1D              MOV     R7,#01DH
000B 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 1111
000E 7D07              MOV     R5,#07H
0010 7F1D              MOV     R7,#01DH
0012 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 1114
0015 7F1D              MOV     R7,#01DH
0017 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 1115
001A 22                RET     
             ; FUNCTION ADC_DelSig_1_IRQ_Start (END)

             ; FUNCTION _ADC_DelSig_1_InitConfig (BEGIN)
                                           ; SOURCE LINE # 1139
0000 900000      R     MOV     DPTR,#config
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1140
                                           ; SOURCE LINE # 1141
0005 900000      R     MOV     DPTR,#ADC_DelSig_1_stopConversion
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1143
000A 900000      R     MOV     DPTR,#ADC_DelSig_1_initVar
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 7051              JNZ     ?C0054
                                           ; SOURCE LINE # 1144
                                           ; SOURCE LINE # 1145
0012 905896            MOV     DPTR,#05896H
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 54  

0015 7407              MOV     A,#07H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1146
0018 905897            MOV     DPTR,#05897H
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1147
001D 90589E            MOV     DPTR,#0589EH
0020 E4                CLR     A
0021 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1148
0022 905B07            MOV     DPTR,#05B07H
0025 E0                MOVX    A,@DPTR
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 4418              ORL     A,#018H
002A FF                MOV     R7,A
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1149
002D 905893            MOV     DPTR,#05893H
0030 E4                CLR     A
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1151
0032 905B88            MOV     DPTR,#05B88H
0035 E4                CLR     A
0036 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1152
0037 905B89            MOV     DPTR,#05B89H
003A E4                CLR     A
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1154
003C 905880            MOV     DPTR,#05880H
003F 740A              MOV     A,#0AH
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1155
0042 905881            MOV     DPTR,#05881H
0045 E4                CLR     A
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1156
0047 905882            MOV     DPTR,#05882H
004A 747A              MOV     A,#07AH
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1157
004D 905883            MOV     DPTR,#05883H
0050 E4                CLR     A
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1158
0052 90588D            MOV     DPTR,#0588DH
0055 E4                CLR     A
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1160
0057 904E01            MOV     DPTR,#04E01H
005A 7414              MOV     A,#014H
005C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1161
005D 904E14            MOV     DPTR,#04E14H
0060 7401              MOV     A,#01H
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1162
0063         ?C0054:
                                           ; SOURCE LINE # 1164
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 55  

0063 900000      R     MOV     DPTR,#config
0066 E0                MOVX    A,@DPTR
0067 FF                MOV     R7,A
0068 EF                MOV     A,R7
0069 6401              XRL     A,#01H
006B 6003              JZ      $ + 5H
006D 020000      R     LJMP    ?C0055
                                           ; SOURCE LINE # 1165
                                           ; SOURCE LINE # 1167
0070 904E00            MOV     DPTR,#04E00H
0073 7438              MOV     A,#038H
0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1168
0076 904E02            MOV     DPTR,#04E02H
0079 7406              MOV     A,#06H
007B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1169
007C 904E03            MOV     DPTR,#04E03H
007F 7408              MOV     A,#08H
0081 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1170
0082 904E04            MOV     DPTR,#04E04H
0085 E4                CLR     A
0086 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1171
0087 904E05            MOV     DPTR,#04E05H
008A E4                CLR     A
008B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1172
008C 904E06            MOV     DPTR,#04E06H
008F 7426              MOV     A,#026H
0091 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1173
0092 904E08            MOV     DPTR,#04E08H
0095 E4                CLR     A
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1174
0097 904E09            MOV     DPTR,#04E09H
009A E4                CLR     A
009B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1175
009C 904E0A            MOV     DPTR,#04E0AH
009F E4                CLR     A
00A0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1177
00A1 905884            MOV     DPTR,#05884H
00A4 7414              MOV     A,#014H
00A6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1178
00A7 905885            MOV     DPTR,#05885H
00AA 740B              MOV     A,#0BH
00AC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1179
00AD 905886            MOV     DPTR,#05886H
00B0 7431              MOV     A,#031H
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1180
00B3 905887            MOV     DPTR,#05887H
00B6 E4                CLR     A
00B7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1181
00B8 905888            MOV     DPTR,#05888H
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 56  

00BB 7412              MOV     A,#012H
00BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1182
00BE 905889            MOV     DPTR,#05889H
00C1 7413              MOV     A,#013H
00C3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1183
00C4 90588A            MOV     DPTR,#0588AH
00C7 7444              MOV     A,#044H
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1184
00CA 90588B            MOV     DPTR,#0588BH
00CD 7448              MOV     A,#048H
00CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1185
00D0 90588C            MOV     DPTR,#0588CH
00D3 7401              MOV     A,#01H
00D5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1186
00D6 90588E            MOV     DPTR,#0588EH
00D9 E4                CLR     A
00DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1187
00DB 90588F            MOV     DPTR,#0588FH
00DE E4                CLR     A
00DF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1188
00E0 905890            MOV     DPTR,#05890H
00E3 740A              MOV     A,#0AH
00E5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1189
00E6 905891            MOV     DPTR,#05891H
00E9 7443              MOV     A,#043H
00EB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1190
00EC 905892            MOV     DPTR,#05892H
00EF 7452              MOV     A,#052H
00F1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1191
00F2 905894            MOV     DPTR,#05894H
00F5 7458              MOV     A,#058H
00F7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1192
00F8 905895            MOV     DPTR,#05895H
00FB E4                CLR     A
00FC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1194
00FD 90589A            MOV     DPTR,#0589AH
0100 7405              MOV     A,#05H
0102 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1195
0103 90589B            MOV     DPTR,#0589BH
0106 7402              MOV     A,#02H
0108 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1196
0109 90589C            MOV     DPTR,#0589CH
010C 7401              MOV     A,#01H
010E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1197
010F 90589D            MOV     DPTR,#0589DH
0112 E4                CLR     A
0113 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 57  

                                           ; SOURCE LINE # 1214
0114 7F00              MOV     R7,#00H
0116 120000      E     LCALL   _ADC_DelSig_1_AMux_Select
                                           ; SOURCE LINE # 1224
0119 7F66              MOV     R7,#066H
011B 7E06              MOV     R6,#06H
011D 7D00              MOV     R5,#00H
011F 7C00              MOV     R4,#00H
0121 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
0124 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1227
0127 7D07              MOV     R5,#07H
0129 7F1D              MOV     R7,#01DH
012B 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 1228
012E 7C00        E     MOV     R4,#HIGH ADC_DelSig_1_ISR1
0130 7D00        E     MOV     R5,#LOW ADC_DelSig_1_ISR1
0132 7F1D              MOV     R7,#01DH
0134 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 1229
0137 7F1D              MOV     R7,#01DH
0139 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 1230
013C         ?C0055:
                                           ; SOURCE LINE # 1233
013C 900000      R     MOV     DPTR,#config
013F E0                MOVX    A,@DPTR
0140 FF                MOV     R7,A
0141 EF                MOV     A,R7
0142 6402              XRL     A,#02H
0144 6003              JZ      $ + 5H
0146 020000      R     LJMP    ?C0056
                                           ; SOURCE LINE # 1234
                                           ; SOURCE LINE # 1236
0149 904E00            MOV     DPTR,#04E00H
014C 7438              MOV     A,#038H
014E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1237
014F 904E02            MOV     DPTR,#04E02H
0152 7404              MOV     A,#04H
0154 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1238
0155 904E03            MOV     DPTR,#04E03H
0158 7406              MOV     A,#06H
015A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1239
015B 904E04            MOV     DPTR,#04E04H
015E E4                CLR     A
015F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1240
0160 904E05            MOV     DPTR,#04E05H
0163 E4                CLR     A
0164 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1241
0165 904E06            MOV     DPTR,#04E06H
0168 743F              MOV     A,#03FH
016A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1242
016B 904E08            MOV     DPTR,#04E08H
016E E4                CLR     A
016F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1243
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 58  

0170 904E09            MOV     DPTR,#04E09H
0173 E4                CLR     A
0174 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1244
0175 904E0A            MOV     DPTR,#04E0AH
0178 E4                CLR     A
0179 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1246
017A 905884            MOV     DPTR,#05884H
017D 7450              MOV     A,#050H
017F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1247
0180 905885            MOV     DPTR,#05885H
0183 7427              MOV     A,#027H
0185 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1248
0186 905886            MOV     DPTR,#05886H
0189 742C              MOV     A,#02CH
018B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1249
018C 905887            MOV     DPTR,#05887H
018F E4                CLR     A
0190 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1250
0191 905888            MOV     DPTR,#05888H
0194 7412              MOV     A,#012H
0196 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1251
0197 905889            MOV     DPTR,#05889H
019A 7413              MOV     A,#013H
019C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1252
019D 90588A            MOV     DPTR,#0588AH
01A0 7455              MOV     A,#055H
01A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1253
01A3 90588B            MOV     DPTR,#0588BH
01A6 745A              MOV     A,#05AH
01A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1254
01A9 90588C            MOV     DPTR,#0588CH
01AC 7405              MOV     A,#05H
01AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1255
01AF 90588E            MOV     DPTR,#0588EH
01B2 7401              MOV     A,#01H
01B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1256
01B5 90588F            MOV     DPTR,#0588FH
01B8 7411              MOV     A,#011H
01BA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1257
01BB 905890            MOV     DPTR,#05890H
01BE 7419              MOV     A,#019H
01C0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1258
01C1 905891            MOV     DPTR,#05891H
01C4 7497              MOV     A,#097H
01C6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1259
01C7 905892            MOV     DPTR,#05892H
01CA 7444              MOV     A,#044H
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 59  

01CC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1260
01CD 905894            MOV     DPTR,#05894H
01D0 7458              MOV     A,#058H
01D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1261
01D3 905895            MOV     DPTR,#05895H
01D6 E4                CLR     A
01D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1263
01D8 90589A            MOV     DPTR,#0589AH
01DB 7405              MOV     A,#05H
01DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1264
01DE 90589B            MOV     DPTR,#0589BH
01E1 7402              MOV     A,#02H
01E3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1265
01E4 90589C            MOV     DPTR,#0589CH
01E7 7401              MOV     A,#01H
01E9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1266
01EA 90589D            MOV     DPTR,#0589DH
01ED E4                CLR     A
01EE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1283
01EF 7F00              MOV     R7,#00H
01F1 120000      E     LCALL   _ADC_DelSig_1_AMux_Select
                                           ; SOURCE LINE # 1294
01F4 7F00              MOV     R7,#00H
01F6 7EFA              MOV     R6,#0FAH
01F8 7D00              MOV     R5,#00H
01FA 7C00              MOV     R4,#00H
01FC 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
01FF 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1297
0202 7D07              MOV     R5,#07H
0204 7F1D              MOV     R7,#01DH
0206 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 1298
0209 7C00        E     MOV     R4,#HIGH ADC_DelSig_1_ISR2
020B 7D00        E     MOV     R5,#LOW ADC_DelSig_1_ISR2
020D 7F1D              MOV     R7,#01DH
020F 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 1299
0212 7F1D              MOV     R7,#01DH
0214 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 1300
0217         ?C0056:
                                           ; SOURCE LINE # 1304
0217 900000      R     MOV     DPTR,#config
021A E0                MOVX    A,@DPTR
021B FF                MOV     R7,A
021C EF                MOV     A,R7
021D 6403              XRL     A,#03H
021F 6003              JZ      $ + 5H
0221 020000      R     LJMP    ?C0057
                                           ; SOURCE LINE # 1305
                                           ; SOURCE LINE # 1307
0224 904E00            MOV     DPTR,#04E00H
0227 7438              MOV     A,#038H
0229 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 60  

                                           ; SOURCE LINE # 1308
022A 904E02            MOV     DPTR,#04E02H
022D 7404              MOV     A,#04H
022F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1309
0230 904E03            MOV     DPTR,#04E03H
0233 7406              MOV     A,#06H
0235 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1310
0236 904E04            MOV     DPTR,#04E04H
0239 E4                CLR     A
023A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1311
023B 904E05            MOV     DPTR,#04E05H
023E E4                CLR     A
023F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1312
0240 904E06            MOV     DPTR,#04E06H
0243 743F              MOV     A,#03FH
0245 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1313
0246 904E08            MOV     DPTR,#04E08H
0249 E4                CLR     A
024A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1314
024B 904E09            MOV     DPTR,#04E09H
024E E4                CLR     A
024F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1315
0250 904E0A            MOV     DPTR,#04E0AH
0253 E4                CLR     A
0254 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1317
0255 905884            MOV     DPTR,#05884H
0258 7450              MOV     A,#050H
025A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1318
025B 905885            MOV     DPTR,#05885H
025E 7427              MOV     A,#027H
0260 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1319
0261 905886            MOV     DPTR,#05886H
0264 742C              MOV     A,#02CH
0266 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1320
0267 905887            MOV     DPTR,#05887H
026A E4                CLR     A
026B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1321
026C 905888            MOV     DPTR,#05888H
026F 7412              MOV     A,#012H
0271 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1322
0272 905889            MOV     DPTR,#05889H
0275 7413              MOV     A,#013H
0277 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1323
0278 90588A            MOV     DPTR,#0588AH
027B 7455              MOV     A,#055H
027D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1324
027E 90588B            MOV     DPTR,#0588BH
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 61  

0281 745A              MOV     A,#05AH
0283 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1325
0284 90588C            MOV     DPTR,#0588CH
0287 7405              MOV     A,#05H
0289 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1326
028A 90588E            MOV     DPTR,#0588EH
028D 7401              MOV     A,#01H
028F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1327
0290 90588F            MOV     DPTR,#0588FH
0293 7411              MOV     A,#011H
0295 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1328
0296 905890            MOV     DPTR,#05890H
0299 7419              MOV     A,#019H
029B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1329
029C 905891            MOV     DPTR,#05891H
029F 7497              MOV     A,#097H
02A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1330
02A2 905892            MOV     DPTR,#05892H
02A5 7444              MOV     A,#044H
02A7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1331
02A8 905894            MOV     DPTR,#05894H
02AB 7458              MOV     A,#058H
02AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1332
02AE 905895            MOV     DPTR,#05895H
02B1 E4                CLR     A
02B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1334
02B3 90589A            MOV     DPTR,#0589AH
02B6 7405              MOV     A,#05H
02B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1335
02B9 90589B            MOV     DPTR,#0589BH
02BC 7402              MOV     A,#02H
02BE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1336
02BF 90589C            MOV     DPTR,#0589CH
02C2 7401              MOV     A,#01H
02C4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1337
02C5 90589D            MOV     DPTR,#0589DH
02C8 E4                CLR     A
02C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1354
02CA 7F00              MOV     R7,#00H
02CC 120000      E     LCALL   _ADC_DelSig_1_AMux_Select
                                           ; SOURCE LINE # 1365
02CF 7F00              MOV     R7,#00H
02D1 7EFA              MOV     R6,#0FAH
02D3 7D00              MOV     R5,#00H
02D5 7C00              MOV     R4,#00H
02D7 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
02DA 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1368
02DD 7D07              MOV     R5,#07H
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 62  

02DF 7F1D              MOV     R7,#01DH
02E1 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 1369
02E4 7C00        E     MOV     R4,#HIGH ADC_DelSig_1_ISR3
02E6 7D00        E     MOV     R5,#LOW ADC_DelSig_1_ISR3
02E8 7F1D              MOV     R7,#01DH
02EA 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 1370
02ED 7F1D              MOV     R7,#01DH
02EF 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 1371
02F2         ?C0057:
                                           ; SOURCE LINE # 1375
02F2 900000      R     MOV     DPTR,#config
02F5 E0                MOVX    A,@DPTR
02F6 FF                MOV     R7,A
02F7 EF                MOV     A,R7
02F8 6404              XRL     A,#04H
02FA 6003              JZ      $ + 5H
02FC 020000      R     LJMP    ?C0059
                                           ; SOURCE LINE # 1376
                                           ; SOURCE LINE # 1378
02FF 904E00            MOV     DPTR,#04E00H
0302 7438              MOV     A,#038H
0304 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1379
0305 904E02            MOV     DPTR,#04E02H
0308 7404              MOV     A,#04H
030A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1380
030B 904E03            MOV     DPTR,#04E03H
030E 7406              MOV     A,#06H
0310 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1381
0311 904E04            MOV     DPTR,#04E04H
0314 E4                CLR     A
0315 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1382
0316 904E05            MOV     DPTR,#04E05H
0319 E4                CLR     A
031A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1383
031B 904E06            MOV     DPTR,#04E06H
031E 743F              MOV     A,#03FH
0320 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1384
0321 904E08            MOV     DPTR,#04E08H
0324 E4                CLR     A
0325 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1385
0326 904E09            MOV     DPTR,#04E09H
0329 E4                CLR     A
032A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1386
032B 904E0A            MOV     DPTR,#04E0AH
032E E4                CLR     A
032F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1388
0330 905884            MOV     DPTR,#05884H
0333 7450              MOV     A,#050H
0335 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1389
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 63  

0336 905885            MOV     DPTR,#05885H
0339 7427              MOV     A,#027H
033B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1390
033C 905886            MOV     DPTR,#05886H
033F 742C              MOV     A,#02CH
0341 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1391
0342 905887            MOV     DPTR,#05887H
0345 E4                CLR     A
0346 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1392
0347 905888            MOV     DPTR,#05888H
034A 7412              MOV     A,#012H
034C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1393
034D 905889            MOV     DPTR,#05889H
0350 7413              MOV     A,#013H
0352 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1394
0353 90588A            MOV     DPTR,#0588AH
0356 7455              MOV     A,#055H
0358 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1395
0359 90588B            MOV     DPTR,#0588BH
035C 745A              MOV     A,#05AH
035E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1396
035F 90588C            MOV     DPTR,#0588CH
0362 7405              MOV     A,#05H
0364 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1397
0365 90588E            MOV     DPTR,#0588EH
0368 7401              MOV     A,#01H
036A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1398
036B 90588F            MOV     DPTR,#0588FH
036E 7411              MOV     A,#011H
0370 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1399
0371 905890            MOV     DPTR,#05890H
0374 7419              MOV     A,#019H
0376 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1400
0377 905891            MOV     DPTR,#05891H
037A 7497              MOV     A,#097H
037C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1401
037D 905892            MOV     DPTR,#05892H
0380 7444              MOV     A,#044H
0382 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1402
0383 905894            MOV     DPTR,#05894H
0386 7458              MOV     A,#058H
0388 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1403
0389 905895            MOV     DPTR,#05895H
038C E4                CLR     A
038D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1405
038E 90589A            MOV     DPTR,#0589AH
0391 7405              MOV     A,#05H
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 64  

0393 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1406
0394 90589B            MOV     DPTR,#0589BH
0397 7402              MOV     A,#02H
0399 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1407
039A 90589C            MOV     DPTR,#0589CH
039D 7401              MOV     A,#01H
039F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1408
03A0 90589D            MOV     DPTR,#0589DH
03A3 E4                CLR     A
03A4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1425
03A5 7F00              MOV     R7,#00H
03A7 120000      E     LCALL   _ADC_DelSig_1_AMux_Select
                                           ; SOURCE LINE # 1436
03AA 7F00              MOV     R7,#00H
03AC 7EFA              MOV     R6,#0FAH
03AE 7D00              MOV     R5,#00H
03B0 7C00              MOV     R4,#00H
03B2 900000      R     MOV     DPTR,#ADC_DelSig_1_CountsPerVolt
03B5 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1439
03B8 7D07              MOV     R5,#07H
03BA 7F1D              MOV     R7,#01DH
03BC 120000      E     LCALL   _CyIntSetPriority
                                           ; SOURCE LINE # 1440
03BF 7C00        E     MOV     R4,#HIGH ADC_DelSig_1_ISR4
03C1 7D00        E     MOV     R5,#LOW ADC_DelSig_1_ISR4
03C3 7F1D              MOV     R7,#01DH
03C5 120000      E     LCALL   _CyIntSetVector
                                           ; SOURCE LINE # 1441
03C8 7F1D              MOV     R7,#01DH
03CA 120000      E     LCALL   _?CyIntEnable
                                           ; SOURCE LINE # 1442
                                           ; SOURCE LINE # 1444
03CD         ?C0059:
03CD 22                RET     
             ; FUNCTION _ADC_DelSig_1_InitConfig (END)

             ; FUNCTION _ADC_DelSig_1_RoundValue (BEGIN)
                                           ; SOURCE LINE # 1466
0000 900000      R     MOV     DPTR,#busClockFreq
0003 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1468
                                           ; SOURCE LINE # 1471
0006 7F0A              MOV     R7,#0AH
0008 7E00              MOV     R6,#00H
000A 7D00              MOV     R5,#00H
000C 7C00              MOV     R4,#00H
000E 900000      R     MOV     DPTR,#busClockFreq
0011 120000      E     LCALL   ?C?LLDXDATA0
0014 120000      E     LCALL   ?C?LMUL
0017 900000      R     MOV     DPTR,#clockFreq
001A 120000      E     LCALL   ?C?LLDXDATA0
001D 120000      E     LCALL   ?C?ULDIV
0020 900000      R     MOV     DPTR,#divider1
0023 EE                MOV     A,R6
0024 F0                MOVX    @DPTR,A
0025 A3                INC     DPTR
0026 EF                MOV     A,R7
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 65  

0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1472
0028 900000      R     MOV     DPTR,#clockFreq
002B 120000      E     LCALL   ?C?LLDXDATA0
002E 900000      R     MOV     DPTR,#busClockFreq
0031 120000      E     LCALL   ?C?LLDXDATA
0034 120000      E     LCALL   ?C?ULDIV
0037 900000      R     MOV     DPTR,#divider2
003A EE                MOV     A,R6
003B F0                MOVX    @DPTR,A
003C A3                INC     DPTR
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1473
003F 900000      R     MOV     DPTR,#divider2
0042 E0                MOVX    A,@DPTR
0043 FE                MOV     R6,A
0044 A3                INC     DPTR
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 7C00              MOV     R4,#00H
0049 7D0A              MOV     R5,#0AH
004B 120000      E     LCALL   ?C?IMUL
004E 900000      R     MOV     DPTR,#divider1
0051 E0                MOVX    A,@DPTR
0052 FC                MOV     R4,A
0053 A3                INC     DPTR
0054 E0                MOVX    A,@DPTR
0055 FD                MOV     R5,A
0056 C3                CLR     C
0057 ED                MOV     A,R5
0058 9F                SUBB    A,R7
0059 FF                MOV     R7,A
005A EC                MOV     A,R4
005B 9E                SUBB    A,R6
005C FE                MOV     R6,A
005D C3                CLR     C
005E EF                MOV     A,R7
005F 9405              SUBB    A,#05H
0061 EE                MOV     A,R6
0062 9400              SUBB    A,#00H
0064 400A              JC      ?C0060
                                           ; SOURCE LINE # 1474
                                           ; SOURCE LINE # 1475
0066 900000      R     MOV     DPTR,#divider2
0069 E4                CLR     A
006A 75F001            MOV     B,#01H
006D 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1476
0070         ?C0060:
                                           ; SOURCE LINE # 1477
0070 900000      R     MOV     DPTR,#divider2
0073 E0                MOVX    A,@DPTR
0074 FE                MOV     R6,A
0075 A3                INC     DPTR
0076 E0                MOVX    A,@DPTR
0077 FF                MOV     R7,A
                                           ; SOURCE LINE # 1478
0078         ?C0061:
0078 22                RET     
             ; FUNCTION _ADC_DelSig_1_RoundValue (END)

C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 66  

             ; FUNCTION _ADC_DelSig_1_SelectConfiguration (BEGIN)
                                           ; SOURCE LINE # 1502
0000 900000      R     MOV     DPTR,#config
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#restart
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1504
                                           ; SOURCE LINE # 1505
000A 900000      R     MOV     DPTR,#inputRange
000D E4                CLR     A
000E F0                MOVX    @DPTR,A
000F 900000      R     MOV     DPTR,#resolution
0012 7410              MOV     A,#010H
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1506
0015 900000      R     MOV     DPTR,#idealGain
0018 E4                CLR     A
0019 F0                MOVX    @DPTR,A
001A A3                INC     DPTR
001B E4                CLR     A
001C F0                MOVX    @DPTR,A
001D 900000      R     MOV     DPTR,#clockDivider
0020 E4                CLR     A
0021 F0                MOVX    @DPTR,A
0022 A3                INC     DPTR
0023 7401              MOV     A,#01H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1507
0026 900000      R     MOV     DPTR,#idealOddGain
0029 E4                CLR     A
002A F0                MOVX    @DPTR,A
002B A3                INC     DPTR
002C E4                CLR     A
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1510
002E 900000      R     MOV     DPTR,#config
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 EF                MOV     A,R7
0034 D3                SETB    C
0035 9404              SUBB    A,#04H
0037 4003              JC      $ + 5H
0039 020000      R     LJMP    ?C0069
                                           ; SOURCE LINE # 1511
                                           ; SOURCE LINE # 1514
003C 900000      R     MOV     DPTR,#ADC_DelSig_1_initVar
003F E0                MOVX    A,@DPTR
0040 FF                MOV     R7,A
0041 EF                MOV     A,R7
0042 7006              JNZ     ?C0063
                                           ; SOURCE LINE # 1515
                                           ; SOURCE LINE # 1516
0044 900000      R     MOV     DPTR,#ADC_DelSig_1_started
0047 7401              MOV     A,#01H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1517
004A         ?C0063:
                                           ; SOURCE LINE # 1520
004A 120000      R     LCALL   ADC_DelSig_1_Stop
                                           ; SOURCE LINE # 1529
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 67  

004D 900000      R     MOV     DPTR,#config
0050 E0                MOVX    A,@DPTR
0051 FF                MOV     R7,A
0052 120000      R     LCALL   _ADC_DelSig_1_InitConfig
                                           ; SOURCE LINE # 1532
0055 900000      R     MOV     DPTR,#config
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A EF                MOV     A,R7
005B B40150            CJNE    A,#01H,?C0064
                                           ; SOURCE LINE # 1533
                                           ; SOURCE LINE # 1534
005E 900000      R     MOV     DPTR,#inputRange
0061 7402              MOV     A,#02H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1535
0064 900000      R     MOV     DPTR,#resolution
0067 740D              MOV     A,#0DH
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1536
006A 900000      R     MOV     DPTR,#idealGain
006D 7490              MOV     A,#090H
006F F0                MOVX    @DPTR,A
0070 A3                INC     DPTR
0071 E4                CLR     A
0072 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1537
0073 900000      R     MOV     DPTR,#idealOddGain
0076 7474              MOV     A,#074H
0078 F0                MOVX    @DPTR,A
0079 A3                INC     DPTR
007A 740B              MOV     A,#0BH
007C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1539
007D 7F00              MOV     R7,#00H
007F 7E36              MOV     R6,#036H
0081 7D6E              MOV     R5,#06EH
0083 7C01              MOV     R4,#01H
0085 C004              PUSH    AR4
0087 C005              PUSH    AR5
0089 C006              PUSH    AR6
008B C007              PUSH    AR7
008D 7FC0              MOV     R7,#0C0H
008F 7EC2              MOV     R6,#0C2H
0091 7D04              MOV     R5,#04H
0093 7C00              MOV     R4,#00H
0095 900000      R     MOV     DPTR,#?_ADC_DelSig_1_RoundValue?BYTE+04H
0098 120000      E     LCALL   ?C?LSTXDATA
009B D007              POP     AR7
009D D006              POP     AR6
009F D005              POP     AR5
00A1 D004              POP     AR4
00A3 120000      R     LCALL   _ADC_DelSig_1_RoundValue
00A6 900000      R     MOV     DPTR,#clockDivider
00A9 EE                MOV     A,R6
00AA F0                MOVX    @DPTR,A
00AB A3                INC     DPTR
00AC EF                MOV     A,R7
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1540
00AE         ?C0064:
                                           ; SOURCE LINE # 1543
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 68  

00AE 900000      R     MOV     DPTR,#config
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 EF                MOV     A,R7
00B4 B4024F            CJNE    A,#02H,?C0065
                                           ; SOURCE LINE # 1544
                                           ; SOURCE LINE # 1545
00B7 900000      R     MOV     DPTR,#inputRange
00BA E4                CLR     A
00BB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1546
00BC 900000      R     MOV     DPTR,#resolution
00BF 7410              MOV     A,#010H
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1547
00C2 900000      R     MOV     DPTR,#idealGain
00C5 7490              MOV     A,#090H
00C7 F0                MOVX    @DPTR,A
00C8 A3                INC     DPTR
00C9 74DB              MOV     A,#0DBH
00CB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1548
00CC 900000      R     MOV     DPTR,#idealOddGain
00CF 7480              MOV     A,#080H
00D1 F0                MOVX    @DPTR,A
00D2 A3                INC     DPTR
00D3 E4                CLR     A
00D4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1550
00D5 7F00              MOV     R7,#00H
00D7 7E36              MOV     R6,#036H
00D9 7D6E              MOV     R5,#06EH
00DB 7C01              MOV     R4,#01H
00DD C004              PUSH    AR4
00DF C005              PUSH    AR5
00E1 C006              PUSH    AR6
00E3 C007              PUSH    AR7
00E5 7F00              MOV     R7,#00H
00E7 7EC4              MOV     R6,#0C4H
00E9 7D09              MOV     R5,#09H
00EB 7C00              MOV     R4,#00H
00ED 900000      R     MOV     DPTR,#?_ADC_DelSig_1_RoundValue?BYTE+04H
00F0 120000      E     LCALL   ?C?LSTXDATA
00F3 D007              POP     AR7
00F5 D006              POP     AR6
00F7 D005              POP     AR5
00F9 D004              POP     AR4
00FB 120000      R     LCALL   _ADC_DelSig_1_RoundValue
00FE 900000      R     MOV     DPTR,#clockDivider
0101 EE                MOV     A,R6
0102 F0                MOVX    @DPTR,A
0103 A3                INC     DPTR
0104 EF                MOV     A,R7
0105 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1551
0106         ?C0065:
                                           ; SOURCE LINE # 1555
0106 900000      R     MOV     DPTR,#config
0109 E0                MOVX    A,@DPTR
010A FF                MOV     R7,A
010B EF                MOV     A,R7
010C B4034F            CJNE    A,#03H,?C0066
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 69  

                                           ; SOURCE LINE # 1556
                                           ; SOURCE LINE # 1557
010F 900000      R     MOV     DPTR,#inputRange
0112 E4                CLR     A
0113 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1558
0114 900000      R     MOV     DPTR,#resolution
0117 7410              MOV     A,#010H
0119 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1559
011A 900000      R     MOV     DPTR,#idealGain
011D 7490              MOV     A,#090H
011F F0                MOVX    @DPTR,A
0120 A3                INC     DPTR
0121 74DB              MOV     A,#0DBH
0123 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1560
0124 900000      R     MOV     DPTR,#idealOddGain
0127 7480              MOV     A,#080H
0129 F0                MOVX    @DPTR,A
012A A3                INC     DPTR
012B E4                CLR     A
012C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1562
012D 7F00              MOV     R7,#00H
012F 7E36              MOV     R6,#036H
0131 7D6E              MOV     R5,#06EH
0133 7C01              MOV     R4,#01H
0135 C004              PUSH    AR4
0137 C005              PUSH    AR5
0139 C006              PUSH    AR6
013B C007              PUSH    AR7
013D 7F00              MOV     R7,#00H
013F 7EC4              MOV     R6,#0C4H
0141 7D09              MOV     R5,#09H
0143 7C00              MOV     R4,#00H
0145 900000      R     MOV     DPTR,#?_ADC_DelSig_1_RoundValue?BYTE+04H
0148 120000      E     LCALL   ?C?LSTXDATA
014B D007              POP     AR7
014D D006              POP     AR6
014F D005              POP     AR5
0151 D004              POP     AR4
0153 120000      R     LCALL   _ADC_DelSig_1_RoundValue
0156 900000      R     MOV     DPTR,#clockDivider
0159 EE                MOV     A,R6
015A F0                MOVX    @DPTR,A
015B A3                INC     DPTR
015C EF                MOV     A,R7
015D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1563
015E         ?C0066:
                                           ; SOURCE LINE # 1567
015E 900000      R     MOV     DPTR,#config
0161 E0                MOVX    A,@DPTR
0162 FF                MOV     R7,A
0163 EF                MOV     A,R7
0164 B4044F            CJNE    A,#04H,?C0067
                                           ; SOURCE LINE # 1568
                                           ; SOURCE LINE # 1569
0167 900000      R     MOV     DPTR,#inputRange
016A E4                CLR     A
016B F0                MOVX    @DPTR,A
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 70  

                                           ; SOURCE LINE # 1570
016C 900000      R     MOV     DPTR,#resolution
016F 7410              MOV     A,#010H
0171 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1571
0172 900000      R     MOV     DPTR,#idealGain
0175 7490              MOV     A,#090H
0177 F0                MOVX    @DPTR,A
0178 A3                INC     DPTR
0179 74DB              MOV     A,#0DBH
017B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1572
017C 900000      R     MOV     DPTR,#idealOddGain
017F 7480              MOV     A,#080H
0181 F0                MOVX    @DPTR,A
0182 A3                INC     DPTR
0183 E4                CLR     A
0184 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1574
0185 7F00              MOV     R7,#00H
0187 7E36              MOV     R6,#036H
0189 7D6E              MOV     R5,#06EH
018B 7C01              MOV     R4,#01H
018D C004              PUSH    AR4
018F C005              PUSH    AR5
0191 C006              PUSH    AR6
0193 C007              PUSH    AR7
0195 7F00              MOV     R7,#00H
0197 7EC4              MOV     R6,#0C4H
0199 7D09              MOV     R5,#09H
019B 7C00              MOV     R4,#00H
019D 900000      R     MOV     DPTR,#?_ADC_DelSig_1_RoundValue?BYTE+04H
01A0 120000      E     LCALL   ?C?LSTXDATA
01A3 D007              POP     AR7
01A5 D006              POP     AR6
01A7 D005              POP     AR5
01A9 D004              POP     AR4
01AB 120000      R     LCALL   _ADC_DelSig_1_RoundValue
01AE 900000      R     MOV     DPTR,#clockDivider
01B1 EE                MOV     A,R6
01B2 F0                MOVX    @DPTR,A
01B3 A3                INC     DPTR
01B4 EF                MOV     A,R7
01B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1575
01B6         ?C0067:
                                           ; SOURCE LINE # 1578
01B6 900000      R     MOV     DPTR,#clockDivider
01B9 74FF              MOV     A,#0FFH
01BB 75F0FF            MOV     B,#0FFH
01BE 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1581
01C1 900000      R     MOV     DPTR,#clockDivider
01C4 E0                MOVX    A,@DPTR
01C5 FE                MOV     R6,A
01C6 A3                INC     DPTR
01C7 E0                MOVX    A,@DPTR
01C8 FF                MOV     R7,A
01C9 7D01              MOV     R5,#01H
01CB 120000      E     LCALL   _ADC_DelSig_1_theACLK_SetDividerRegister
                                           ; SOURCE LINE # 1585
01CE 900000      R     MOV     DPTR,#inputRange
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 71  

01D1 E0                MOVX    A,@DPTR
01D2 FF                MOV     R7,A
01D3 900000      R     MOV     DPTR,#idealGain
01D6 E0                MOVX    A,@DPTR
01D7 FC                MOV     R4,A
01D8 A3                INC     DPTR
01D9 E0                MOVX    A,@DPTR
01DA FD                MOV     R5,A
01DB 900000      R     MOV     DPTR,#idealOddGain
01DE E0                MOVX    A,@DPTR
01DF FA                MOV     R2,A
01E0 A3                INC     DPTR
01E1 E0                MOVX    A,@DPTR
01E2 FB                MOV     R3,A
01E3 900000      R     MOV     DPTR,#resolution
01E6 E0                MOVX    A,@DPTR
01E7 FE                MOV     R6,A
01E8 900000      R     MOV     DPTR,#?_ADC_DelSig_1_GainCompensation?BYTE+05H
01EB EE                MOV     A,R6
01EC F0                MOVX    @DPTR,A
01ED 120000      R     LCALL   _ADC_DelSig_1_GainCompensation
                                           ; SOURCE LINE # 1587
01F0 900000      R     MOV     DPTR,#restart
01F3 E0                MOVX    A,@DPTR
01F4 FF                MOV     R7,A
01F5 EF                MOV     A,R7
01F6 B40106            CJNE    A,#01H,?C0069
                                           ; SOURCE LINE # 1588
                                           ; SOURCE LINE # 1590
01F9 120000      R     LCALL   ADC_DelSig_1_Start
                                           ; SOURCE LINE # 1683
01FC 120000      R     LCALL   ADC_DelSig_1_StartConvert
                                           ; SOURCE LINE # 1684
                                           ; SOURCE LINE # 1685
                                           ; SOURCE LINE # 1686
01FF         ?C0069:
01FF 22                RET     
             ; FUNCTION _ADC_DelSig_1_SelectConfiguration (END)

             ; FUNCTION _ADC_DelSig_1_GainCompensation (BEGIN)
                                           ; SOURCE LINE # 1711
0000 900000      R     MOV     DPTR,#inputRange
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#IdealDecGain
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#IdealOddDecGain
0010 EA                MOV     A,R2
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 EB                MOV     A,R3
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1713
                                           ; SOURCE LINE # 1719
0015 900000      R     MOV     DPTR,#inputRange
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A EF                MOV     A,R7
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 72  

001B 120000      E     LCALL   ?C?CCASE
001E 0000        R     DW      ?C0071
0020 04                DB      04H
0021 0000        R     DW      ?C0074
0023 07                DB      07H
0024 0000        R     DW      ?C0077
0026 08                DB      08H
0027 0000        R     DW      ?C0080
0029 0A                DB      0AH
002A 0000              DW      00H
002C 0000        R     DW      ?C0083
                                           ; SOURCE LINE # 1720
                                           ; SOURCE LINE # 1721
002E         ?C0071:
                                           ; SOURCE LINE # 1724
002E 900000      R     MOV     DPTR,#resolution
0031 E0                MOVX    A,@DPTR
0032 FF                MOV     R7,A
0033 EF                MOV     A,R7
0034 D3                SETB    C
0035 940F              SUBB    A,#0FH
0037 4011              JC      ?C0072
                                           ; SOURCE LINE # 1725
                                           ; SOURCE LINE # 1726
0039 7B0C              MOV     R3,#0CH
003B 7A01              MOV     R2,#01H
003D 7914              MOV     R1,#014H
003F 120000      E     LCALL   _cyread8
0042 900000      R     MOV     DPTR,#flash
0045 EF                MOV     A,R7
0046 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1727
0047 020000      R     LJMP    ?C0070
004A         ?C0072:
                                           ; SOURCE LINE # 1729
                                           ; SOURCE LINE # 1730
004A 7B0C              MOV     R3,#0CH
004C 7A01              MOV     R2,#01H
004E 7918              MOV     R1,#018H
0050 120000      E     LCALL   _cyread8
0053 900000      R     MOV     DPTR,#flash
0056 EF                MOV     A,R7
0057 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1731
                                           ; SOURCE LINE # 1732
0058 020000      R     LJMP    ?C0070
                                           ; SOURCE LINE # 1734
005B         ?C0074:
                                           ; SOURCE LINE # 1737
005B 900000      R     MOV     DPTR,#resolution
005E E0                MOVX    A,@DPTR
005F FF                MOV     R7,A
0060 EF                MOV     A,R7
0061 D3                SETB    C
0062 940F              SUBB    A,#0FH
0064 4010              JC      ?C0075
                                           ; SOURCE LINE # 1738
                                           ; SOURCE LINE # 1739
0066 7B0C              MOV     R3,#0CH
0068 7A01              MOV     R2,#01H
006A 7915              MOV     R1,#015H
006C 120000      E     LCALL   _cyread8
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 73  

006F 900000      R     MOV     DPTR,#flash
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1740
0074 806B              SJMP    ?C0070
0076         ?C0075:
                                           ; SOURCE LINE # 1742
                                           ; SOURCE LINE # 1743
0076 7B0C              MOV     R3,#0CH
0078 7A01              MOV     R2,#01H
007A 7919              MOV     R1,#019H
007C 120000      E     LCALL   _cyread8
007F 900000      R     MOV     DPTR,#flash
0082 EF                MOV     A,R7
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1744
                                           ; SOURCE LINE # 1745
0084 805B              SJMP    ?C0070
                                           ; SOURCE LINE # 1747
0086         ?C0077:
                                           ; SOURCE LINE # 1750
0086 900000      R     MOV     DPTR,#resolution
0089 E0                MOVX    A,@DPTR
008A FF                MOV     R7,A
008B EF                MOV     A,R7
008C D3                SETB    C
008D 940F              SUBB    A,#0FH
008F 4010              JC      ?C0078
                                           ; SOURCE LINE # 1751
                                           ; SOURCE LINE # 1752
0091 7B0C              MOV     R3,#0CH
0093 7A01              MOV     R2,#01H
0095 7916              MOV     R1,#016H
0097 120000      E     LCALL   _cyread8
009A 900000      R     MOV     DPTR,#flash
009D EF                MOV     A,R7
009E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1753
009F 8040              SJMP    ?C0070
00A1         ?C0078:
                                           ; SOURCE LINE # 1755
                                           ; SOURCE LINE # 1756
00A1 7B0C              MOV     R3,#0CH
00A3 7A01              MOV     R2,#01H
00A5 791A              MOV     R1,#01AH
00A7 120000      E     LCALL   _cyread8
00AA 900000      R     MOV     DPTR,#flash
00AD EF                MOV     A,R7
00AE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1757
                                           ; SOURCE LINE # 1758
00AF 8030              SJMP    ?C0070
                                           ; SOURCE LINE # 1760
00B1         ?C0080:
                                           ; SOURCE LINE # 1763
00B1 900000      R     MOV     DPTR,#resolution
00B4 E0                MOVX    A,@DPTR
00B5 FF                MOV     R7,A
00B6 EF                MOV     A,R7
00B7 D3                SETB    C
00B8 940F              SUBB    A,#0FH
00BA 4010              JC      ?C0081
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 74  

                                           ; SOURCE LINE # 1764
                                           ; SOURCE LINE # 1765
00BC 7B0C              MOV     R3,#0CH
00BE 7A01              MOV     R2,#01H
00C0 7917              MOV     R1,#017H
00C2 120000      E     LCALL   _cyread8
00C5 900000      R     MOV     DPTR,#flash
00C8 EF                MOV     A,R7
00C9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1766
00CA 8015              SJMP    ?C0070
00CC         ?C0081:
                                           ; SOURCE LINE # 1768
                                           ; SOURCE LINE # 1769
00CC 7B0C              MOV     R3,#0CH
00CE 7A01              MOV     R2,#01H
00D0 791B              MOV     R1,#01BH
00D2 120000      E     LCALL   _cyread8
00D5 900000      R     MOV     DPTR,#flash
00D8 EF                MOV     A,R7
00D9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1770
                                           ; SOURCE LINE # 1771
00DA 8005              SJMP    ?C0070
                                           ; SOURCE LINE # 1773
00DC         ?C0083:
                                           ; SOURCE LINE # 1774
00DC 900000      R     MOV     DPTR,#flash
00DF E4                CLR     A
00E0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1775
                                           ; SOURCE LINE # 1776
00E1         ?C0070:
                                           ; SOURCE LINE # 1777
00E1 900000      R     MOV     DPTR,#inputRange
00E4 E0                MOVX    A,@DPTR
00E5 FF                MOV     R7,A
00E6 EF                MOV     A,R7
00E7 603B              JZ      ?C0085
00E9 900000      R     MOV     DPTR,#inputRange
00EC E0                MOVX    A,@DPTR
00ED FF                MOV     R7,A
00EE EF                MOV     A,R7
00EF 6401              XRL     A,#01H
00F1 6031              JZ      ?C0085
00F3 900000      R     MOV     DPTR,#inputRange
00F6 E0                MOVX    A,@DPTR
00F7 FF                MOV     R7,A
00F8 EF                MOV     A,R7
00F9 6402              XRL     A,#02H
00FB 6027              JZ      ?C0085
00FD 900000      R     MOV     DPTR,#inputRange
0100 E0                MOVX    A,@DPTR
0101 FF                MOV     R7,A
0102 EF                MOV     A,R7
0103 6403              XRL     A,#03H
0105 601D              JZ      ?C0085
0107 900000      R     MOV     DPTR,#inputRange
010A E0                MOVX    A,@DPTR
010B FF                MOV     R7,A
010C EF                MOV     A,R7
010D 6405              XRL     A,#05H
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 75  

010F 6013              JZ      ?C0085
0111 900000      R     MOV     DPTR,#inputRange
0114 E0                MOVX    A,@DPTR
0115 FF                MOV     R7,A
0116 EF                MOV     A,R7
0117 6406              XRL     A,#06H
0119 6009              JZ      ?C0085
011B 900000      R     MOV     DPTR,#inputRange
011E E0                MOVX    A,@DPTR
011F FF                MOV     R7,A
0120 EF                MOV     A,R7
0121 B4090A            CJNE    A,#09H,?C0084
0124         ?C0085:
                                           ; SOURCE LINE # 1781
                                           ; SOURCE LINE # 1782
0124 900000      R     MOV     DPTR,#Normalised
0127 E4                CLR     A
0128 F0                MOVX    @DPTR,A
0129 A3                INC     DPTR
012A E4                CLR     A
012B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1783
012C 801D              SJMP    ?C0086
012E         ?C0084:
                                           ; SOURCE LINE # 1785
                                           ; SOURCE LINE # 1786
012E 900000      R     MOV     DPTR,#flash
0131 E0                MOVX    A,@DPTR
0132 FF                MOV     R7,A
0133 EF                MOV     A,R7
0134 33                RLC     A
0135 95E0              SUBB    A,ACC
0137 FE                MOV     R6,A
0138 EF                MOV     A,R7
0139 7805              MOV     R0,#05H
013B         ?C0103:
013B C3                CLR     C
013C 33                RLC     A
013D CE                XCH     A,R6
013E 33                RLC     A
013F CE                XCH     A,R6
0140 D8F9              DJNZ    R0,?C0103
0142 FF                MOV     R7,A
0143 900000      R     MOV     DPTR,#Normalised
0146 EE                MOV     A,R6
0147 F0                MOVX    @DPTR,A
0148 A3                INC     DPTR
0149 EF                MOV     A,R7
014A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1787
014B         ?C0086:
                                           ; SOURCE LINE # 1790
014B 900000      R     MOV     DPTR,#Normalised
014E E0                MOVX    A,@DPTR
014F FE                MOV     R6,A
0150 A3                INC     DPTR
0151 E0                MOVX    A,@DPTR
0152 FF                MOV     R7,A
0153 900000      R     MOV     DPTR,#IdealDecGain
0156 E0                MOVX    A,@DPTR
0157 FC                MOV     R4,A
0158 A3                INC     DPTR
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 76  

0159 E0                MOVX    A,@DPTR
015A FD                MOV     R5,A
015B ED                MOV     A,R5
015C 2F                ADD     A,R7
015D FF                MOV     R7,A
015E EC                MOV     A,R4
015F 3E                ADDC    A,R6
0160 FE                MOV     R6,A
0161 900000      R     MOV     DPTR,#GcorValue
0164 EE                MOV     A,R6
0165 F0                MOVX    @DPTR,A
0166 A3                INC     DPTR
0167 EF                MOV     A,R7
0168 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1791
0169 900000      R     MOV     DPTR,#IdealOddDecGain
016C E0                MOVX    A,@DPTR
016D FE                MOV     R6,A
016E A3                INC     DPTR
016F E0                MOVX    A,@DPTR
0170 FF                MOV     R7,A
0171 900000      R     MOV     DPTR,#GcorValue
0174 E0                MOVX    A,@DPTR
0175 FC                MOV     R4,A
0176 A3                INC     DPTR
0177 E0                MOVX    A,@DPTR
0178 FD                MOV     R5,A
0179 120000      E     LCALL   ?C?LIMUL
017C 900000      R     MOV     DPTR,#GcorTmp
017F 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 1792
0182 7B00              MOV     R3,#00H
0184 7A80              MOV     R2,#080H
0186 7900              MOV     R1,#00H
0188 7800              MOV     R0,#00H
018A 900000      R     MOV     DPTR,#GcorTmp
018D 120000      E     LCALL   ?C?LLDXDATA
0190 120000      E     LCALL   ?C?ULDIV
0193 900000      R     MOV     DPTR,#GcorValue
0196 EE                MOV     A,R6
0197 F0                MOVX    @DPTR,A
0198 A3                INC     DPTR
0199 EF                MOV     A,R7
019A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1794
019B 900000      R     MOV     DPTR,#resolution
019E E0                MOVX    A,@DPTR
019F FF                MOV     R7,A
01A0 EF                MOV     A,R7
01A1 C3                CLR     C
01A2 940E              SUBB    A,#0EH
01A4 5037              JNC     ?C0087
                                           ; SOURCE LINE # 1795
                                           ; SOURCE LINE # 1796
01A6 900000      R     MOV     DPTR,#GcorValue
01A9 E0                MOVX    A,@DPTR
01AA FE                MOV     R6,A
01AB A3                INC     DPTR
01AC E0                MOVX    A,@DPTR
01AD FF                MOV     R7,A
01AE 900000      R     MOV     DPTR,#resolution
01B1 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 77  

01B2 FD                MOV     R5,A
01B3 C3                CLR     C
01B4 740E              MOV     A,#0EH
01B6 9D                SUBB    A,R5
01B7 FD                MOV     R5,A
01B8 EF                MOV     A,R7
01B9 A805              MOV     R0,AR5
01BB 08                INC     R0
01BC 8005              SJMP    ?C0105
01BE         ?C0104:
01BE CE                XCH     A,R6
01BF C3                CLR     C
01C0 13                RRC     A
01C1 CE                XCH     A,R6
01C2 13                RRC     A
01C3         ?C0105:
01C3 D8F9              DJNZ    R0,?C0104
01C5 FF                MOV     R7,A
01C6 900000      R     MOV     DPTR,#GcorValue
01C9 EE                MOV     A,R6
01CA F0                MOVX    @DPTR,A
01CB A3                INC     DPTR
01CC EF                MOV     A,R7
01CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1797
01CE 900000      R     MOV     DPTR,#resolution
01D1 E0                MOVX    A,@DPTR
01D2 FF                MOV     R7,A
01D3 EF                MOV     A,R7
01D4 04                INC     A
01D5 FF                MOV     R7,A
01D6 904E0E            MOV     DPTR,#04E0EH
01D9 EF                MOV     A,R7
01DA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1798
01DB 8006              SJMP    ?C0088
01DD         ?C0087:
                                           ; SOURCE LINE # 1800
                                           ; SOURCE LINE # 1802
01DD 904E0E            MOV     DPTR,#04E0EH
01E0 740F              MOV     A,#0FH
01E2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1803
01E3         ?C0088:
                                           ; SOURCE LINE # 1806
01E3 900000      R     MOV     DPTR,#GcorValue
01E6 E0                MOVX    A,@DPTR
01E7 FE                MOV     R6,A
01E8 A3                INC     DPTR
01E9 E0                MOVX    A,@DPTR
01EA FF                MOV     R7,A
01EB 904E0C            MOV     DPTR,#04E0CH
01EE EF                MOV     A,R7
01EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1807
01F0 900000      R     MOV     DPTR,#GcorValue
01F3 E0                MOVX    A,@DPTR
01F4 FE                MOV     R6,A
01F5 A3                INC     DPTR
01F6 E0                MOVX    A,@DPTR
01F7 FF                MOV     R7,A
01F8 EE                MOV     A,R6
C51 COMPILER V9.03   ADC_DELSIG_1                                                          07/11/2012 14:12:33 PAGE 78  

01F9 FF                MOV     R7,A
01FA 7E00              MOV     R6,#00H
01FC 904E0D            MOV     DPTR,#04E0DH
01FF EF                MOV     A,R7
0200 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1811
0201 900000      R     MOV     DPTR,#inputRange
0204 E0                MOVX    A,@DPTR
0205 FF                MOV     R7,A
0206 EF                MOV     A,R7
0207 B4010F            CJNE    A,#01H,?C0090
                                           ; SOURCE LINE # 1812
                                           ; SOURCE LINE # 1813
020A 904E0C            MOV     DPTR,#04E0CH
020D E4                CLR     A
020E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1814
020F 904E0D            MOV     DPTR,#04E0DH
0212 E4                CLR     A
0213 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1815
0214 904E0E            MOV     DPTR,#04E0EH
0217 E4                CLR     A
0218 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1816
                                           ; SOURCE LINE # 1819
0219         ?C0090:
0219 22                RET     
             ; FUNCTION _ADC_DelSig_1_GainCompensation (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3951    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     12     116
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
