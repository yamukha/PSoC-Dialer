C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE LCD_CHAR_1
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\LCD_Char_1.obj
COMPILER INVOKED BY: D:\dev_soft\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Generated_Source\
                    -PSoC3\LCD_Char_1.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\LCD_Char_1.lst) CD DB NOIP OT(2,SIZE) 
                    -INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\LCD_Char_1.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: LCD_Char_1.c
   3          * Version 1.50
   4          *
   5          * Description:
   6          *  This file provides source code for the Character LCD component's API.
   7          *
   8          * Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2010, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "CyLib.h"
  18          #include "LCD_Char_1.h"
  19          
  20          
  21          void LCD_Char_1_Enable(void);
  22          
  23          
  24          uint8 LCD_Char_1_enableState = 0u;
  25          
  26          uint8 LCD_Char_1_initVar = 0u;
  27          
  28          char8 const CYCODE LCD_Char_1_hex[16u] = "0123456789ABCDEF";
  29          
  30          extern uint8 const CYCODE LCD_Char_1_customFonts[];
  31          
  32          
  33          /*******************************************************************************
  34          * Function Name: LCD_Char_1_Init
  35          ********************************************************************************
  36          *
  37          * Summary:
  38          *  Perform initialization required for components normal work.
  39          *  This function initializes the LCD hardware module as follows: 
  40          *        Enable 4-bit interface
  41          *        Clear the display
  42          *        Enable auto cursor increment
  43          *        Resets the cursor to start position
  44          *  Also loads custom character set to LCD if it was defined in the customizer.
  45          *
  46          * Parameters:
  47          *  None.
  48          *
  49          * Return:
  50          *  None.
  51          *
  52          * Reentrant:
  53          *  No.
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 2   

  54          *
  55          *******************************************************************************/
  56          void LCD_Char_1_Init(void)
  57          {
  58   1          /* INIT CODE */
  59   1          CyDelay(40u);                                                        /* Delay 40 ms */
  60   1          LCD_Char_1_WrCntrlNib(LCD_Char_1_DISPLAY_8_BIT_INIT);   /* Selects 8-bit mode */
  61   1          CyDelay(5u);                                                         /* Delay 5 ms */
  62   1          LCD_Char_1_WrCntrlNib(LCD_Char_1_DISPLAY_8_BIT_INIT);   /* Selects 8-bit mode */
  63   1          CyDelay(15u);                                                        /* Delay 15 ms */
  64   1          LCD_Char_1_WrCntrlNib(LCD_Char_1_DISPLAY_8_BIT_INIT);   /* Selects 8-bit mode */
  65   1          CyDelay(1u);                                                         /* Delay 1 ms */
  66   1          LCD_Char_1_WrCntrlNib(LCD_Char_1_DISPLAY_4_BIT_INIT);   /* Selects 4-bit mode */
  67   1          CyDelay(5u);                                                         /* Delay 5 ms */
  68   1      
  69   1          LCD_Char_1_WriteControl(LCD_Char_1_CURSOR_AUTO_INCR_ON);    /* Incr Cursor After Writes */
  70   1          LCD_Char_1_WriteControl(LCD_Char_1_DISPLAY_CURSOR_ON);      /* Turn Display, Cursor ON */
  71   1          LCD_Char_1_WriteControl(LCD_Char_1_DISPLAY_2_LINES_5x10);   /* 2 Lines by 5x10 Characters */
  72   1          LCD_Char_1_WriteControl(LCD_Char_1_DISPLAY_CURSOR_OFF);     /* Turn Display, Cursor OFF */
  73   1          LCD_Char_1_WriteControl(LCD_Char_1_CLEAR_DISPLAY);          /* Clear LCD Screen */
  74   1          LCD_Char_1_WriteControl(LCD_Char_1_DISPLAY_ON_CURSOR_OFF);  /* Turn Display ON, Cursor OFF */
  75   1          LCD_Char_1_WriteControl(LCD_Char_1_RESET_CURSOR_POSITION);  /* Set Cursor to 0,0 */
  76   1          CyDelay(5u);     
  77   1          
  78   1          #if(LCD_Char_1_CUSTOM_CHAR_SET != LCD_Char_1_NONE)
                      LCD_Char_1_LoadCustomFonts(LCD_Char_1_customFonts);
                  #endif /* LCD_Char_1_CUSTOM_CHAR_SET != LCD_Char_1_NONE */
  81   1      }
  82          
  83          
  84          /*******************************************************************************
  85          * Function Name: LCD_Char_1_Enable
  86          ********************************************************************************
  87          *
  88          * Summary:
  89          *  Turns on the display.
  90          *
  91          * Parameters:
  92          *  None.
  93          *
  94          * Return:
  95          *  None.
  96          *
  97          * Reentrant:
  98          *  No.
  99          *
 100          * Theory:
 101          *  This finction has no effect when it called first time as 
 102          *  LCD_Char_1_Init() turns on the LCD.
 103          *
 104          *******************************************************************************/
 105          void LCD_Char_1_Enable(void)
 106          {
 107   1          LCD_Char_1_DisplayOn();
 108   1          LCD_Char_1_enableState = 1u;
 109   1      }
 110          
 111          
 112          /*******************************************************************************
 113          * Function Name: LCD_Char_1_Start
 114          ********************************************************************************
 115          *
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 3   

 116          * Summary:
 117          *  Perform initialization required for components normal work.
 118          *  This function initializes the LCD hardware module as follows: 
 119          *        Enable 4-bit interface
 120          *        Clear the display
 121          *        Enable auto cursor increment
 122          *        Resets the cursor to start position
 123          *  Also loads custom character set to LCD if it was defined in the customizer.
 124          *  If it was not the first call in this project then it just turns on the 
 125          *  display  
 126          *  
 127          *
 128          * Parameters:
 129          *  LCD_Char_1_initVar - global variable. 
 130          *
 131          * Return:
 132          *  LCD_Char_1_initVar - global variable. 
 133          *
 134          * Reentrant:
 135          *  No.
 136          *
 137          *******************************************************************************/
 138          void LCD_Char_1_Start()
 139          {   
 140   1          /* If not initialized then perform initialization */
 141   1          if(LCD_Char_1_initVar == 0u)
 142   1          {
 143   2              LCD_Char_1_Init();
 144   2              LCD_Char_1_initVar = 1u;
 145   2          }
 146   1          
 147   1          /* Turn on the LCD */
 148   1          LCD_Char_1_Enable();
 149   1      }
 150          
 151          
 152          /*******************************************************************************
 153          * Function Name: LCD_Char_1_Stop
 154          ********************************************************************************
 155          *
 156          * Summary:
 157          *  Turns off the display of the LCD screen.
 158          *
 159          * Parameters:
 160          *  None.
 161          *
 162          * Return:
 163          *  None.
 164          *
 165          * Reentrant:
 166          *  No.
 167          *
 168          *******************************************************************************/
 169          void LCD_Char_1_Stop()
 170          {
 171   1          /* Calls LCD Off Macro */
 172   1          LCD_Char_1_DisplayOff();
 173   1          LCD_Char_1_enableState = 0u;
 174   1      }
 175          
 176          
 177          /*******************************************************************************
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 4   

 178          *  Function Name: LCD_Char_1_Position
 179          ********************************************************************************
 180          *
 181          * Summary:
 182          *  Moves active cursor location to a point specified by the input arguments
 183          *
 184          * Parameters:
 185          *  row:     Specific row of LCD module to be written
 186          *  column:  Column of LCD module to be written
 187          *
 188          * Return:
 189          *  None.
 190          *
 191          * Note:
 192          *  This only applies for LCD displays which use the 2X40 address mode.
 193          *  This results in Row 2 offset from row one by 0x28.
 194          *  When there are more than 2 rows, each row must be fewer than 20 characters.
 195          *
 196          *******************************************************************************/
 197          void LCD_Char_1_Position(uint8 row, uint8 column) 
 198          {
 199   1          switch (row)
 200   1          {
 201   2              case 0:
 202   2                  LCD_Char_1_WriteControl(LCD_Char_1_ROW_0_START + column);
 203   2                  break;
 204   2              case 1:
 205   2                  LCD_Char_1_WriteControl(LCD_Char_1_ROW_1_START + column);
 206   2                  break;
 207   2              case 2:
 208   2                  LCD_Char_1_WriteControl(LCD_Char_1_ROW_2_START + column);
 209   2                  break;
 210   2              case 3:
 211   2                  LCD_Char_1_WriteControl(LCD_Char_1_ROW_3_START + column);
 212   2                  break;
 213   2              default:
 214   2                  /* if default case is hit, invalid row argument was passed.*/
 215   2                  break;
 216   2          }
 217   1      }
 218          
 219          
 220          /*******************************************************************************
 221          * Function Name: LCD_Char_1_PrintString
 222          ********************************************************************************
 223          *
 224          * Summary:
 225          *  Writes a zero terminated string to the LCD.
 226          *
 227          * Parameters:
 228          *  string:  pointer to head of char8 array to be written to the LCD module
 229          *
 230          * Return:
 231          *  None.
 232          *
 233          *******************************************************************************/
 234          void LCD_Char_1_PrintString(char8 * string) 
 235          {
 236   1          uint8 indexU8 = 1u;
 237   1          char8 current = *string;
 238   1          
 239   1          /* Until null is reached, print next character */
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 5   

 240   1          while(current != (char8) '\0')
 241   1          {
 242   2              LCD_Char_1_WriteData(current);
 243   2              current = *(string + indexU8); 
 244   2              indexU8++;
 245   2          }
 246   1      }
 247          
 248          
 249          /*******************************************************************************
 250          *  Function Name: LCD_Char_1_PutChar
 251          ********************************************************************************
 252          *
 253          * Summary:
 254          *  Writes a single character to the current cursor position of the LCD module.
 255          *  Custom character names (_CUSTOM_0 through
 256          *  _CUSTOM_7) are acceptable as inputs.
 257          *
 258          * Parameters:
 259          *  character:  character to be written to the LCD
 260          *
 261          * Return:
 262          *  None.
 263          *
 264          *******************************************************************************/
 265          void LCD_Char_1_PutChar(char8 character) 
 266          {
 267   1          LCD_Char_1_WriteData(character);
 268   1      }
 269          
 270          
 271          /*******************************************************************************
 272          *  Function Name: LCD_Char_1_WriteData
 273          ********************************************************************************
 274          *
 275          * Summary:
 276          *  Writes a data byte to the LCD module's Data Display RAM.
 277          *
 278          * Parameters:
 279          *  dByte:  byte to be written to LCD module.
 280          *
 281          * Return:
 282          *  None.
 283          *
 284          *******************************************************************************/
 285          void LCD_Char_1_WriteData(uint8 dByte) 
 286          {
 287   1          uint8 nibble;
 288   1      
 289   1          LCD_Char_1_IsReady();
 290   1          nibble = dByte >> LCD_Char_1_NIBBLE_SHIFT;
 291   1          
 292   1          /* Write high nibble */
 293   1          LCD_Char_1_WrDatNib(nibble);
 294   1      
 295   1          nibble = dByte & LCD_Char_1_NIBBLE_MASK;
 296   1          /* Write low nibble */
 297   1          LCD_Char_1_WrDatNib(nibble);
 298   1      }
 299          
 300          
 301          /*******************************************************************************
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 6   

 302          *  Function Name: LCD_Char_1_WriteControl
 303          ********************************************************************************
 304          *
 305          * Summary:
 306          *  Writes a command byte to the LCD module.
 307          *
 308          * Parameters:
 309          *  cByte:   byte to be written to LCD module.
 310          *
 311          * Return:
 312          *  None.
 313          *
 314          *******************************************************************************/
 315          void LCD_Char_1_WriteControl(uint8 cByte) 
 316          {
 317   1          uint8 nibble;
 318   1          
 319   1          nibble = cByte >> LCD_Char_1_NIBBLE_SHIFT;
 320   1          
 321   1          LCD_Char_1_IsReady();
 322   1          nibble &= LCD_Char_1_NIBBLE_MASK;
 323   1         
 324   1          /* WrCntrlNib(High Nibble) */
 325   1          LCD_Char_1_WrCntrlNib(nibble);
 326   1          nibble = cByte & LCD_Char_1_NIBBLE_MASK;
 327   1         
 328   1          /* WrCntrlNib(Low Nibble) */
 329   1          LCD_Char_1_WrCntrlNib(nibble);
 330   1      }
 331          
 332          
 333          /*******************************************************************************
 334          * Function Name: LCD_Char_1_IsReady
 335          ********************************************************************************
 336          *
 337          * Summary:
 338          *  Polls LCD until the ready bit is set.
 339          *
 340          * Parameters:
 341          *  None.
 342          *
 343          * Return:
 344          *  None.
 345          *
 346          * Note:
 347          *  Changes pins to High-Z.
 348          *
 349          *******************************************************************************/
 350          void LCD_Char_1_IsReady() 
 351          {    
 352   1          uint8 value = 0u;    
 353   1      
 354   1          /* Clear the LCD port*/
 355   1          LCD_Char_1_PORT_DR_REG &= ~LCD_Char_1_PORT_MASK ;
 356   1      
 357   1          /* Change Port to High-Z Status on data pins */
 358   1          
 359   1          /* Mask off data pins to clear old values out */
 360   1          value = LCD_Char_1_PORT_DM0_REG & ~LCD_Char_1_DATA_MASK;
 361   1          /* Load in high Z values for data pins, others unchanged */
 362   1          LCD_Char_1_PORT_DM0_REG = value | (LCD_Char_1_HIGH_Z_DM0 & LCD_Char_1_DATA_MASK);
 363   1      
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 7   

 364   1          /* Mask off data pins to clear old values out */
 365   1          value = LCD_Char_1_PORT_DM1_REG & ~LCD_Char_1_DATA_MASK;
 366   1          /* Load in high Z values for data pins, others unchanged */
 367   1          LCD_Char_1_PORT_DM1_REG = value | (LCD_Char_1_HIGH_Z_DM1 & LCD_Char_1_DATA_MASK);
 368   1      
 369   1          /* Mask off data pins to clear old values out */
 370   1          value = LCD_Char_1_PORT_DM2_REG & ~LCD_Char_1_DATA_MASK;
 371   1          /* Load in high Z values for data pins, others unchanged */
 372   1          LCD_Char_1_PORT_DM2_REG = value | (LCD_Char_1_HIGH_Z_DM2 & LCD_Char_1_DATA_MASK);
 373   1      
 374   1          /* Make sure RS is low */
 375   1          LCD_Char_1_PORT_DR_REG &= ~LCD_Char_1_RS;
 376   1      
 377   1          /* Set R/W high to read */
 378   1          LCD_Char_1_PORT_DR_REG |= LCD_Char_1_RW;
 379   1          
 380   1          do
 381   1          {
 382   2              /* 40 ns delay required before rising Enable and 500ns between neighbour Enables */
 383   2              CyDelayUs(0u);
 384   2              
 385   2              /* Set E high */
 386   2              LCD_Char_1_PORT_DR_REG |= LCD_Char_1_E;
 387   2              
 388   2              /* 360 ns delay the setup time for data pins */
 389   2              CyDelayUs(1u);
 390   2              
 391   2              /* Get port state */
 392   2              value = LCD_Char_1_PORT_PS_REG;
 393   2              
 394   2              /* Set enable low */
 395   2              LCD_Char_1_PORT_DR_REG &= ~LCD_Char_1_E;
 396   2              
 397   2              /* Extract ready bit */
 398   2              value &= LCD_Char_1_READY_BIT;
 399   2              
 400   2              /* Set E high as we in 4-bit interface we need extra oparation */
 401   2              LCD_Char_1_PORT_DR_REG |= LCD_Char_1_E;
 402   2              
 403   2              /* 360 ns delay the setup time for data pins */
 404   2              CyDelayUs(1u);
 405   2                      
 406   2              /* Set enable low */
 407   2              LCD_Char_1_PORT_DR_REG &= ~LCD_Char_1_E;
 408   2      
 409   2              /* Repeat until bit 4 is not zero. */
 410   2              
 411   2          } while (value != 0u);
 412   1      
 413   1          /* Set R/W low to write */
 414   1          LCD_Char_1_PORT_DR_REG &= ~LCD_Char_1_RW;   
 415   1          
 416   1          /* Clear the LCD port*/
 417   1          LCD_Char_1_PORT_DR_REG &= ~LCD_Char_1_PORT_MASK ;
 418   1      
 419   1          /* Change Port to Output (Strong) on data pins */
 420   1          
 421   1          /* Mask off data pins to clear high z values out */
 422   1          value = LCD_Char_1_PORT_DM0_REG & (~LCD_Char_1_DATA_MASK);
 423   1          /* Load in high Z values for data pins, others unchanged */
 424   1          LCD_Char_1_PORT_DM0_REG = value | (LCD_Char_1_STRONG_DM0 & LCD_Char_1_DATA_MASK);
 425   1      
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 8   

 426   1          /* Mask off data pins to clear high z values out */
 427   1          value = LCD_Char_1_PORT_DM1_REG & (~LCD_Char_1_DATA_MASK);
 428   1          /* Load in high Z values for data pins, others unchanged */
 429   1          LCD_Char_1_PORT_DM1_REG = value | (LCD_Char_1_STRONG_DM1 & LCD_Char_1_DATA_MASK);
 430   1      
 431   1          /* Mask off data pins to clear high z values out */
 432   1          value = LCD_Char_1_PORT_DM2_REG & (~LCD_Char_1_DATA_MASK);
 433   1          /* Load in high Z values for data pins, others unchanged */
 434   1          LCD_Char_1_PORT_DM2_REG = value | (LCD_Char_1_STRONG_DM2 & LCD_Char_1_DATA_MASK);
 435   1      }
 436          
 437          
 438          /*******************************************************************************
 439          *  Function Name: LCD_Char_1_WrDatNib
 440          ********************************************************************************
 441          *
 442          * Summary:
 443          *  Writes a data nibble to the LCD module.
 444          *
 445          * Parameters:
 446          *  nibble:  byte containing nibble in least significant nibble to be written
 447          *           to LCD module.
 448          *
 449          * Return:
 450          *  None.
 451          *
 452          *******************************************************************************/
 453          void LCD_Char_1_WrDatNib(uint8 nibble) 
 454          {
 455   1          LCD_Char_1_IsReady();
 456   1              
 457   1              /* RS shoul be low to select data register */
 458   1          LCD_Char_1_PORT_DR_REG |= LCD_Char_1_RS;
 459   1          /* Reset RW for write operation */
 460   1          LCD_Char_1_PORT_DR_REG &= ~LCD_Char_1_RW;
 461   1          
 462   1              /* Two following lines of code will provide us with 40ns delay */
 463   1          /* Clear data pins */
 464   1          LCD_Char_1_PORT_DR_REG &= ~LCD_Char_1_DATA_MASK;            
 465   1          
 466   1          /* Write in data, bring E high*/
 467   1          LCD_Char_1_PORT_DR_REG |= (LCD_Char_1_E | (nibble << LCD_Char_1_PORT_SHIFT));
 468   1          
 469   1          /* Minimum of 230 ns delay */
 470   1          CyDelayUs(1u);
 471   1          
 472   1          LCD_Char_1_PORT_DR_REG &= ~LCD_Char_1_E;
 473   1      }
 474          
 475          
 476          /*******************************************************************************
 477          *  Function Name: LCD_Char_1_WrCntrlNib
 478          ********************************************************************************
 479          *
 480          * Summary:
 481          *  Writes a control nibble to the LCD module.
 482          *
 483          * Parameters:
 484          *  nibble:  byte containing nibble in least significant nibble to be written
 485          *           to LCD module.
 486          *
 487          * Return:
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 9   

 488          *  None.
 489          *
 490          *******************************************************************************/
 491          void LCD_Char_1_WrCntrlNib(uint8 nibble) 
 492          {           
 493   1          /* RS and RW shoul be low to select instruction register and  write operation respectively */
 494   1          LCD_Char_1_PORT_DR_REG &= ~(LCD_Char_1_RS | LCD_Char_1_RW);
 495   1              
 496   1              /* Two following lines of code will give provide ua with 40ns delay */      
 497   1              /* Clear data pins */
 498   1          LCD_Char_1_PORT_DR_REG &= ~LCD_Char_1_DATA_MASK;
 499   1          
 500   1              /* Write control data and set enable signal */
 501   1          LCD_Char_1_PORT_DR_REG |= (LCD_Char_1_E | (nibble << LCD_Char_1_PORT_SHIFT));
 502   1          
 503   1          /* Minimum of 230 ns delay */
 504   1          CyDelayUs(1u);
 505   1          
 506   1          LCD_Char_1_PORT_DR_REG &= ~LCD_Char_1_E;
 507   1      }
 508          
 509          
 510          #if(LCD_Char_1_CONVERSION_ROUTINES == 1u)
 511          
 512              /*******************************************************************************
 513              *  Function Name: LCD_Char_1_PrintHexUint8
 514              ********************************************************************************
 515              *
 516              * Summary:
 517              *  Print a byte as two ASCII characters.
 518              *
 519              * Parameters:  
 520              *  value:  The byte to be printed out as ASCII characters.
 521              *
 522              * Return:
 523              *  None.
 524              *
 525              *******************************************************************************/
 526              void LCD_Char_1_PrintHexUint8(uint8 value) 
 527              {
 528   1              LCD_Char_1_PutChar((char8) LCD_Char_1_hex[value >> LCD_Char_1_BYTE_UPPER_NIBBLE_SHIFT]);
 529   1              LCD_Char_1_PutChar((char8) LCD_Char_1_hex[value & LCD_Char_1_BYTE_LOWER_NIBBLE_MASK]);
 530   1          }
 531              
 532              
 533              /*******************************************************************************
 534              *  Function Name: LCD_Char_1_PrintHexUint16
 535              ********************************************************************************
 536              *
 537              * Summary:
 538              *  Print a uint16 as four ASCII characters.
 539              *
 540              * Parameters:  
 541              *  value:   The uint16 to be printed out as ASCII characters.
 542              *
 543              * Return:
 544              *  None.
 545              *
 546              *******************************************************************************/
 547              void LCD_Char_1_PrintHexUint16(uint16 value) 
 548              {
 549   1              LCD_Char_1_PrintHexUint8(value >> LCD_Char_1_U16_UPPER_BYTE_SHIFT);
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 10  

 550   1              LCD_Char_1_PrintHexUint8(value & LCD_Char_1_U16_LOWER_BYTE_MASK);
 551   1          }
 552              
 553              
 554              /*******************************************************************************
 555              *  Function Name: LCD_Char_1_PrintDecUint16
 556              ********************************************************************************
 557              *
 558              * Summary:
 559              *  Print an uint32 value as a left-justified decimal value.
 560              *
 561              * Parameters:  
 562              *  value:  The byte to be printed out as ASCII characters.
 563              *
 564              * Return:
 565              *  None.
 566              *
 567              *******************************************************************************/
 568              void LCD_Char_1_PrintDecUint16(uint16 value) 
 569              {
 570   1          
 571   1              char8 number[LCD_Char_1_NUMBER_OF_REMAINDERS];
 572   1              char8 temp[LCD_Char_1_NUMBER_OF_REMAINDERS]; 
 573   1          
 574   1              uint8 index = 0u;
 575   1              uint8 numDigits = 0u;
 576   1          
 577   1              
 578   1              /* Load these in reverse order */ 
 579   1              while(value >= LCD_Char_1_TEN)
 580   1              {
 581   2                  temp[index] = (value % LCD_Char_1_TEN) + '0';
 582   2                  value /= LCD_Char_1_TEN;
 583   2                  index++;
 584   2              }
 585   1              
 586   1              temp[index] = (value % LCD_Char_1_TEN) + '0';
 587   1              numDigits = index;
 588   1          
 589   1              /* While index is greater than or equal to zero */
 590   1              while (index != 0xFFu)
 591   1              {
 592   2                  number[numDigits - index] = temp[index];
 593   2                  index--;
 594   2              }
 595   1              
 596   1              /* Null Termination */
 597   1              number[numDigits + 1u] = (char8) 0;
 598   1          
 599   1              /* Print out number */
 600   1              LCD_Char_1_PrintString(number);
 601   1          }
 602          
 603          #endif /* LCD_Char_1_CONVERSION_ROUTINES == 1u */
 604          
 605          
 606          /* [] END OF FILE */
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 11  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION LCD_Char_1_Init (BEGIN)
                                           ; SOURCE LINE # 56
                                           ; SOURCE LINE # 57
                                           ; SOURCE LINE # 59
0000 7F28              MOV     R7,#028H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 60
000B 7F03              MOV     R7,#03H
000D 120000      R     LCALL   _LCD_Char_1_WrCntrlNib
                                           ; SOURCE LINE # 61
0010 7F05              MOV     R7,#05H
0012 7E00              MOV     R6,#00H
0014 7D00              MOV     R5,#00H
0016 7C00              MOV     R4,#00H
0018 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 62
001B 7F03              MOV     R7,#03H
001D 120000      R     LCALL   _LCD_Char_1_WrCntrlNib
                                           ; SOURCE LINE # 63
0020 7F0F              MOV     R7,#0FH
0022 7E00              MOV     R6,#00H
0024 7D00              MOV     R5,#00H
0026 7C00              MOV     R4,#00H
0028 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 64
002B 7F03              MOV     R7,#03H
002D 120000      R     LCALL   _LCD_Char_1_WrCntrlNib
                                           ; SOURCE LINE # 65
0030 7F01              MOV     R7,#01H
0032 7E00              MOV     R6,#00H
0034 7D00              MOV     R5,#00H
0036 7C00              MOV     R4,#00H
0038 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 66
003B 7F02              MOV     R7,#02H
003D 120000      R     LCALL   _LCD_Char_1_WrCntrlNib
                                           ; SOURCE LINE # 67
0040 7F05              MOV     R7,#05H
0042 7E00              MOV     R6,#00H
0044 7D00              MOV     R5,#00H
0046 7C00              MOV     R4,#00H
0048 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 69
004B 7F06              MOV     R7,#06H
004D 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 70
0050 7F0E              MOV     R7,#0EH
0052 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 71
0055 7F2C              MOV     R7,#02CH
0057 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 72
005A 7F08              MOV     R7,#08H
005C 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 73
005F 7F01              MOV     R7,#01H
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 12  

0061 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 74
0064 7F0C              MOV     R7,#0CH
0066 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 75
0069 7F03              MOV     R7,#03H
006B 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 76
006E 7F05              MOV     R7,#05H
0070 7E00              MOV     R6,#00H
0072 7D00              MOV     R5,#00H
0074 7C00              MOV     R4,#00H
0076 120000      E     LCALL   _?CyDelay
                                           ; SOURCE LINE # 81
0079 22                RET     
             ; FUNCTION LCD_Char_1_Init (END)

             ; FUNCTION LCD_Char_1_Enable (BEGIN)
                                           ; SOURCE LINE # 105
                                           ; SOURCE LINE # 106
                                           ; SOURCE LINE # 107
0000 7F0C              MOV     R7,#0CH
0002 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 108
0005 900000      R     MOV     DPTR,#LCD_Char_1_enableState
0008 7401              MOV     A,#01H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 109
000B 22                RET     
             ; FUNCTION LCD_Char_1_Enable (END)

             ; FUNCTION LCD_Char_1_Start (BEGIN)
                                           ; SOURCE LINE # 138
                                           ; SOURCE LINE # 139
                                           ; SOURCE LINE # 141
0000 900000      R     MOV     DPTR,#LCD_Char_1_initVar
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 7009              JNZ     ?C0003
                                           ; SOURCE LINE # 142
                                           ; SOURCE LINE # 143
0008 120000      R     LCALL   LCD_Char_1_Init
                                           ; SOURCE LINE # 144
000B 900000      R     MOV     DPTR,#LCD_Char_1_initVar
000E 7401              MOV     A,#01H
0010 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 145
0011         ?C0003:
                                           ; SOURCE LINE # 148
0011 120000      R     LCALL   LCD_Char_1_Enable
                                           ; SOURCE LINE # 149
0014 22                RET     
             ; FUNCTION LCD_Char_1_Start (END)

             ; FUNCTION LCD_Char_1_Stop (BEGIN)
                                           ; SOURCE LINE # 169
                                           ; SOURCE LINE # 170
                                           ; SOURCE LINE # 172
0000 7F08              MOV     R7,#08H
0002 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 173
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 13  

0005 900000      R     MOV     DPTR,#LCD_Char_1_enableState
0008 E4                CLR     A
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 174
000A 22                RET     
             ; FUNCTION LCD_Char_1_Stop (END)

             ; FUNCTION _LCD_Char_1_Position (BEGIN)
                                           ; SOURCE LINE # 197
0000 900000      R     MOV     DPTR,#row
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#column
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 198
                                           ; SOURCE LINE # 199
000A 900000      R     MOV     DPTR,#row
000D E0                MOVX    A,@DPTR
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 120000      E     LCALL   ?C?CCASE
0013 0000        R     DW      ?C0007
0015 00                DB      00H
0016 0000        R     DW      ?C0008
0018 01                DB      01H
0019 0000        R     DW      ?C0009
001B 02                DB      02H
001C 0000        R     DW      ?C0010
001E 03                DB      03H
001F 0000              DW      00H
0021 0000        R     DW      ?C0012
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 201
0023         ?C0007:
                                           ; SOURCE LINE # 202
0023 900000      R     MOV     DPTR,#column
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 EF                MOV     A,R7
0029 2480              ADD     A,#080H
002B FF                MOV     R7,A
002C 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 203
002F 22                RET     
                                           ; SOURCE LINE # 204
0030         ?C0008:
                                           ; SOURCE LINE # 205
0030 900000      R     MOV     DPTR,#column
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
0035 EF                MOV     A,R7
0036 24C0              ADD     A,#0C0H
0038 FF                MOV     R7,A
0039 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 206
003C 22                RET     
                                           ; SOURCE LINE # 207
003D         ?C0009:
                                           ; SOURCE LINE # 208
003D 900000      R     MOV     DPTR,#column
0040 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 14  

0041 FF                MOV     R7,A
0042 EF                MOV     A,R7
0043 2494              ADD     A,#094H
0045 FF                MOV     R7,A
0046 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 209
0049 22                RET     
                                           ; SOURCE LINE # 210
004A         ?C0010:
                                           ; SOURCE LINE # 211
004A 900000      R     MOV     DPTR,#column
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F EF                MOV     A,R7
0050 24D4              ADD     A,#0D4H
0052 FF                MOV     R7,A
0053 120000      R     LCALL   _LCD_Char_1_WriteControl
                                           ; SOURCE LINE # 212
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 215
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
0056         ?C0012:
0056 22                RET     
             ; FUNCTION _LCD_Char_1_Position (END)

             ; FUNCTION _LCD_Char_1_PrintString (BEGIN)
                                           ; SOURCE LINE # 234
0000 900000      R     MOV     DPTR,#string
0003 120000      E     LCALL   ?C?PSTXDATA
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 236
0006 900000      R     MOV     DPTR,#indexU8
0009 7401              MOV     A,#01H
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 237
000C 900000      R     MOV     DPTR,#string
000F 120000      E     LCALL   ?C?PLDXDATA
0012 120000      E     LCALL   ?C?CLDPTR
0015 FF                MOV     R7,A
0016 900000      R     MOV     DPTR,#current
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
001B         ?C0013:
                                           ; SOURCE LINE # 240
001B 900000      R     MOV     DPTR,#current
001E E0                MOVX    A,@DPTR
001F FF                MOV     R7,A
0020 EF                MOV     A,R7
0021 602A              JZ      ?C0015
                                           ; SOURCE LINE # 241
                                           ; SOURCE LINE # 242
0023 900000      R     MOV     DPTR,#current
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 120000      R     LCALL   _LCD_Char_1_WriteData
                                           ; SOURCE LINE # 243
002B 900000      R     MOV     DPTR,#string
002E 120000      E     LCALL   ?C?PLDXDATA
0031 900000      R     MOV     DPTR,#indexU8
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 15  

0036 E9                MOV     A,R1
0037 2F                ADD     A,R7
0038 F9                MOV     R1,A
0039 E4                CLR     A
003A 3A                ADDC    A,R2
003B FA                MOV     R2,A
003C 120000      E     LCALL   ?C?CLDPTR
003F FF                MOV     R7,A
0040 900000      R     MOV     DPTR,#current
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
0045 900000      R     MOV     DPTR,#indexU8
0048 E0                MOVX    A,@DPTR
0049 04                INC     A
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 245
004B 80CE              SJMP    ?C0013
                                           ; SOURCE LINE # 246
004D         ?C0015:
004D 22                RET     
             ; FUNCTION _LCD_Char_1_PrintString (END)

             ; FUNCTION _LCD_Char_1_PutChar (BEGIN)
                                           ; SOURCE LINE # 265
0000 900000      R     MOV     DPTR,#character
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
0005 900000      R     MOV     DPTR,#character
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 120000      R     LCALL   _LCD_Char_1_WriteData
                                           ; SOURCE LINE # 268
000D 22                RET     
             ; FUNCTION _LCD_Char_1_PutChar (END)

             ; FUNCTION _LCD_Char_1_WriteData (BEGIN)
                                           ; SOURCE LINE # 285
0000 900000      R     MOV     DPTR,#dByte
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 289
0005 120000      R     LCALL   LCD_Char_1_IsReady
                                           ; SOURCE LINE # 290
0008 900000      R     MOV     DPTR,#dByte
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E C4                SWAP    A
000F 540F              ANL     A,#0FH
0011 FF                MOV     R7,A
0012 900000      R     MOV     DPTR,#nibble
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 293
0017 900000      R     MOV     DPTR,#nibble
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C 120000      R     LCALL   _LCD_Char_1_WrDatNib
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 16  

                                           ; SOURCE LINE # 295
001F 900000      R     MOV     DPTR,#dByte
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 EF                MOV     A,R7
0025 540F              ANL     A,#0FH
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#nibble
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 297
002D 900000      R     MOV     DPTR,#nibble
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 120000      R     LCALL   _LCD_Char_1_WrDatNib
                                           ; SOURCE LINE # 298
0035 22                RET     
             ; FUNCTION _LCD_Char_1_WriteData (END)

             ; FUNCTION _LCD_Char_1_WriteControl (BEGIN)
                                           ; SOURCE LINE # 315
0000 900000      R     MOV     DPTR,#cByte
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 319
0005 900000      R     MOV     DPTR,#cByte
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 540F              ANL     A,#0FH
000E FF                MOV     R7,A
000F 900000      R     MOV     DPTR,#nibble
0012 EF                MOV     A,R7
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 321
0014 120000      R     LCALL   LCD_Char_1_IsReady
                                           ; SOURCE LINE # 322
0017 900000      R     MOV     DPTR,#nibble
001A E0                MOVX    A,@DPTR
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D 540F              ANL     A,#0FH
001F FF                MOV     R7,A
0020 900000      R     MOV     DPTR,#nibble
0023 EF                MOV     A,R7
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 325
0025 900000      R     MOV     DPTR,#nibble
0028 E0                MOVX    A,@DPTR
0029 FF                MOV     R7,A
002A 120000      R     LCALL   _LCD_Char_1_WrCntrlNib
                                           ; SOURCE LINE # 326
002D 900000      R     MOV     DPTR,#cByte
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 EF                MOV     A,R7
0033 540F              ANL     A,#0FH
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#nibble
0039 EF                MOV     A,R7
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 17  

003A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 329
003B 900000      R     MOV     DPTR,#nibble
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 120000      R     LCALL   _LCD_Char_1_WrCntrlNib
                                           ; SOURCE LINE # 330
0043 22                RET     
             ; FUNCTION _LCD_Char_1_WriteControl (END)

             ; FUNCTION LCD_Char_1_IsReady (BEGIN)
                                           ; SOURCE LINE # 350
                                           ; SOURCE LINE # 351
                                           ; SOURCE LINE # 352
0000 900000      R     MOV     DPTR,#value
0003 E4                CLR     A
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
0005 905120            MOV     DPTR,#05120H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 5480              ANL     A,#080H
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 360
0010 905122            MOV     DPTR,#05122H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 54F0              ANL     A,#0F0H
0018 FF                MOV     R7,A
0019 900000      R     MOV     DPTR,#value
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 362
001E 900000      R     MOV     DPTR,#value
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 440F              ORL     A,#0FH
0026 FF                MOV     R7,A
0027 905122            MOV     DPTR,#05122H
002A EF                MOV     A,R7
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 365
002C 905123            MOV     DPTR,#05123H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 54F0              ANL     A,#0F0H
0034 FF                MOV     R7,A
0035 900000      R     MOV     DPTR,#value
0038 EF                MOV     A,R7
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 367
003A 900000      R     MOV     DPTR,#value
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F 905123            MOV     DPTR,#05123H
0042 EF                MOV     A,R7
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 18  

0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 370
0044 905124            MOV     DPTR,#05124H
0047 E0                MOVX    A,@DPTR
0048 FF                MOV     R7,A
0049 EF                MOV     A,R7
004A 54F0              ANL     A,#0F0H
004C FF                MOV     R7,A
004D 900000      R     MOV     DPTR,#value
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 372
0052 900000      R     MOV     DPTR,#value
0055 E0                MOVX    A,@DPTR
0056 FF                MOV     R7,A
0057 905124            MOV     DPTR,#05124H
005A EF                MOV     A,R7
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 375
005C 905120            MOV     DPTR,#05120H
005F E0                MOVX    A,@DPTR
0060 FF                MOV     R7,A
0061 EF                MOV     A,R7
0062 54DF              ANL     A,#0DFH
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
0067 905120            MOV     DPTR,#05120H
006A E0                MOVX    A,@DPTR
006B FF                MOV     R7,A
006C EF                MOV     A,R7
006D 4440              ORL     A,#040H
006F FF                MOV     R7,A
0070 EF                MOV     A,R7
0071 F0                MOVX    @DPTR,A
0072         ?C0021:
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 383
0072 7F00              MOV     R7,#00H
0074 7E00              MOV     R6,#00H
0076 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 386
0079 905120            MOV     DPTR,#05120H
007C E0                MOVX    A,@DPTR
007D FF                MOV     R7,A
007E EF                MOV     A,R7
007F 4410              ORL     A,#010H
0081 FF                MOV     R7,A
0082 EF                MOV     A,R7
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
0084 7F01              MOV     R7,#01H
0086 7E00              MOV     R6,#00H
0088 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 392
008B 905121            MOV     DPTR,#05121H
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
0090 900000      R     MOV     DPTR,#value
0093 EF                MOV     A,R7
0094 F0                MOVX    @DPTR,A
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 19  

                                           ; SOURCE LINE # 395
0095 905120            MOV     DPTR,#05120H
0098 E0                MOVX    A,@DPTR
0099 FF                MOV     R7,A
009A EF                MOV     A,R7
009B 54EF              ANL     A,#0EFH
009D FF                MOV     R7,A
009E EF                MOV     A,R7
009F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 398
00A0 900000      R     MOV     DPTR,#value
00A3 E0                MOVX    A,@DPTR
00A4 FF                MOV     R7,A
00A5 EF                MOV     A,R7
00A6 5408              ANL     A,#08H
00A8 FF                MOV     R7,A
00A9 900000      R     MOV     DPTR,#value
00AC EF                MOV     A,R7
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 401
00AE 905120            MOV     DPTR,#05120H
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 EF                MOV     A,R7
00B4 4410              ORL     A,#010H
00B6 FF                MOV     R7,A
00B7 EF                MOV     A,R7
00B8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 404
00B9 7F01              MOV     R7,#01H
00BB 7E00              MOV     R6,#00H
00BD 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 407
00C0 905120            MOV     DPTR,#05120H
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 EF                MOV     A,R7
00C6 54EF              ANL     A,#0EFH
00C8 FF                MOV     R7,A
00C9 EF                MOV     A,R7
00CA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 411
00CB 900000      R     MOV     DPTR,#value
00CE E0                MOVX    A,@DPTR
00CF FF                MOV     R7,A
00D0 EF                MOV     A,R7
00D1 709F              JNZ     ?C0021
                                           ; SOURCE LINE # 414
00D3 905120            MOV     DPTR,#05120H
00D6 E0                MOVX    A,@DPTR
00D7 FF                MOV     R7,A
00D8 EF                MOV     A,R7
00D9 54BF              ANL     A,#0BFH
00DB FF                MOV     R7,A
00DC EF                MOV     A,R7
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 417
00DE 905120            MOV     DPTR,#05120H
00E1 E0                MOVX    A,@DPTR
00E2 FF                MOV     R7,A
00E3 EF                MOV     A,R7
00E4 5480              ANL     A,#080H
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 20  

00E6 FF                MOV     R7,A
00E7 EF                MOV     A,R7
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 422
00E9 905122            MOV     DPTR,#05122H
00EC E0                MOVX    A,@DPTR
00ED FF                MOV     R7,A
00EE EF                MOV     A,R7
00EF 54F0              ANL     A,#0F0H
00F1 FF                MOV     R7,A
00F2 900000      R     MOV     DPTR,#value
00F5 EF                MOV     A,R7
00F6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 424
00F7 900000      R     MOV     DPTR,#value
00FA E0                MOVX    A,@DPTR
00FB FF                MOV     R7,A
00FC 905122            MOV     DPTR,#05122H
00FF EF                MOV     A,R7
0100 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 427
0101 905123            MOV     DPTR,#05123H
0104 E0                MOVX    A,@DPTR
0105 FF                MOV     R7,A
0106 EF                MOV     A,R7
0107 54F0              ANL     A,#0F0H
0109 FF                MOV     R7,A
010A 900000      R     MOV     DPTR,#value
010D EF                MOV     A,R7
010E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 429
010F 900000      R     MOV     DPTR,#value
0112 E0                MOVX    A,@DPTR
0113 FF                MOV     R7,A
0114 EF                MOV     A,R7
0115 440F              ORL     A,#0FH
0117 FF                MOV     R7,A
0118 905123            MOV     DPTR,#05123H
011B EF                MOV     A,R7
011C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 432
011D 905124            MOV     DPTR,#05124H
0120 E0                MOVX    A,@DPTR
0121 FF                MOV     R7,A
0122 EF                MOV     A,R7
0123 54F0              ANL     A,#0F0H
0125 FF                MOV     R7,A
0126 900000      R     MOV     DPTR,#value
0129 EF                MOV     A,R7
012A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 434
012B 900000      R     MOV     DPTR,#value
012E E0                MOVX    A,@DPTR
012F FF                MOV     R7,A
0130 EF                MOV     A,R7
0131 440F              ORL     A,#0FH
0133 FF                MOV     R7,A
0134 905124            MOV     DPTR,#05124H
0137 EF                MOV     A,R7
0138 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 435
0139 22                RET     
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 21  

             ; FUNCTION LCD_Char_1_IsReady (END)

             ; FUNCTION _LCD_Char_1_WrDatNib (BEGIN)
                                           ; SOURCE LINE # 453
0000 900000      R     MOV     DPTR,#nibble
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 455
0005 120000      R     LCALL   LCD_Char_1_IsReady
                                           ; SOURCE LINE # 458
0008 905120            MOV     DPTR,#05120H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4420              ORL     A,#020H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
0013 905120            MOV     DPTR,#05120H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54BF              ANL     A,#0BFH
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 464
001E 905120            MOV     DPTR,#05120H
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 54F0              ANL     A,#0F0H
0026 FF                MOV     R7,A
0027 EF                MOV     A,R7
0028 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 467
0029 905120            MOV     DPTR,#05120H
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#nibble
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 4410              ORL     A,#010H
003A FE                MOV     R6,A
003B EF                MOV     A,R7
003C 4E                ORL     A,R6
003D FF                MOV     R7,A
003E D082              POP     DPL
0040 D083              POP     DPH
0042 EF                MOV     A,R7
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
0044 7F01              MOV     R7,#01H
0046 7E00              MOV     R6,#00H
0048 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 472
004B 905120            MOV     DPTR,#05120H
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 22  

004E E0                MOVX    A,@DPTR
004F FF                MOV     R7,A
0050 EF                MOV     A,R7
0051 54EF              ANL     A,#0EFH
0053 FF                MOV     R7,A
0054 EF                MOV     A,R7
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 473
0056 22                RET     
             ; FUNCTION _LCD_Char_1_WrDatNib (END)

             ; FUNCTION _LCD_Char_1_WrCntrlNib (BEGIN)
                                           ; SOURCE LINE # 491
0000 900000      R     MOV     DPTR,#nibble
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 492
                                           ; SOURCE LINE # 494
0005 905120            MOV     DPTR,#05120H
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 549F              ANL     A,#09FH
000D FF                MOV     R7,A
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 498
0010 905120            MOV     DPTR,#05120H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 54F0              ANL     A,#0F0H
0018 FF                MOV     R7,A
0019 EF                MOV     A,R7
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 501
001B 905120            MOV     DPTR,#05120H
001E C083              PUSH    DPH
0020 C082              PUSH    DPL
0022 E0                MOVX    A,@DPTR
0023 FF                MOV     R7,A
0024 900000      R     MOV     DPTR,#nibble
0027 E0                MOVX    A,@DPTR
0028 FE                MOV     R6,A
0029 EE                MOV     A,R6
002A 4410              ORL     A,#010H
002C FE                MOV     R6,A
002D EF                MOV     A,R7
002E 4E                ORL     A,R6
002F FF                MOV     R7,A
0030 D082              POP     DPL
0032 D083              POP     DPH
0034 EF                MOV     A,R7
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 504
0036 7F01              MOV     R7,#01H
0038 7E00              MOV     R6,#00H
003A 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 506
003D 905120            MOV     DPTR,#05120H
0040 E0                MOVX    A,@DPTR
0041 FF                MOV     R7,A
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 23  

0042 EF                MOV     A,R7
0043 54EF              ANL     A,#0EFH
0045 FF                MOV     R7,A
0046 EF                MOV     A,R7
0047 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 507
0048 22                RET     
             ; FUNCTION _LCD_Char_1_WrCntrlNib (END)

             ; FUNCTION _LCD_Char_1_PrintHexUint8 (BEGIN)
                                           ; SOURCE LINE # 526
0000 900000      R     MOV     DPTR,#value
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 527
                                           ; SOURCE LINE # 528
0005 900000      R     MOV     DPTR,#value
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C4                SWAP    A
000C 540F              ANL     A,#0FH
000E FF                MOV     R7,A
000F EF                MOV     A,R7
0010 900000      R     MOV     DPTR,#LCD_Char_1_hex
0013 93                MOVC    A,@A+DPTR
0014 FF                MOV     R7,A
0015 120000      R     LCALL   _LCD_Char_1_PutChar
                                           ; SOURCE LINE # 529
0018 900000      R     MOV     DPTR,#value
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 540F              ANL     A,#0FH
0020 FF                MOV     R7,A
0021 EF                MOV     A,R7
0022 900000      R     MOV     DPTR,#LCD_Char_1_hex
0025 93                MOVC    A,@A+DPTR
0026 FF                MOV     R7,A
0027 120000      R     LCALL   _LCD_Char_1_PutChar
                                           ; SOURCE LINE # 530
002A 22                RET     
             ; FUNCTION _LCD_Char_1_PrintHexUint8 (END)

             ; FUNCTION _LCD_Char_1_PrintHexUint16 (BEGIN)
                                           ; SOURCE LINE # 547
0000 900000      R     MOV     DPTR,#value
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 548
                                           ; SOURCE LINE # 549
0008 900000      R     MOV     DPTR,#value
000B E0                MOVX    A,@DPTR
000C FE                MOV     R6,A
000D A3                INC     DPTR
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EE                MOV     A,R6
0011 FF                MOV     R7,A
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 24  

0012 7E00              MOV     R6,#00H
0014 120000      R     LCALL   _LCD_Char_1_PrintHexUint8
                                           ; SOURCE LINE # 550
0017 900000      R     MOV     DPTR,#value
001A E0                MOVX    A,@DPTR
001B FE                MOV     R6,A
001C A3                INC     DPTR
001D E0                MOVX    A,@DPTR
001E FF                MOV     R7,A
001F EF                MOV     A,R7
0020 54FF              ANL     A,#0FFH
0022 FF                MOV     R7,A
0023 120000      R     LCALL   _LCD_Char_1_PrintHexUint8
                                           ; SOURCE LINE # 551
0026 22                RET     
             ; FUNCTION _LCD_Char_1_PrintHexUint16 (END)

             ; FUNCTION _LCD_Char_1_PrintDecUint16 (BEGIN)
                                           ; SOURCE LINE # 568
0000 900000      R     MOV     DPTR,#value
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 569
                                           ; SOURCE LINE # 574
0008 900000      R     MOV     DPTR,#index
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 575
000D 900000      R     MOV     DPTR,#numDigits
0010 E4                CLR     A
0011 F0                MOVX    @DPTR,A
0012         ?C0027:
                                           ; SOURCE LINE # 579
0012 900000      R     MOV     DPTR,#value
0015 E0                MOVX    A,@DPTR
0016 FE                MOV     R6,A
0017 A3                INC     DPTR
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A C3                CLR     C
001B EF                MOV     A,R7
001C 940A              SUBB    A,#0AH
001E EE                MOV     A,R6
001F 9400              SUBB    A,#00H
0021 4045              JC      ?C0028
                                           ; SOURCE LINE # 580
                                           ; SOURCE LINE # 581
0023 900000      R     MOV     DPTR,#value
0026 E0                MOVX    A,@DPTR
0027 FE                MOV     R6,A
0028 A3                INC     DPTR
0029 E0                MOVX    A,@DPTR
002A FF                MOV     R7,A
002B 7C00              MOV     R4,#00H
002D 7D0A              MOV     R5,#0AH
002F 120000      E     LCALL   ?C?UIDIV
0032 AF05              MOV     R7,AR5
0034 EF                MOV     A,R7
0035 2430              ADD     A,#030H
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 25  

0037 FF                MOV     R7,A
0038 900000      R     MOV     DPTR,#index
003B E0                MOVX    A,@DPTR
003C FE                MOV     R6,A
003D 7400        R     MOV     A,#LOW temp
003F 2E                ADD     A,R6
0040 F582              MOV     DPL,A
0042 E4                CLR     A
0043 3400        R     ADDC    A,#HIGH temp
0045 F583              MOV     DPH,A
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 582
0049 900000      R     MOV     DPTR,#value
004C E0                MOVX    A,@DPTR
004D FE                MOV     R6,A
004E A3                INC     DPTR
004F E0                MOVX    A,@DPTR
0050 FF                MOV     R7,A
0051 7C00              MOV     R4,#00H
0053 7D0A              MOV     R5,#0AH
0055 120000      E     LCALL   ?C?UIDIV
0058 900000      R     MOV     DPTR,#value
005B EE                MOV     A,R6
005C F0                MOVX    @DPTR,A
005D A3                INC     DPTR
005E EF                MOV     A,R7
005F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 583
0060 900000      R     MOV     DPTR,#index
0063 E0                MOVX    A,@DPTR
0064 04                INC     A
0065 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 584
0066 80AA              SJMP    ?C0027
0068         ?C0028:
                                           ; SOURCE LINE # 586
0068 900000      R     MOV     DPTR,#value
006B E0                MOVX    A,@DPTR
006C FE                MOV     R6,A
006D A3                INC     DPTR
006E E0                MOVX    A,@DPTR
006F FF                MOV     R7,A
0070 7C00              MOV     R4,#00H
0072 7D0A              MOV     R5,#0AH
0074 120000      E     LCALL   ?C?UIDIV
0077 AF05              MOV     R7,AR5
0079 EF                MOV     A,R7
007A 2430              ADD     A,#030H
007C FF                MOV     R7,A
007D 900000      R     MOV     DPTR,#index
0080 E0                MOVX    A,@DPTR
0081 FE                MOV     R6,A
0082 7400        R     MOV     A,#LOW temp
0084 2E                ADD     A,R6
0085 F582              MOV     DPL,A
0087 E4                CLR     A
0088 3400        R     ADDC    A,#HIGH temp
008A F583              MOV     DPH,A
008C EF                MOV     A,R7
008D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 587
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 26  

008E 900000      R     MOV     DPTR,#index
0091 E0                MOVX    A,@DPTR
0092 FF                MOV     R7,A
0093 900000      R     MOV     DPTR,#numDigits
0096 EF                MOV     A,R7
0097 F0                MOVX    @DPTR,A
0098         ?C0029:
                                           ; SOURCE LINE # 590
0098 900000      R     MOV     DPTR,#index
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
009D EF                MOV     A,R7
009E 64FF              XRL     A,#0FFH
00A0 603E              JZ      ?C0030
                                           ; SOURCE LINE # 591
                                           ; SOURCE LINE # 592
00A2 900000      R     MOV     DPTR,#index
00A5 E0                MOVX    A,@DPTR
00A6 FF                MOV     R7,A
00A7 7400        R     MOV     A,#LOW temp
00A9 2F                ADD     A,R7
00AA F582              MOV     DPL,A
00AC E4                CLR     A
00AD 3400        R     ADDC    A,#HIGH temp
00AF F583              MOV     DPH,A
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 900000      R     MOV     DPTR,#index
00B6 E0                MOVX    A,@DPTR
00B7 FE                MOV     R6,A
00B8 EE                MOV     A,R6
00B9 FD                MOV     R5,A
00BA 7C00              MOV     R4,#00H
00BC 900000      R     MOV     DPTR,#numDigits
00BF E0                MOVX    A,@DPTR
00C0 FE                MOV     R6,A
00C1 EE                MOV     A,R6
00C2 FB                MOV     R3,A
00C3 7A00              MOV     R2,#00H
00C5 C3                CLR     C
00C6 EB                MOV     A,R3
00C7 9D                SUBB    A,R5
00C8 FD                MOV     R5,A
00C9 EA                MOV     A,R2
00CA 9C                SUBB    A,R4
00CB FC                MOV     R4,A
00CC 7400        R     MOV     A,#LOW number
00CE 2D                ADD     A,R5
00CF F582              MOV     DPL,A
00D1 7400        R     MOV     A,#HIGH number
00D3 3C                ADDC    A,R4
00D4 F583              MOV     DPH,A
00D6 EF                MOV     A,R7
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 593
00D8 900000      R     MOV     DPTR,#index
00DB E0                MOVX    A,@DPTR
00DC 14                DEC     A
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 594
00DE 80B8              SJMP    ?C0029
00E0         ?C0030:
C51 COMPILER V9.03   LCD_CHAR_1                                                            07/11/2012 14:12:35 PAGE 27  

                                           ; SOURCE LINE # 597
00E0 900000      R     MOV     DPTR,#numDigits
00E3 E0                MOVX    A,@DPTR
00E4 FF                MOV     R7,A
00E5 7400        R     MOV     A,#LOW number+01H
00E7 2F                ADD     A,R7
00E8 F582              MOV     DPL,A
00EA E4                CLR     A
00EB 3400        R     ADDC    A,#HIGH number+01H
00ED F583              MOV     DPH,A
00EF E4                CLR     A
00F0 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 600
00F1 7B01              MOV     R3,#01H
00F3 7A00        R     MOV     R2,#HIGH number
00F5 7900        R     MOV     R1,#LOW number
00F7 120000      R     LCALL   _LCD_Char_1_PrintString
                                           ; SOURCE LINE # 601
00FA 22                RET     
             ; FUNCTION _LCD_Char_1_PrintDecUint16 (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1274    ----
   CONSTANT SIZE    =     16    ----
   XDATA SIZE       =      2      32
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
