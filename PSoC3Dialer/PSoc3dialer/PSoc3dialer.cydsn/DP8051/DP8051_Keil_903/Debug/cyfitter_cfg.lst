C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE CYFITTER_CFG
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.obj
COMPILER INVOKED BY: D:\dev_soft\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Generated_Source\
                    -PSoC3\cyfitter_cfg.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.lst) CD DB NOIP OT(2,SI
                    -ZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\cyfitter_cfg.obj)

line level    source

   1          /*******************************************************************************
   2          * FILENAME: cyfitter_cfg.c
   3          * PSoC Creator 2.0 Component Pack 2
   4          *
   5          * Description:
   6          * This file is automatically generated by PSoC Creator with device 
   7          * initialization code.
   8          *
   9          * THIS FILE SHOULD NOT BE MODIFIED.
  10          *
  11          ********************************************************************************
  12          * Copyright 2011, Cypress Semiconductor Corporation.  All rights reserved.
  13          * You may use this file only in accordance with the license, terms, conditions, 
  14          * disclaimers, and limitations in the end user license agreement accompanying 
  15          * the software package with which this file was provided.
  16          ********************************************************************************/
  17          
  18          #include <string.h>
  19          #include <cytypes.h>
  20          #include <cydevice_trm.h>
  21          #include <cyfitter.h>
  22          #include <CyLib.h>
  23          #include <CyDmac.h>
  24          #include <cyfitter_cfg.h>
  25          
  26          /* Clock startup error codes                                                   */
  27          #define CYCLOCKSTART_NO_ERROR    0
  28          #define CYCLOCKSTART_XTAL_ERROR  1
  29          #define CYCLOCKSTART_32KHZ_ERROR 2
  30          #define CYCLOCKSTART_PLL_ERROR   3
  31          
  32          /*******************************************************************************
  33          * Function Name: CyClockStartupError
  34          ********************************************************************************
  35          * Summary:
  36          *  If an error is encountered during clock configuration (crystal startup error,
  37          *  PLL lock error, etc) the system will end up here.  Unless reimplemented by 
  38          *  the customer, an infinite loop will be encountered.
  39          *
  40          * Parameters:  
  41          *   void
  42          *
  43          * Return:
  44          *   void
  45          *
  46          *******************************************************************************/
  47          #if defined(__GNUC__) || defined(__ARMCC_VERSION)
              __attribute__ ((unused))
              #endif
  50          static void CyClockStartupError(uint8 errorCode)
  51          {
  52   1          /* To remove the compiler warning if errorCode not used.                */
  53   1          errorCode = errorCode;
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 2   

  54   1      
  55   1          /* `#START CyClockStartupError` */
  56   1      
  57   1          /* If we have a clock startup error (bad MHz crystal, PLL lock, etc)    */
  58   1          /* we will end up here to allow the customer to implement something to  */
  59   1          /* deal with the clock condition.                                       */
  60   1      
  61   1          /* `#END` */
  62   1      
  63   1          /* If nothing else, stop here since the clocks have not started         */
  64   1          /* correctly.                                                           */
  65   1          while(1) {}
  66   1      }
  67          
  68          
  69          #undef CYCODE
  70          #undef CYDATA
  71          #undef CYXDATA
  72          #undef CYFAR
  73          #if defined(__C51__) || defined(__CX51__)
  74                  #define CYCODE code
  75                  #define CYDATA data
  76                  #define CYXDATA xdata
  77                  #define CYFAR far
  78          
  79                  #define CYPACKED
  80                  #define CYALIGNED
  81              #define DMAINITSEC
  82                  #define CY_CFG_MEMORY_BARRIER()
  83          
  84                  #ifndef CYCONFIGCPY_DECLARED
                              extern void cymemzero(void CYFAR *addr, uint16 size);
                              extern void cyconfigcpy(uint16 size, const void CYFAR *src, void CYFAR *dest) small;
                              extern void cyconfigcpycode(uint16 size, const void CYCODE *src, void CYFAR *dest);
                      #endif
  89          
  90              #define CYMEMZERO8(a,c) cymemzero((a),(c))
  91              #define CYCONFIGCPY8(d,s,c) cyconfigcpy((c),(s),(d))
  92              #define CYCONFIGCPYCODE8(d,s,c) cyconfigcpycode((c),(s),(d))
  93          
  94                  #define CYMEMZERO(a,c) cymemzero((a),(c))
  95                  #define CYCONFIGCPY(d,s,c) cyconfigcpy((c),(s),(d))
  96                  #define CYCONFIGCPYCODE(d,s,c) cyconfigcpycode((c),(s),(d))
  97          #else
                      #error Unsupported toolchain
              #endif
 100          
 101          /* Defines the layout and meaning of each entry in the cfg_memset_list used for clearing registers */
 102          typedef struct {
 103                  void CYFAR *address;
 104                  uint16 size;
 105          } CYPACKED cfg_memset_t;
 106          
 107          /* Defines the layout and meaning of each entry in the cfg_memcpy_list used for initializing registers */
 108          typedef struct {
 109                  void CYFAR *dest;
 110                  const void CYFAR *src;
 111                  uint16 size;
 112          } CYPACKED cfg_memcpy_t;
 113          
 114          /* TD structure for big-endian systems. Requires 2-byte endian swap */
 115          struct td_t {
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 3   

 116                  uint16 size;
 117                  uint8 flags;
 118                  uint8 next_td_ptr;
 119                  uint16 src;
 120                  uint16 dest;
 121          } CYPACKED;
 122          
 123          /* UDB_1_3_0_CONFIG Address: CYDEV_UCFG_B0_P2_U0_BASE Size (bytes): 128 */
 124          #define BS_UDB_1_3_0_CONFIG_VAL ((const uint8 CYFAR *)0x00080000)
 125          
 126          /* UDB_0_3_0_CONFIG Address: CYDEV_UCFG_B0_P5_U0_BASE Size (bytes): 128 */
 127          #define BS_UDB_0_3_0_CONFIG_VAL ((const uint8 CYFAR *)0x00080080)
 128          
 129          /* UDB_0_3_1_CONFIG Address: CYDEV_UCFG_B0_P5_U1_BASE Size (bytes): 128 */
 130          #define BS_UDB_0_3_1_CONFIG_VAL ((const uint8 CYFAR *)0x00080100)
 131          
 132          /* UDB_1_1_1_CONFIG Address: CYDEV_UCFG_B1_P3_U0_BASE Size (bytes): 128 */
 133          #define BS_UDB_1_1_1_CONFIG_VAL ((const uint8 CYFAR *)0x00080180)
 134          
 135          /* UDB_1_1_0_CONFIG Address: CYDEV_UCFG_B1_P3_U1_BASE Size (bytes): 128 */
 136          #define BS_UDB_1_1_0_CONFIG_VAL ((const uint8 CYFAR *)0x00080200)
 137          
 138          /* UWRK_B0_WRK_STATCTL_BITS Address: CYDEV_UWRK_UWRK8_B0_BASE + 0x00000070 Size (bytes): 32 */
 139          #define BS_UWRK_B0_WRK_STATCTL_BITS_VAL ((const uint8 CYFAR *)0x00080280)
 140          
 141          /* UWRK_B1_WRK_STATCTL_BITS Address: CYDEV_UWRK_UWRK8_B1_BASE + 0x00000070 Size (bytes): 32 */
 142          #define BS_UWRK_B1_WRK_STATCTL_BITS_VAL ((const uint8 CYFAR *)0x000802A0)
 143          
 144          /* DSISWITCH_0_0 Address: CYDEV_UCFG_DSI13_BASE Size (bytes): 128 */
 145          #define BS_DSISWITCH_0_0_VAL ((const uint8 CYFAR *)0x000802C0)
 146          
 147          /* DSI0_0_HV_ROUTING Address: CYDEV_UCFG_DSI13_BASE + 0x00000080 Size (bytes): 128 */
 148          #define BS_DSI0_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080340)
 149          
 150          /* DSI0_1_HV_ROUTING Address: CYDEV_UCFG_DSI12_BASE + 0x00000080 Size (bytes): 128 */
 151          #define BS_DSI0_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000803C0)
 152          
 153          /* DSI0_2_HV_ROUTING Address: CYDEV_UCFG_DSI7_BASE + 0x00000080 Size (bytes): 128 */
 154          #define BS_DSI0_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080440)
 155          
 156          /* DSI0_3_HV_ROUTING Address: CYDEV_UCFG_DSI6_BASE + 0x00000080 Size (bytes): 128 */
 157          #define BS_DSI0_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000804C0)
 158          
 159          /* DSI0_4_HV_ROUTING Address: CYDEV_UCFG_DSI5_BASE + 0x00000080 Size (bytes): 128 */
 160          #define BS_DSI0_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080540)
 161          
 162          /* DSISWITCH_0_5 Address: CYDEV_UCFG_DSI4_BASE Size (bytes): 128 */
 163          #define BS_DSISWITCH_0_5_VAL ((const uint8 CYFAR *)0x000805C0)
 164          
 165          /* DSI0_5_HV_ROUTING Address: CYDEV_UCFG_DSI4_BASE + 0x00000080 Size (bytes): 128 */
 166          #define BS_DSI0_5_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080640)
 167          
 168          /* UDB_2_0_HV_ROUTING Address: CYDEV_UCFG_B1_P2_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 169          #define BS_UDB_2_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000806C0)
 170          
 171          /* UDB_1_1_HV_ROUTING Address: CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 172          #define BS_UDB_1_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080740)
 173          
 174          /* UDBSWITCH_1_1 Address: CYDEV_UCFG_B1_P3_ROUTE_BASE Size (bytes): 128 */
 175          #define BS_UDBSWITCH_1_1_VAL ((const uint8 CYFAR *)0x000807C0)
 176          
 177          /* UDB_2_1_HV_ROUTING Address: CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 4   

 178          #define BS_UDB_2_1_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080840)
 179          
 180          /* UDB_1_2_HV_ROUTING Address: CYDEV_UCFG_B0_P4_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 181          #define BS_UDB_1_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x000808C0)
 182          
 183          /* UDB_2_2_HV_ROUTING Address: CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 184          #define BS_UDB_2_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080940)
 185          
 186          /* UDBSWITCH_0_3 Address: CYDEV_UCFG_B0_P5_ROUTE_BASE Size (bytes): 128 */
 187          #define BS_UDBSWITCH_0_3_VAL ((const uint8 CYFAR *)0x000809C0)
 188          
 189          /* UDB_1_3_HV_ROUTING Address: CYDEV_UCFG_B0_P5_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 190          #define BS_UDB_1_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080A40)
 191          
 192          /* UDBSWITCH_1_3 Address: CYDEV_UCFG_B0_P2_ROUTE_BASE Size (bytes): 128 */
 193          #define BS_UDBSWITCH_1_3_VAL ((const uint8 CYFAR *)0x00080AC0)
 194          
 195          /* UDB_2_3_HV_ROUTING Address: CYDEV_UCFG_B0_P2_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 196          #define BS_UDB_2_3_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080B40)
 197          
 198          /* UDB_1_4_HV_ROUTING Address: CYDEV_UCFG_B0_P6_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 199          #define BS_UDB_1_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080BC0)
 200          
 201          /* UDB_2_4_HV_ROUTING Address: CYDEV_UCFG_B0_P1_ROUTE_BASE + 0x00000080 Size (bytes): 128 */
 202          #define BS_UDB_2_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080C40)
 203          
 204          /* DSISWITCH_1_0 Address: CYDEV_UCFG_DSI9_BASE Size (bytes): 128 */
 205          #define BS_DSISWITCH_1_0_VAL ((const uint8 CYFAR *)0x00080CC0)
 206          
 207          /* DSI3_0_HV_ROUTING Address: CYDEV_UCFG_DSI9_BASE + 0x00000080 Size (bytes): 128 */
 208          #define BS_DSI3_0_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080D40)
 209          
 210          /* DSI3_2_HV_ROUTING Address: CYDEV_UCFG_DSI3_BASE + 0x00000080 Size (bytes): 128 */
 211          #define BS_DSI3_2_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080DC0)
 212          
 213          /* DSISWITCH_1_4 Address: CYDEV_UCFG_DSI1_BASE Size (bytes): 128 */
 214          #define BS_DSISWITCH_1_4_VAL ((const uint8 CYFAR *)0x00080E40)
 215          
 216          /* DSI3_4_HV_ROUTING Address: CYDEV_UCFG_DSI1_BASE + 0x00000080 Size (bytes): 128 */
 217          #define BS_DSI3_4_HV_ROUTING_VAL ((const uint8 CYFAR *)0x00080EC0)
 218          
 219          /* UCFG_BCTL1 Address: CYREG_BCTL1_MDCLK_EN Size (bytes): 16 */
 220          #define BS_UCFG_BCTL1_VAL ((const uint8 CYFAR *)0x00080F40)
 221          
 222          /* UCFG_BCTL0 Address: CYREG_BCTL0_MDCLK_EN Size (bytes): 16 */
 223          #define BS_UCFG_BCTL0_VAL ((const uint8 CYFAR *)0x00080F50)
 224          
 225          /* IOPINS0_0 Address: CYREG_PRT0_DM0 Size (bytes): 8 */
 226          #define BS_IOPINS0_0_VAL ((const uint8 CYFAR *)0x00080F60)
 227          
 228          /* IOPINS0_1 Address: CYREG_PRT1_DM0 Size (bytes): 8 */
 229          #define BS_IOPINS0_1_VAL ((const uint8 CYFAR *)0x00080F68)
 230          
 231          /* IOPINS0_2 Address: CYREG_PRT2_DM0 Size (bytes): 8 */
 232          #define BS_IOPINS0_2_VAL ((const uint8 CYFAR *)0x00080F70)
 233          
 234          /* IOPINS0_4 Address: CYREG_PRT4_DM0 Size (bytes): 8 */
 235          #define BS_IOPINS0_4_VAL ((const uint8 CYFAR *)0x00080F78)
 236          
 237          /* IOPORT_1 Address: CYDEV_PRTDSI_PRT1_BASE Size (bytes): 7 */
 238          #define BS_IOPORT_1_VAL ((const uint8 CYFAR *)0x00080F80)
 239          
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 5   

 240          /* IOPORT_2 Address: CYDEV_PRTDSI_PRT2_BASE Size (bytes): 7 */
 241          #define BS_IOPORT_2_VAL ((const uint8 CYFAR *)0x00080F88)
 242          
 243          /* CYDEV_CLKDIST_ACFG0_CFG0 Address: CYREG_CLKDIST_ACFG0_CFG0 Size (bytes): 4 */
 244          #define BS_CYDEV_CLKDIST_ACFG0_CFG0_VAL ((const uint8 CYFAR *)0x00080F90)
 245          
 246          
 247          /* PHUB_CH1_CFGMEM_CFG0/1 initialization data */
 248          static const uint8 CYCODE CH1_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
             -;
 249          
 250          /* PHUB_CH2_CFGMEM_CFG0/1 initialization data */
 251          static const uint8 CYCODE CH2_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00 }
             -;
 252          
 253          /* PHUB_CH5_CFGMEM_CFG0/1 initialization data */
 254          static const uint8 CYCODE CH5_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00 }
             -;
 255          
 256          /* PHUB_CH6_CFGMEM_CFG0/1 initialization data */
 257          static const uint8 CYCODE CH6_ADDR_DATA0[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x01, 0x00 }
             -;
 258          
 259          /* Initialization data for each DMA channel's TD registers */
 260          static const uint8 CYCODE DMA_TD_START_CMD[] DMAINITSEC = { 0x01, 0x00, 0x00, 0x00, 0x01 };
 261          
 262          static uint32 CYXDATA DMA_ZERO_VAL CYALIGNED;
 263          
 264          /* This table holds all of the initialization data necessary for the DMA
 265             process to transfer data from the source location to the destination. */
 266          static const struct td_t CYCODE CFG_TD_LIST0[] DMAINITSEC = {
 267          /* Size, Flags, Next, Source, Destination */
 268                  { 8, 0x23, 0x02, (uint16)(&CH1_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM1_CFG0) },        /* TD 1 */
 269                  { 8, 0x23, 0x03, (uint16)(&CH2_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM2_CFG0) },        /* TD 2 */
 270                  { 8, 0x23, 0x04, (uint16)(&CH5_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM5_CFG0) },        /* TD 3 */
 271                  { 8, 0x23, 0x05, (uint16)(&CH6_ADDR_DATA0), (uint16)(CYREG_PHUB_CFGMEM6_CFG0) },        /* TD 4 */
 272                  { 5, 0x23, 0x06, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH1_BASIC_CFG) },     /* TD 5 */
 273                  { 5, 0x23, 0x07, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH2_BASIC_CFG) },     /* TD 6 */
 274                  { 5, 0x23, 0x08, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH5_BASIC_CFG) },     /* TD 7 */
 275                  { 5, 0x23, 0xFF, (uint16)(&DMA_TD_START_CMD), (uint16)(CYREG_PHUB_CH6_BASIC_CFG) },     /* TD 8 */
 276                  { 16, 0x22, 0x0A, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT3_DR) },   /* TD 9 */
 277                  { 32, 0x22, 0x0B, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT5_DR) },   /* TD 10 */
 278                  { 16, 0x22, 0x0C, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT12_DR) },  /* TD 11 */
 279                  { 16, 0x22, 0xFF, (uint16)(&DMA_ZERO_VAL), (uint16)(CYREG_PRT15_DR) },  /* TD 12 */
 280                  { 896, 0x22, 0x0E, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P0_U0_BASE) },       /* TD 13 */
 281                  { 128, 0x22, 0x0F, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P2_U1_BASE) },       /* TD 14 */
 282                  { 384, 0x22, 0x10, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P3_U0_BASE) },       /* TD 15 */
 283                  { 384, 0x22, 0x11, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P4_U0_BASE) },       /* TD 16 */
 284                  { 384, 0x22, 0x12, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P6_U0_BASE) },       /* TD 17 */
 285                  { 512, 0x22, 0x13, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B0_P7_U0_BASE) },       /* TD 18 */
 286                  { 384, 0x22, 0x14, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P2_U0_BASE) },       /* TD 19 */
 287                  { 384, 0x22, 0x15, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P4_U0_BASE) },       /* TD 20 */
 288                  { 512, 0x22, 0x16, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_B1_P5_U0_BASE) },       /* TD 21 */
 289                  { 256, 0x22, 0x17, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI0_BASE) },   /* TD 22 */
 290                  { 384, 0x22, 0x18, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI2_BASE) },   /* TD 23 */
 291                  { 128, 0x22, 0x19, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE) },   /* TD 24 */
 292                  { 128, 0x22, 0x1A, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE) },   /* TD 25 */
 293                  { 128, 0x22, 0x1B, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE) },   /* TD 26 */
 294                  { 256, 0x22, 0x1C, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI8_BASE) },   /* TD 27 */
 295                  { 128, 0x22, 0xFF, (uint16)(&DMA_ZERO_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE) },  /* TD 28 */
 296                  { 32, 0x23, 0x1E, (uint16)(BS_UWRK_B0_WRK_STATCTL_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B0_BASE + 0x000000
             -70) },        /* TD 29 */
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 6   

 297                  { 32, 0x23, 0xFF, (uint16)(BS_UWRK_B1_WRK_STATCTL_BITS_VAL), (uint16)(CYDEV_UWRK_UWRK8_B1_BASE + 0x000000
             -70) },        /* TD 30 */
 298                  { 128, 0x23, 0x20, (uint16)(BS_UDB_1_3_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P2_U0_BASE) },     /* TD 31 */
 299                  { 128, 0x23, 0x21, (uint16)(BS_UDB_0_3_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P5_U0_BASE) },     /* TD 32 */
 300                  { 128, 0x23, 0x22, (uint16)(BS_UDB_0_3_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B0_P5_U1_BASE) },     /* TD 33 */
 301                  { 128, 0x23, 0x23, (uint16)(BS_UDB_1_1_1_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P3_U0_BASE) },     /* TD 34 */
 302                  { 128, 0x23, 0x24, (uint16)(BS_UDB_1_1_0_CONFIG_VAL), (uint16)(CYDEV_UCFG_B1_P3_U1_BASE) },     /* TD 35 */
 303                  { 128, 0x23, 0x25, (uint16)(BS_DSISWITCH_0_0_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE) },   /* TD 36 */
 304                  { 128, 0x23, 0x26, (uint16)(BS_DSI0_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI13_BASE + 0x00000080) },  /*
             - TD 37 */
 305                  { 128, 0x23, 0x27, (uint16)(BS_DSI0_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI12_BASE + 0x00000080) },  /*
             - TD 38 */
 306                  { 128, 0x23, 0x28, (uint16)(BS_DSI0_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI7_BASE + 0x00000080) },   /* 
             -TD 39 */
 307                  { 128, 0x23, 0x29, (uint16)(BS_DSI0_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI6_BASE + 0x00000080) },   /* 
             -TD 40 */
 308                  { 128, 0x23, 0x2A, (uint16)(BS_DSI0_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI5_BASE + 0x00000080) },   /* 
             -TD 41 */
 309                  { 128, 0x23, 0x2B, (uint16)(BS_DSISWITCH_0_5_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE) },    /* TD 42 */
 310                  { 128, 0x23, 0x2C, (uint16)(BS_DSI0_5_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI4_BASE + 0x00000080) },   /* 
             -TD 43 */
 311                  { 128, 0x23, 0x2D, (uint16)(BS_UDB_2_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P2_ROUTE_BASE + 0x00000080
             -) },        /* TD 44 */
 312                  { 128, 0x23, 0x2E, (uint16)(BS_UDB_1_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P4_ROUTE_BASE + 0x00000080
             -) },        /* TD 45 */
 313                  { 128, 0x23, 0x2F, (uint16)(BS_UDBSWITCH_1_1_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE) },     /* TD 46 */
 314                  { 128, 0x23, 0x30, (uint16)(BS_UDB_2_1_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B1_P3_ROUTE_BASE + 0x00000080
             -) },        /* TD 47 */
 315                  { 128, 0x23, 0x31, (uint16)(BS_UDB_1_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P4_ROUTE_BASE + 0x00000080
             -) },        /* TD 48 */
 316                  { 128, 0x23, 0x32, (uint16)(BS_UDB_2_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P3_ROUTE_BASE + 0x00000080
             -) },        /* TD 49 */
 317                  { 128, 0x23, 0x33, (uint16)(BS_UDBSWITCH_0_3_VAL), (uint16)(CYDEV_UCFG_B0_P5_ROUTE_BASE) },     /* TD 50 */
 318                  { 128, 0x23, 0x34, (uint16)(BS_UDB_1_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P5_ROUTE_BASE + 0x00000080
             -) },        /* TD 51 */
 319                  { 128, 0x23, 0x35, (uint16)(BS_UDBSWITCH_1_3_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE) },     /* TD 52 */
 320                  { 128, 0x23, 0x36, (uint16)(BS_UDB_2_3_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P2_ROUTE_BASE + 0x00000080
             -) },        /* TD 53 */
 321                  { 128, 0x23, 0x37, (uint16)(BS_UDB_1_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P6_ROUTE_BASE + 0x00000080
             -) },        /* TD 54 */
 322                  { 128, 0x23, 0x38, (uint16)(BS_UDB_2_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_B0_P1_ROUTE_BASE + 0x00000080
             -) },        /* TD 55 */
 323                  { 128, 0x23, 0x39, (uint16)(BS_DSISWITCH_1_0_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE) },    /* TD 56 */
 324                  { 128, 0x23, 0x3A, (uint16)(BS_DSI3_0_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI9_BASE + 0x00000080) },   /* 
             -TD 57 */
 325                  { 128, 0x23, 0x3B, (uint16)(BS_DSI3_2_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI3_BASE + 0x00000080) },   /* 
             -TD 58 */
 326                  { 128, 0x23, 0x3C, (uint16)(BS_DSISWITCH_1_4_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE) },    /* TD 59 */
 327                  { 128, 0x23, 0x3D, (uint16)(BS_DSI3_4_HV_ROUTING_VAL), (uint16)(CYDEV_UCFG_DSI1_BASE + 0x00000080) },   /* 
             -TD 60 */
 328                  { 16, 0x23, 0x3E, (uint16)(BS_UCFG_BCTL1_VAL), (uint16)(CYREG_BCTL1_MDCLK_EN) },        /* TD 61 */
 329                  { 16, 0x23, 0xFF, (uint16)(BS_UCFG_BCTL0_VAL), (uint16)(CYREG_BCTL0_MDCLK_EN) },        /* TD 62 */
 330          };
 331          /*******************************************************************************
 332          * Function Name: cfg_dma_init
 333          ********************************************************************************
 334          * Summary:
 335          *  This function is used to copy device configuration data from constant values
 336          *  stored in memory into the proper chip configuration registers using DMA.  It
 337          *  pulls data out of the CFG_TD_LISTs to know exactly how/what to configure.
 338          *
 339          * Parameters:  
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 7   

 340          *   void
 341          *
 342          * Return:
 343          *   void
 344          *
 345          *******************************************************************************/
 346          static void cfg_dma_init(void)
 347          {
 348   1              DMA_ZERO_VAL = 0u;
 349   1              DMAC_CFGMEM[0].CFG0[0] = 0x10;          /* set burstcount */
 350   1              DMAC_CH[0].basic_cfg[0] = 0x01u;        /* enable channel0 */
 351   1              DMAC_CH[0].basic_status[1] = 0;         /* set channel0's first td to 0 */
 352   1              
 353   1              DMAC_TDMEM[0].TD0[2] = 0x01;            /* set td0's next td to 1 */
 354   1              DMAC_TDMEM[0].TD0[3] = 0xA3;            /* set td0's flags */
 355   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD0[0], 62*8);                                    /* set td0's size */
 356   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD1[0], (uint16)(uint32)CFG_TD_LIST0);    /* set td0's src addr */
 357   1              CY_SET_REG16((reg16 *) &DMAC_TDMEM[0].TD1[2], CYDEV_PHUB_TDMEM1_BASE);  /* set td0's dst addr */
 358   1              CY_SET_REG16((reg16 *) &DMAC_CFGMEM[0].CFG1[0], (uint16)(CYDEV_FLS_BASE >> 16));                                /* set ch0's src high
             - addr */
 359   1              CY_SET_REG16((reg16 *) &DMAC_CFGMEM[0].CFG1[2], (uint16)(CYDEV_PHUB_TDMEM1_BASE >> 16));                                /* set ch0's 
             -dst high addr */
 360   1              DMAC_CH[1].basic_status[1] = 0x09; /* First TD = 9 */
 361   1              DMAC_CH[2].basic_status[1] = 0x0D; /* First TD = 13 */
 362   1              DMAC_CH[5].basic_status[1] = 0x1D; /* First TD = 29 */
 363   1              DMAC_CH[6].basic_status[1] = 0x1F; /* First TD = 31 */
 364   1      
 365   1              CY_CFG_MEMORY_BARRIER();
 366   1              DMAC_CH[0].action[0] = CPU_REQ;    /* initiate the DMA transfer */
 367   1              CY_CFG_MEMORY_BARRIER();
 368   1      
 369   1              /* Wait for all DMA transfers to complete */
 370   1              while((CY_GET_REG8(CYREG_PHUB_CH0_BASIC_STATUS) & 0x01u)){}
 371   1              while((CY_GET_REG8(CYREG_PHUB_CH1_BASIC_STATUS) & 0x01u)){}
 372   1              while((CY_GET_REG8(CYREG_PHUB_CH2_BASIC_STATUS) & 0x01u)){}
 373   1              while((CY_GET_REG8(CYREG_PHUB_CH5_BASIC_STATUS) & 0x01u)){}
 374   1              while((CY_GET_REG8(CYREG_PHUB_CH6_BASIC_STATUS) & 0x01u)){}
 375   1      
 376   1              /* DMA initialization is complete, disable all channels */
 377   1              CY_SET_REG8(CYREG_PHUB_CH0_BASIC_CFG, 0x00);
 378   1              CY_SET_REG8(CYREG_PHUB_CH1_BASIC_CFG, 0x00);
 379   1              CY_SET_REG8(CYREG_PHUB_CH2_BASIC_CFG, 0x00);
 380   1              CY_SET_REG8(CYREG_PHUB_CH5_BASIC_CFG, 0x00);
 381   1              CY_SET_REG8(CYREG_PHUB_CH6_BASIC_CFG, 0x00);
 382   1      
 383   1      }
 384          /*******************************************************************************
 385          * Function Name: ClockSetup
 386          ********************************************************************************
 387          *
 388          * Summary:
 389          *  Performs the initialization of all of the clocks in the device based on the
 390          *  settings in the Clock tab of the DWR.  This includes enabling the requested
 391          *  clocks and setting the necessary dividers to produce the desired frequency. 
 392          *
 393          * Parameters:
 394          *  void
 395          *
 396          * Return:
 397          *  void
 398          *
 399          *******************************************************************************/
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 8   

 400          static void ClockSetup(void)
 401          {
 402   1              reg32  timeout;
 403   1              reg32* timeout_p = &timeout;
 404   1              reg8   pllLock;
 405   1      
 406   1      
 407   1              /* Configure Digital Clocks based on settings from Clock DWR */
 408   1              CY_SET_XTND_REG24((void CYFAR *)(CYREG_CLKDIST_DCFG0_CFG0), 0x190000);
 409   1              CY_SET_XTND_REG24((void CYFAR *)(CYREG_CLKDIST_DCFG1_CFG0), 0x190000);
 410   1              CY_SET_XTND_REG24((void CYFAR *)(CYREG_CLKDIST_DCFG2_CFG0), 0x180012);
 411   1      
 412   1              /* Configure Analog Clocks based on settings from Clock DWR */
 413   1              CYCONFIGCPY((void CYFAR *)(CYREG_CLKDIST_ACFG0_CFG0), (void CYFAR *)(BS_CYDEV_CLKDIST_ACFG0_CFG0_VAL), 4)
             -;
 414   1      
 415   1              /* Configure ILO based on settings from Clock DWR */
 416   1              CY_SET_REG8((void CYXDATA *)(CYREG_SLOWCLK_ILO_CR0), 0x02);
 417   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_CR), 0x08);
 418   1      
 419   1              /* Configure IMO based on settings from Clock DWR */
 420   1              CY_SET_REG8((void CYXDATA *)(CYREG_FASTCLK_IMO_CR), 0x03);
 421   1              CY_SET_REG8((void CYXDATA *)(CYREG_IMO_TR1), (CY_GET_XTND_REG8(CYREG_FLSHID_CUST_TABLES_IMO_3MHZ)));
 422   1      
 423   1              /* Configure PLL based on settings from Clock DWR */
 424   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_P), 0x0008);
 425   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_FASTCLK_PLL_CFG0), 0x1051);
 426   1              /* Wait up to 250us for the PLL to lock */
 427   1              pllLock = 0;
 428   1              for (timeout = 250 / 10; *timeout_p && (pllLock != 0x03u); timeout--) { 
 429   2                      pllLock = 0x03u & ((pllLock << 1) | ((CY_GET_REG8(CYREG_FASTCLK_PLL_SR) & 0x01u) >> 0));
 430   2                      CyDelayCycles(10 * 48); /* Delay 10us based on 48MHz clock */
 431   2              }
 432   1      
 433   1              /* Configure Bus/Master Clock based on settings from Clock DWR */
 434   1              CY_SET_XTND_REG16((void CYFAR *)(CYREG_CLKDIST_MSTR0), 0x0103);
 435   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00);
 436   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x07);
 437   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG0), 0x00);
 438   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_BCFG2), 0x48);
 439   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_MSTR0), 0x00);
 440   1              CY_SET_REG8((void CYXDATA *)(CYREG_CLKDIST_LD), 0x02);
 441   1      
 442   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG2), ((CY_GET_REG8(CYREG_PM_ACT_CFG2) | 0x07)));
 443   1              CY_SET_REG8((void CYXDATA *)(CYREG_PM_ACT_CFG1), ((CY_GET_REG8(CYREG_PM_ACT_CFG1) | 0x01)));
 444   1      }
 445          
 446          
 447          /* Analog API Functions */
 448          
 449          /*******************************************************************************
 450          * Function Name: AnalogSetDefault
 451          ********************************************************************************
 452          *
 453          * Summary:
 454          *  Sets up the analog portions of the chip to default values based on chip
 455          *  configuration options from the project.
 456          *
 457          * Parameters:
 458          *  void
 459          *
 460          * Return:
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 9   

 461          *  void
 462          *
 463          *******************************************************************************/
 464          void AnalogSetDefault(void)
 465          {
 466   1              CY_SET_REG8(CYREG_PRT4_AG, 0x10);
 467   1              CY_SET_REG8(CYREG_PRT12_AG, 0xAA);
 468   1              CY_SET_REG8(CYREG_DSM0_SW0, 0x10);
 469   1              CY_SET_REG8(CYREG_PUMP_CR0, 0x44);
 470   1      }
 471          
 472          #define CY_AMUX_UNUSED CYREG_BOOST_SR
 473          /* Table used to specify registers used to implement ADC_DelSig_1_AMux */
 474          uint8 CYXDATA * const CYCODE ADC_DelSig_1_AMux__addrTable[] = {
 475                  (uint8 CYXDATA *)CYREG_DSM0_SW3, 
 476                  (uint8 CYXDATA *)CYREG_DSM0_SW3, 
 477          };
 478          
 479          /* Table used to define bit masks used to enable inputs for ADC_DelSig_1_AMux */
 480          const uint8 CYCODE ADC_DelSig_1_AMux__maskTable[] = {
 481                  0x40, 
 482                  0x40, 
 483          };
 484          
 485          /*******************************************************************************
 486          * Function Name: ADC_DelSig_1_AMux_Set
 487          ********************************************************************************
 488          * Summary:
 489          *  This function is used to set a particular channel as active on the AMux.
 490          *
 491          * Parameters:  
 492          *   channel - The mux channel input to set as active
 493          *
 494          * Return:
 495          *   void
 496          *
 497          *******************************************************************************/
 498          void ADC_DelSig_1_AMux_Set(uint8 channel)
 499          {
 500   1              if (channel >= 2)
 501   1                      return;
 502   1              *ADC_DelSig_1_AMux__addrTable[channel] |= ADC_DelSig_1_AMux__maskTable[channel];
 503   1      }
 504          
 505          /*******************************************************************************
 506          * Function Name: ADC_DelSig_1_AMux_Unset
 507          ********************************************************************************
 508          * Summary:
 509          *  This function is used to clear a particular channel from being active on the
 510          *  AMux.
 511          *
 512          * Parameters:  
 513          *   channel - The mux channel input to mark inactive
 514          *
 515          * Return:
 516          *   void
 517          *
 518          *******************************************************************************/
 519          void ADC_DelSig_1_AMux_Unset(uint8 channel)
 520          {
 521   1              if (channel >= 2)
 522   1                      return;
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 10  

 523   1              *ADC_DelSig_1_AMux__addrTable[channel] &= ~ADC_DelSig_1_AMux__maskTable[channel];
 524   1      }
 525          
 526          
 527          
 528          /*******************************************************************************
 529          * Function Name: cyfitter_cfg
 530          ********************************************************************************
 531          * Summary:
 532          *  This function is called by the start-up code for the selected device. It
 533          *  performs all of the necessary device configuration based on the design
 534          *  settings.  This includes settings from the Design Wide Resources (DWR) such
 535          *  as Clocks and Pins as well as any component configuration that is necessary.
 536          *
 537          * Parameters:  
 538          *   void
 539          *
 540          * Return:
 541          *   void
 542          *
 543          *******************************************************************************/
 544          void cyfitter_cfg(void)
 545          {
 546   1              /* Setup Flash Cycles based on 48MHz clock startup frequency. */
 547   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0x90 : 0x80));
 548   1      
 549   1              /* Disable DMA channels so they can be configured for chip initialization */
 550   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH0_BASIC_CFG), 0x00);
 551   1              CY_SET_REG8((void CYXDATA *)(CYREG_PHUB_CH1_BASIC_CFG), 0x00);
 552   1      
 553   1              /* Enable/Disable Debug functionality based on settings from System DWR */
 554   1              CY_SET_XTND_REG8(CYREG_MLOGIC_DBG_EN_DBG_EN, (CY_GET_XTND_REG8(CYREG_MLOGIC_DBG_EN_DBG_EN) | 0x01));
 555   1      
 556   1              {
 557   2                      cfg_dma_init();
 558   2      
 559   2                      /* Perform normal device configuration. Order is not critical for these items. */
 560   2                      CYMEMZERO8((void CYFAR *)(CYDEV_PRTDSI_PRT0_BASE), 7);
 561   2                      CYCONFIGCPY8((void CYFAR *)(CYDEV_PRTDSI_PRT1_BASE), (void CYFAR *)(BS_IOPORT_1_VAL), 7);
 562   2                      CYCONFIGCPY8((void CYFAR *)(CYDEV_PRTDSI_PRT2_BASE), (void CYFAR *)(BS_IOPORT_2_VAL), 7);
 563   2                      CYMEMZERO8((void CYFAR *)(CYDEV_PRTDSI_PRT3_BASE), 7);
 564   2                      CYMEMZERO8((void CYFAR *)(CYDEV_PRTDSI_PRT4_BASE), 7);
 565   2                      CYMEMZERO8((void CYFAR *)(CYDEV_PRTDSI_PRT5_BASE), 7);
 566   2                      CYMEMZERO8((void CYFAR *)(CYDEV_PRTDSI_PRT6_BASE), 7);
 567   2                      CYMEMZERO8((void CYFAR *)(CYDEV_PRTDSI_PRT12_BASE), 6);
 568   2                      CYMEMZERO8((void CYFAR *)(CYDEV_PRTDSI_PRT15_BASE), 7);
 569   2      
 570   2                      /* Enable digital routing */
 571   2                      CY_SET_XTND_REG8(CYREG_BCTL0_BANK_CTL, CY_GET_XTND_REG8(CYREG_BCTL0_BANK_CTL) | 0x02u);
 572   2                      CY_SET_XTND_REG8(CYREG_BCTL1_BANK_CTL, CY_GET_XTND_REG8(CYREG_BCTL1_BANK_CTL) | 0x02u);
 573   2      
 574   2                      /* Enable UDB array */
 575   2                      CY_SET_REG8(CYREG_PM_ACT_CFG0, CY_GET_REG8(CYREG_PM_ACT_CFG0) | 0x40u);
 576   2                      CY_SET_REG8(CYREG_PM_AVAIL_CR2, CY_GET_REG8(CYREG_PM_AVAIL_CR2) | 0x10u);
 577   2              }
 578   1      
 579   1              /* Perform second pass device configuration. These items must be configured in specific order after the r
             -egular configuration is done. */
 580   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT0_DM0), (void CYFAR *)(BS_IOPINS0_0_VAL), 8);
 581   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT1_DM0), (void CYFAR *)(BS_IOPINS0_1_VAL), 8);
 582   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT2_DM0), (void CYFAR *)(BS_IOPINS0_2_VAL), 8);
 583   1              CYCONFIGCPY((void CYFAR *)(CYREG_PRT4_DM0), (void CYFAR *)(BS_IOPINS0_4_VAL), 8);
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 11  

 584   1              CY_SET_REG8((void CYXDATA *)(CYREG_INTC_CLOCK_EN), 0x01);
 585   1      
 586   1      
 587   1              /* Set Flash Cycles based on max possible frequency in case a glitch occurs during ClockSetup(). */
 588   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0x10 : 0x00));
 589   1              /* Setup clocks based on selections from Clock DWR */
 590   1              ClockSetup();
 591   1              /* Set Flash Cycles based on newly configured 24.00MHz Bus Clock. */
 592   1              CY_SET_REG8((void CYXDATA *)(CYREG_CACHE_CR), ((CYDEV_INSTRUCT_CACHE_ENABLED) ? 0x50 : 0x40));
 593   1      
 594   1              /* Perform basic analog initialization to defaults */
 595   1              AnalogSetDefault();
 596   1      
 597   1              /* Configure alternate active mode */
 598   1              CYCONFIGCPY((void CYFAR *)CYDEV_PM_STBY_BASE, (void CYFAR *)CYDEV_PM_ACT_BASE, 12);
 599   1              CY_SET_REG8(CYREG_PM_STBY_CFG0, CY_GET_REG8(CYREG_PM_STBY_CFG0) & ~0x02u);      /* Disable CPU */
 600   1      }
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 12  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _CyClockStartupError (BEGIN)
                                           ; SOURCE LINE # 50
0000 900000      R     MOV     DPTR,#errorCode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
                                           ; SOURCE LINE # 53
0005 900000      R     MOV     DPTR,#errorCode
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A 900000      R     MOV     DPTR,#errorCode
000D EF                MOV     A,R7
000E F0                MOVX    @DPTR,A
000F         ?C0001:
                                           ; SOURCE LINE # 65
000F 80FE              SJMP    ?C0001
0011 22                RET     
             ; FUNCTION _CyClockStartupError (END)

             ; FUNCTION cfg_dma_init (BEGIN)
                                           ; SOURCE LINE # 346
                                           ; SOURCE LINE # 347
                                           ; SOURCE LINE # 348
0000 7F00              MOV     R7,#00H
0002 7E00              MOV     R6,#00H
0004 7D00              MOV     R5,#00H
0006 7C00              MOV     R4,#00H
0008 900000      R     MOV     DPTR,#DMA_ZERO_VAL
000B 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 349
000E 907600            MOV     DPTR,#07600H
0011 7410              MOV     A,#010H
0013 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 350
0014 907010            MOV     DPTR,#07010H
0017 7401              MOV     A,#01H
0019 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 351
001A 907019            MOV     DPTR,#07019H
001D E4                CLR     A
001E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 353
001F 907802            MOV     DPTR,#07802H
0022 7401              MOV     A,#01H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 354
0025 907803            MOV     DPTR,#07803H
0028 74A3              MOV     A,#0A3H
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
002B 7B02              MOV     R3,#02H
002D 7A78              MOV     R2,#078H
002F 7900              MOV     R1,#00H
0031 7DF0              MOV     R5,#0F0H
0033 7C01              MOV     R4,#01H
0035 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 356
0038 7B02              MOV     R3,#02H
003A 7A78              MOV     R2,#078H
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 13  

003C 7904              MOV     R1,#04H
003E C003              PUSH    AR3
0040 C002              PUSH    AR2
0042 C001              PUSH    AR1
0044 7BFF              MOV     R3,#0FFH
0046 7A00        R     MOV     R2,#HIGH CFG_TD_LIST0
0048 7900        R     MOV     R1,#LOW CFG_TD_LIST0
004A AC02              MOV     R4,AR2
004C AD01              MOV     R5,AR1
004E D001              POP     AR1
0050 D002              POP     AR2
0052 D003              POP     AR3
0054 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 357
0057 7B02              MOV     R3,#02H
0059 7A78              MOV     R2,#078H
005B 7906              MOV     R1,#06H
005D 7D08              MOV     R5,#08H
005F 7C78              MOV     R4,#078H
0061 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 358
0064 7B02              MOV     R3,#02H
0066 7A76              MOV     R2,#076H
0068 7904              MOV     R1,#04H
006A 7D10              MOV     R5,#010H
006C 7C00              MOV     R4,#00H
006E 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 359
0071 7B02              MOV     R3,#02H
0073 7A76              MOV     R2,#076H
0075 7906              MOV     R1,#06H
0077 7D00              MOV     R5,#00H
0079 7C00              MOV     R4,#00H
007B 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 360
007E 907029            MOV     DPTR,#07029H
0081 7409              MOV     A,#09H
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 361
0084 907039            MOV     DPTR,#07039H
0087 740D              MOV     A,#0DH
0089 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 362
008A 907069            MOV     DPTR,#07069H
008D 741D              MOV     A,#01DH
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 363
0090 907079            MOV     DPTR,#07079H
0093 741F              MOV     A,#01FH
0095 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 366
0096 907014            MOV     DPTR,#07014H
0099 7401              MOV     A,#01H
009B F0                MOVX    @DPTR,A
009C         ?C0004:
                                           ; SOURCE LINE # 370
009C 907018            MOV     DPTR,#07018H
009F E0                MOVX    A,@DPTR
00A0 FF                MOV     R7,A
00A1 EF                MOV     A,R7
00A2 20E0F7            JB      ACC.0,?C0004
00A5         ?C0005:
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 14  

00A5         ?C0006:
                                           ; SOURCE LINE # 371
00A5 907028            MOV     DPTR,#07028H
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA EF                MOV     A,R7
00AB 20E0F7            JB      ACC.0,?C0006
00AE         ?C0007:
00AE         ?C0008:
                                           ; SOURCE LINE # 372
00AE 907038            MOV     DPTR,#07038H
00B1 E0                MOVX    A,@DPTR
00B2 FF                MOV     R7,A
00B3 EF                MOV     A,R7
00B4 20E0F7            JB      ACC.0,?C0008
00B7         ?C0009:
00B7         ?C0010:
                                           ; SOURCE LINE # 373
00B7 907068            MOV     DPTR,#07068H
00BA E0                MOVX    A,@DPTR
00BB FF                MOV     R7,A
00BC EF                MOV     A,R7
00BD 20E0F7            JB      ACC.0,?C0010
00C0         ?C0011:
00C0         ?C0012:
                                           ; SOURCE LINE # 374
00C0 907078            MOV     DPTR,#07078H
00C3 E0                MOVX    A,@DPTR
00C4 FF                MOV     R7,A
00C5 EF                MOV     A,R7
00C6 20E0F7            JB      ACC.0,?C0012
00C9         ?C0013:
                                           ; SOURCE LINE # 377
00C9 907010            MOV     DPTR,#07010H
00CC E4                CLR     A
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 378
00CE 907020            MOV     DPTR,#07020H
00D1 E4                CLR     A
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 379
00D3 907030            MOV     DPTR,#07030H
00D6 E4                CLR     A
00D7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 380
00D8 907060            MOV     DPTR,#07060H
00DB E4                CLR     A
00DC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 381
00DD 907070            MOV     DPTR,#07070H
00E0 E4                CLR     A
00E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 383
00E2 22                RET     
             ; FUNCTION cfg_dma_init (END)

             ; FUNCTION ClockSetup (BEGIN)
                                           ; SOURCE LINE # 400
                                           ; SOURCE LINE # 401
                                           ; SOURCE LINE # 403
0000 7E00        R     MOV     R6,#HIGH timeout
0002 7F00        R     MOV     R7,#LOW timeout
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 15  

0004 900000      R     MOV     DPTR,#timeout_p
0007 EE                MOV     A,R6
0008 F0                MOVX    @DPTR,A
0009 A3                INC     DPTR
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 408
000C 7B00              MOV     R3,#00H
000E 7A40              MOV     R2,#040H
0010 7980              MOV     R1,#080H
0012 7F00              MOV     R7,#00H
0014 7E00              MOV     R6,#00H
0016 7D19              MOV     R5,#019H
0018 7C00              MOV     R4,#00H
001A 120000      E     LCALL   _cywrite24
                                           ; SOURCE LINE # 409
001D 7B00              MOV     R3,#00H
001F 7A40              MOV     R2,#040H
0021 7984              MOV     R1,#084H
0023 7F00              MOV     R7,#00H
0025 7E00              MOV     R6,#00H
0027 7D19              MOV     R5,#019H
0029 7C00              MOV     R4,#00H
002B 120000      E     LCALL   _cywrite24
                                           ; SOURCE LINE # 410
002E 7B00              MOV     R3,#00H
0030 7A40              MOV     R2,#040H
0032 7988              MOV     R1,#088H
0034 7F12              MOV     R7,#012H
0036 7E00              MOV     R6,#00H
0038 7D18              MOV     R5,#018H
003A 7C00              MOV     R4,#00H
003C 120000      E     LCALL   _cywrite24
                                           ; SOURCE LINE # 413
003F 7B08              MOV     R3,#08H
0041 7A0F              MOV     R2,#0FH
0043 7990              MOV     R1,#090H
0045 C003              PUSH    AR3
0047 C002              PUSH    AR2
0049 C001              PUSH    AR1
004B 7B00              MOV     R3,#00H
004D 7A41              MOV     R2,#041H
004F 7900              MOV     R1,#00H
0051 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0054 120000      E     LCALL   ?C?PSTXDATA
0057 D001              POP     AR1
0059 D002              POP     AR2
005B D003              POP     AR3
005D 7F04              MOV     R7,#04H
005F 7E00              MOV     R6,#00H
0061 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 416
0064 904300            MOV     DPTR,#04300H
0067 7402              MOV     A,#02H
0069 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 417
006A 904000            MOV     DPTR,#04000H
006D 7408              MOV     A,#08H
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 420
0070 904200            MOV     DPTR,#04200H
0073 7403              MOV     A,#03H
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 16  

0075 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 421
0076 7B0C              MOV     R3,#0CH
0078 7A01              MOV     R2,#01H
007A 7908              MOV     R1,#08H
007C 120000      E     LCALL   _cyread8
007F 9046A1            MOV     DPTR,#046A1H
0082 EF                MOV     A,R7
0083 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 424
0084 7B00              MOV     R3,#00H
0086 7A42              MOV     R2,#042H
0088 7922              MOV     R1,#022H
008A 7D08              MOV     R5,#08H
008C 7C00              MOV     R4,#00H
008E 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 425
0091 7B00              MOV     R3,#00H
0093 7A42              MOV     R2,#042H
0095 7920              MOV     R1,#020H
0097 7D51              MOV     R5,#051H
0099 7C10              MOV     R4,#010H
009B 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 427
009E 900000      R     MOV     DPTR,#pllLock
00A1 E4                CLR     A
00A2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 428
00A3 7F19              MOV     R7,#019H
00A5 7E00              MOV     R6,#00H
00A7 7D00              MOV     R5,#00H
00A9 7C00              MOV     R4,#00H
00AB 900000      R     MOV     DPTR,#timeout
00AE 120000      E     LCALL   ?C?LSTXDATA
00B1         ?C0015:
00B1 900000      R     MOV     DPTR,#timeout_p
00B4 E0                MOVX    A,@DPTR
00B5 FE                MOV     R6,A
00B6 A3                INC     DPTR
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
00B9 8F82              MOV     DPL,R7
00BB 8E83              MOV     DPH,R6
00BD 120000      E     LCALL   ?C?LLDXDATA
00C0 EC                MOV     A,R4
00C1 4D                ORL     A,R5
00C2 4E                ORL     A,R6
00C3 4F                ORL     A,R7
00C4 604E              JZ      ?C0016
00C6 900000      R     MOV     DPTR,#pllLock
00C9 E0                MOVX    A,@DPTR
00CA FF                MOV     R7,A
00CB EF                MOV     A,R7
00CC 6403              XRL     A,#03H
00CE 6044              JZ      ?C0016
                                           ; SOURCE LINE # 429
00D0 904225            MOV     DPTR,#04225H
00D3 E0                MOVX    A,@DPTR
00D4 FF                MOV     R7,A
00D5 EF                MOV     A,R7
00D6 5401              ANL     A,#01H
00D8 FF                MOV     R7,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 17  

00D9 7E00              MOV     R6,#00H
00DB 900000      R     MOV     DPTR,#pllLock
00DE E0                MOVX    A,@DPTR
00DF FE                MOV     R6,A
00E0 EE                MOV     A,R6
00E1 25E0              ADD     A,ACC
00E3 FE                MOV     R6,A
00E4 EE                MOV     A,R6
00E5 4F                ORL     A,R7
00E6 FF                MOV     R7,A
00E7 EF                MOV     A,R7
00E8 5403              ANL     A,#03H
00EA FF                MOV     R7,A
00EB 900000      R     MOV     DPTR,#pllLock
00EE EF                MOV     A,R7
00EF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 430
00F0 7FE0              MOV     R7,#0E0H
00F2 7E01              MOV     R6,#01H
00F4 7D00              MOV     R5,#00H
00F6 7C00              MOV     R4,#00H
00F8 120000      E     LCALL   _CyDelayCycles
                                           ; SOURCE LINE # 431
00FB 900000      R     MOV     DPTR,#timeout
00FE 120000      E     LCALL   ?C?LLDXDATA
0101 7BFF              MOV     R3,#0FFH
0103 7AFF              MOV     R2,#0FFH
0105 79FF              MOV     R1,#0FFH
0107 78FF              MOV     R0,#0FFH
0109 120000      E     LCALL   ?C?LADD
010C 900000      R     MOV     DPTR,#timeout
010F 120000      E     LCALL   ?C?LSTXDATA
0112 809D              SJMP    ?C0015
0114         ?C0016:
                                           ; SOURCE LINE # 434
0114 7B00              MOV     R3,#00H
0116 7A40              MOV     R2,#040H
0118 7904              MOV     R1,#04H
011A 7D03              MOV     R5,#03H
011C 7C01              MOV     R4,#01H
011E 120000      E     LCALL   _cywrite16
                                           ; SOURCE LINE # 435
0121 904004            MOV     DPTR,#04004H
0124 E4                CLR     A
0125 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 436
0126 904004            MOV     DPTR,#04004H
0129 7407              MOV     A,#07H
012B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 437
012C 904006            MOV     DPTR,#04006H
012F E4                CLR     A
0130 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 438
0131 904008            MOV     DPTR,#04008H
0134 7448              MOV     A,#048H
0136 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 439
0137 904004            MOV     DPTR,#04004H
013A E4                CLR     A
013B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 440
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 18  

013C 904001            MOV     DPTR,#04001H
013F 7402              MOV     A,#02H
0141 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
0142 9043A2            MOV     DPTR,#043A2H
0145 E0                MOVX    A,@DPTR
0146 FF                MOV     R7,A
0147 EF                MOV     A,R7
0148 4407              ORL     A,#07H
014A FF                MOV     R7,A
014B EF                MOV     A,R7
014C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 443
014D 9043A1            MOV     DPTR,#043A1H
0150 E0                MOVX    A,@DPTR
0151 FF                MOV     R7,A
0152 EF                MOV     A,R7
0153 4401              ORL     A,#01H
0155 FF                MOV     R7,A
0156 EF                MOV     A,R7
0157 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 444
0158 22                RET     
             ; FUNCTION ClockSetup (END)

             ; FUNCTION AnalogSetDefault (BEGIN)
                                           ; SOURCE LINE # 464
                                           ; SOURCE LINE # 465
                                           ; SOURCE LINE # 466
0000 90514D            MOV     DPTR,#0514DH
0003 7410              MOV     A,#010H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 467
0006 9051CD            MOV     DPTR,#051CDH
0009 74AA              MOV     A,#0AAH
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 468
000C 905B00            MOV     DPTR,#05B00H
000F 7410              MOV     A,#010H
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
0012 905876            MOV     DPTR,#05876H
0015 7444              MOV     A,#044H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 470
0018 22                RET     
             ; FUNCTION AnalogSetDefault (END)

             ; FUNCTION _ADC_DelSig_1_AMux_Set (BEGIN)
                                           ; SOURCE LINE # 498
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 499
                                           ; SOURCE LINE # 500
0005 900000      R     MOV     DPTR,#channel
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9402              SUBB    A,#02H
000E 5036              JNC     ?C0021
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 19  

0010         ?C0020:
                                           ; SOURCE LINE # 502
0010 900000      R     MOV     DPTR,#channel
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 25E0              ADD     A,ACC
0018 2400        R     ADD     A,#LOW ADC_DelSig_1_AMux__addrTable
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH ADC_DelSig_1_AMux__addrTable
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FE                MOV     R6,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 8F82              MOV     DPL,R7
002A 8E83              MOV     DPH,R6
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#channel
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 900000      R     MOV     DPTR,#ADC_DelSig_1_AMux__maskTable
003B 93                MOVC    A,@A+DPTR
003C FE                MOV     R6,A
003D EF                MOV     A,R7
003E 4E                ORL     A,R6
003F FF                MOV     R7,A
0040 D082              POP     DPL
0042 D083              POP     DPH
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 503
0046         ?C0021:
0046 22                RET     
             ; FUNCTION _ADC_DelSig_1_AMux_Set (END)

             ; FUNCTION _ADC_DelSig_1_AMux_Unset (BEGIN)
                                           ; SOURCE LINE # 519
0000 900000      R     MOV     DPTR,#channel
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 520
                                           ; SOURCE LINE # 521
0005 900000      R     MOV     DPTR,#channel
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B C3                CLR     C
000C 9402              SUBB    A,#02H
000E 5039              JNC     ?C0023
0010         ?C0022:
                                           ; SOURCE LINE # 523
0010 900000      R     MOV     DPTR,#channel
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 20  

0015 EF                MOV     A,R7
0016 25E0              ADD     A,ACC
0018 2400        R     ADD     A,#LOW ADC_DelSig_1_AMux__addrTable
001A F582              MOV     DPL,A
001C E4                CLR     A
001D 3400        R     ADDC    A,#HIGH ADC_DelSig_1_AMux__addrTable
001F F583              MOV     DPH,A
0021 E4                CLR     A
0022 93                MOVC    A,@A+DPTR
0023 FE                MOV     R6,A
0024 7401              MOV     A,#01H
0026 93                MOVC    A,@A+DPTR
0027 FF                MOV     R7,A
0028 8F82              MOV     DPL,R7
002A 8E83              MOV     DPH,R6
002C C083              PUSH    DPH
002E C082              PUSH    DPL
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 900000      R     MOV     DPTR,#channel
0035 E0                MOVX    A,@DPTR
0036 FE                MOV     R6,A
0037 EE                MOV     A,R6
0038 900000      R     MOV     DPTR,#ADC_DelSig_1_AMux__maskTable
003B 93                MOVC    A,@A+DPTR
003C FE                MOV     R6,A
003D EE                MOV     A,R6
003E F4                CPL     A
003F FE                MOV     R6,A
0040 EF                MOV     A,R7
0041 5E                ANL     A,R6
0042 FF                MOV     R7,A
0043 D082              POP     DPL
0045 D083              POP     DPH
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 524
0049         ?C0023:
0049 22                RET     
             ; FUNCTION _ADC_DelSig_1_AMux_Unset (END)

             ; FUNCTION cyfitter_cfg (BEGIN)
                                           ; SOURCE LINE # 544
                                           ; SOURCE LINE # 545
                                           ; SOURCE LINE # 547
0000 904800            MOV     DPTR,#04800H
0003 7480              MOV     A,#080H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 550
0006 907010            MOV     DPTR,#07010H
0009 E4                CLR     A
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 551
000B 907020            MOV     DPTR,#07020H
000E E4                CLR     A
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
0010 7B00              MOV     R3,#00H
0012 7A46              MOV     R2,#046H
0014 79E8              MOV     R1,#0E8H
0016 120000      E     LCALL   _cyread8
0019 EF                MOV     A,R7
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 21  

001A 4401              ORL     A,#01H
001C FD                MOV     R5,A
001D 7B00              MOV     R3,#00H
001F 7A46              MOV     R2,#046H
0021 79E8              MOV     R1,#0E8H
0023 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 556
                                           ; SOURCE LINE # 557
0026 120000      R     LCALL   cfg_dma_init
                                           ; SOURCE LINE # 560
0029 7B00              MOV     R3,#00H
002B 7A52              MOV     R2,#052H
002D 7900              MOV     R1,#00H
002F 7D07              MOV     R5,#07H
0031 7C00              MOV     R4,#00H
0033 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 561
0036 7B08              MOV     R3,#08H
0038 7A0F              MOV     R2,#0FH
003A 7980              MOV     R1,#080H
003C C003              PUSH    AR3
003E C002              PUSH    AR2
0040 C001              PUSH    AR1
0042 7B00              MOV     R3,#00H
0044 7A52              MOV     R2,#052H
0046 7908              MOV     R1,#08H
0048 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
004B 120000      E     LCALL   ?C?PSTXDATA
004E D001              POP     AR1
0050 D002              POP     AR2
0052 D003              POP     AR3
0054 7F07              MOV     R7,#07H
0056 7E00              MOV     R6,#00H
0058 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 562
005B 7B08              MOV     R3,#08H
005D 7A0F              MOV     R2,#0FH
005F 7988              MOV     R1,#088H
0061 C003              PUSH    AR3
0063 C002              PUSH    AR2
0065 C001              PUSH    AR1
0067 7B00              MOV     R3,#00H
0069 7A52              MOV     R2,#052H
006B 7910              MOV     R1,#010H
006D 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0070 120000      E     LCALL   ?C?PSTXDATA
0073 D001              POP     AR1
0075 D002              POP     AR2
0077 D003              POP     AR3
0079 7F07              MOV     R7,#07H
007B 7E00              MOV     R6,#00H
007D 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 563
0080 7B00              MOV     R3,#00H
0082 7A52              MOV     R2,#052H
0084 7918              MOV     R1,#018H
0086 7D07              MOV     R5,#07H
0088 7C00              MOV     R4,#00H
008A 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 564
008D 7B00              MOV     R3,#00H
008F 7A52              MOV     R2,#052H
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 22  

0091 7920              MOV     R1,#020H
0093 7D07              MOV     R5,#07H
0095 7C00              MOV     R4,#00H
0097 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 565
009A 7B00              MOV     R3,#00H
009C 7A52              MOV     R2,#052H
009E 7928              MOV     R1,#028H
00A0 7D07              MOV     R5,#07H
00A2 7C00              MOV     R4,#00H
00A4 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 566
00A7 7B00              MOV     R3,#00H
00A9 7A52              MOV     R2,#052H
00AB 7930              MOV     R1,#030H
00AD 7D07              MOV     R5,#07H
00AF 7C00              MOV     R4,#00H
00B1 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 567
00B4 7B00              MOV     R3,#00H
00B6 7A52              MOV     R2,#052H
00B8 7960              MOV     R1,#060H
00BA 7D06              MOV     R5,#06H
00BC 7C00              MOV     R4,#00H
00BE 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 568
00C1 7B00              MOV     R3,#00H
00C3 7A52              MOV     R2,#052H
00C5 7978              MOV     R1,#078H
00C7 7D07              MOV     R5,#07H
00C9 7C00              MOV     R4,#00H
00CB 120000      E     LCALL   _cymemzero
                                           ; SOURCE LINE # 571
00CE 7B01              MOV     R3,#01H
00D0 7A50              MOV     R2,#050H
00D2 7903              MOV     R1,#03H
00D4 120000      E     LCALL   _cyread8
00D7 EF                MOV     A,R7
00D8 4402              ORL     A,#02H
00DA FD                MOV     R5,A
00DB 7B01              MOV     R3,#01H
00DD 7A50              MOV     R2,#050H
00DF 7903              MOV     R1,#03H
00E1 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 572
00E4 7B01              MOV     R3,#01H
00E6 7A50              MOV     R2,#050H
00E8 7913              MOV     R1,#013H
00EA 120000      E     LCALL   _cyread8
00ED EF                MOV     A,R7
00EE 4402              ORL     A,#02H
00F0 FD                MOV     R5,A
00F1 7B01              MOV     R3,#01H
00F3 7A50              MOV     R2,#050H
00F5 7913              MOV     R1,#013H
00F7 120000      E     LCALL   _cywrite8
                                           ; SOURCE LINE # 575
00FA 9043A0            MOV     DPTR,#043A0H
00FD E0                MOVX    A,@DPTR
00FE FF                MOV     R7,A
00FF EF                MOV     A,R7
0100 4440              ORL     A,#040H
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 23  

0102 FF                MOV     R7,A
0103 9043A0            MOV     DPTR,#043A0H
0106 EF                MOV     A,R7
0107 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 576
0108 9043C2            MOV     DPTR,#043C2H
010B E0                MOVX    A,@DPTR
010C FF                MOV     R7,A
010D EF                MOV     A,R7
010E 4410              ORL     A,#010H
0110 FF                MOV     R7,A
0111 9043C2            MOV     DPTR,#043C2H
0114 EF                MOV     A,R7
0115 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 577
                                           ; SOURCE LINE # 580
0116 7B08              MOV     R3,#08H
0118 7A0F              MOV     R2,#0FH
011A 7960              MOV     R1,#060H
011C C003              PUSH    AR3
011E C002              PUSH    AR2
0120 C001              PUSH    AR1
0122 7B00              MOV     R3,#00H
0124 7A51              MOV     R2,#051H
0126 7902              MOV     R1,#02H
0128 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
012B 120000      E     LCALL   ?C?PSTXDATA
012E D001              POP     AR1
0130 D002              POP     AR2
0132 D003              POP     AR3
0134 7F08              MOV     R7,#08H
0136 7E00              MOV     R6,#00H
0138 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 581
013B 7B08              MOV     R3,#08H
013D 7A0F              MOV     R2,#0FH
013F 7968              MOV     R1,#068H
0141 C003              PUSH    AR3
0143 C002              PUSH    AR2
0145 C001              PUSH    AR1
0147 7B00              MOV     R3,#00H
0149 7A51              MOV     R2,#051H
014B 7912              MOV     R1,#012H
014D 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
0150 120000      E     LCALL   ?C?PSTXDATA
0153 D001              POP     AR1
0155 D002              POP     AR2
0157 D003              POP     AR3
0159 7F08              MOV     R7,#08H
015B 7E00              MOV     R6,#00H
015D 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 582
0160 7B08              MOV     R3,#08H
0162 7A0F              MOV     R2,#0FH
0164 7970              MOV     R1,#070H
0166 C003              PUSH    AR3
0168 C002              PUSH    AR2
016A C001              PUSH    AR1
016C 7B00              MOV     R3,#00H
016E 7A51              MOV     R2,#051H
0170 7922              MOV     R1,#022H
0172 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 24  

0175 120000      E     LCALL   ?C?PSTXDATA
0178 D001              POP     AR1
017A D002              POP     AR2
017C D003              POP     AR3
017E 7F08              MOV     R7,#08H
0180 7E00              MOV     R6,#00H
0182 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 583
0185 7B08              MOV     R3,#08H
0187 7A0F              MOV     R2,#0FH
0189 7978              MOV     R1,#078H
018B C003              PUSH    AR3
018D C002              PUSH    AR2
018F C001              PUSH    AR1
0191 7B00              MOV     R3,#00H
0193 7A51              MOV     R2,#051H
0195 7942              MOV     R1,#042H
0197 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
019A 120000      E     LCALL   ?C?PSTXDATA
019D D001              POP     AR1
019F D002              POP     AR2
01A1 D003              POP     AR3
01A3 7F08              MOV     R7,#08H
01A5 7E00              MOV     R6,#00H
01A7 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 584
01AA 9044F4            MOV     DPTR,#044F4H
01AD 7401              MOV     A,#01H
01AF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 588
01B0 904800            MOV     DPTR,#04800H
01B3 E4                CLR     A
01B4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 590
01B5 120000      R     LCALL   ClockSetup
                                           ; SOURCE LINE # 592
01B8 904800            MOV     DPTR,#04800H
01BB 7440              MOV     A,#040H
01BD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 595
01BE 120000      R     LCALL   AnalogSetDefault
                                           ; SOURCE LINE # 598
01C1 7B00              MOV     R3,#00H
01C3 7A43              MOV     R2,#043H
01C5 79A0              MOV     R1,#0A0H
01C7 C003              PUSH    AR3
01C9 C002              PUSH    AR2
01CB C001              PUSH    AR1
01CD 7B00              MOV     R3,#00H
01CF 7A43              MOV     R2,#043H
01D1 79B0              MOV     R1,#0B0H
01D3 900000      E     MOV     DPTR,#?_cyconfigcpy?BYTE+05H
01D6 120000      E     LCALL   ?C?PSTXDATA
01D9 D001              POP     AR1
01DB D002              POP     AR2
01DD D003              POP     AR3
01DF 7F0C              MOV     R7,#0CH
01E1 7E00              MOV     R6,#00H
01E3 120000      E     LCALL   _cyconfigcpy
                                           ; SOURCE LINE # 599
01E6 9043B0            MOV     DPTR,#043B0H
01E9 E0                MOVX    A,@DPTR
C51 COMPILER V9.03   CYFITTER_CFG                                                          07/11/2012 14:12:41 PAGE 25  

01EA FF                MOV     R7,A
01EB EF                MOV     A,R7
01EC 54FD              ANL     A,#0FDH
01EE FF                MOV     R7,A
01EF 9043B0            MOV     DPTR,#043B0H
01F2 EF                MOV     A,R7
01F3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 600
01F4 22                RET     
             ; FUNCTION cyfitter_cfg (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1261    ----
   CONSTANT SIZE    =    539    ----
   XDATA SIZE       =      4      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
