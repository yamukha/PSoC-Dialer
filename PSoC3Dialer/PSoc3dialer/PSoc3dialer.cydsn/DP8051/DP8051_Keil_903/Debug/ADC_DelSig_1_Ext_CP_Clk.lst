C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE ADC_DELSIG_1_EXT_CP_CLK
OBJECT MODULE PLACED IN .\DP8051\DP8051_Keil_903\Debug\ADC_DelSig_1_Ext_CP_Clk.obj
COMPILER INVOKED BY: D:\dev_soft\PSoC Creator\2.0\PSoC Creator\import\keil\pk51\9.03\C51\BIN\c51.exe .\Generated_Source\
                    -PSoC3\ADC_DelSig_1_Ext_CP_Clk.c NOIV LARGE MODDP2 OMF2 VB(1) PR(.\DP8051\DP8051_Keil_903\Debug\ADC_DelSig_1_Ext_CP_Clk.l
                    -st) CD DB NOIP OT(2,SIZE) INCDIR(Generated_Source\PSoC3) OJ(.\DP8051\DP8051_Keil_903\Debug\ADC_DelSig_1_Ext_CP_Clk.obj)

line level    source

   1          /*******************************************************************************
   2          * File Name: ADC_DelSig_1_Ext_CP_Clk.c
   3          * Version 1.60
   4          *
   5          *  Description:
   6          *   This file provides the source code to the API for the clock component.
   7          *
   8          *  Note:
   9          *
  10          ********************************************************************************
  11          * Copyright 2008-2010, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions, 
  13          * disclaimers, and limitations in the end user license agreement accompanying 
  14          * the software package with which this file was provided.
  15          ********************************************************************************/
  16          
  17          #include <cydevice_trm.h>
  18          #include "ADC_DelSig_1_Ext_CP_Clk.h"
  19          
  20          /* Clock Distribution registers. */
  21          #define CLK_DIST_LD              (* (reg8 *) CYREG_CLKDIST_LD)
  22          #define CLK_DIST_BCFG2           (* (reg8 *) CYREG_CLKDIST_BCFG2)
  23          #define BCFG2_MASK               (0x80u)
  24          #define CLK_DIST_DMASK           (* (reg8 *) CYREG_CLKDIST_DMASK)
  25          #define CLK_DIST_AMASK           (* (reg8 *) CYREG_CLKDIST_AMASK)
  26          
  27          #define HAS_CLKDIST_LD_DISABLE   ((CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3 &&\
  28                                             CYDEV_CHIP_REVISION_USED >= CYDEV_CHIP_REVISION_3A_ES3) ||\
  29                                            (CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC5 &&\
  30                                             CYDEV_CHIP_REVISION_USED > CYDEV_CHIP_REVISION_5A_ES1))
  31          
  32          
  33          /*******************************************************************************
  34          * Function Name: ADC_DelSig_1_Ext_CP_Clk_Start
  35          ********************************************************************************
  36          * Summary:
  37          *  Starts the clock. Note that on startup, clocks may be already running if the
  38          *  "Start on Reset" option is enabled in the DWR.
  39          *
  40          * Parameters:
  41          *  void
  42          *
  43          * Returns:
  44          *  void
  45          *
  46          *******************************************************************************/
  47          void ADC_DelSig_1_Ext_CP_Clk_Start(void) 
  48          {
  49   1          /* Set the bit to enable the clock. */
  50   1          ADC_DelSig_1_Ext_CP_Clk_CLKEN |= ADC_DelSig_1_Ext_CP_Clk_CLKEN_MASK;
  51   1      }
  52          
  53          
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 2   

  54          /*******************************************************************************
  55          * Function Name: ADC_DelSig_1_Ext_CP_Clk_Stop
  56          ********************************************************************************
  57          * Summary:
  58          *  Stops the clock and returns immediately. This API does not require the
  59          *  source clock to be running but may return before the hardware is actually
  60          *  disabled. If the settings of the clock are changed after calling this
  61          *  function, the clock may glitch when it is started. To avoid the clock
  62          *  glitch, use the StopBlock function.
  63          *
  64          * Parameters:
  65          *  void
  66          *
  67          * Returns:
  68          *  void
  69          *
  70          *******************************************************************************/
  71          void ADC_DelSig_1_Ext_CP_Clk_Stop(void) 
  72          {
  73   1          /* Clear the bit to disable the clock. */
  74   1          ADC_DelSig_1_Ext_CP_Clk_CLKEN &= ~ADC_DelSig_1_Ext_CP_Clk_CLKEN_MASK;
  75   1      }
  76          
  77          
  78          #if(!(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC3 && \
  79              CYDEV_CHIP_REVISION_USED == CYDEV_CHIP_REVISION_3A_ES2) && \
  80                  !(CYDEV_CHIP_FAMILY_USED == CYDEV_CHIP_FAMILY_PSOC5 && \
  81                  CYDEV_CHIP_REVISION_USED == CYDEV_CHIP_REVISION_5A_ES1))
              /*******************************************************************************
              * Function Name: ADC_DelSig_1_Ext_CP_Clk_StopBlock
              ********************************************************************************
              * Summary:
              *  Stops the clock and waits for the hardware to actually be disabled before
              *  returning. This ensures that the clock is never truncated (high part of the
              *  cycle will terminate before the clock is disabled and the API returns).
              *  Note that the source clock must be running or this API will never return as
              *  a stopped clock cannot be disabled.
              *
              * Parameters:
              *  void
              *
              * Returns:
              *  void
              *
              *******************************************************************************/
              void ADC_DelSig_1_Ext_CP_Clk_StopBlock(void) 
              {
                  if (ADC_DelSig_1_Ext_CP_Clk_CLKEN & ADC_DelSig_1_Ext_CP_Clk_CLKEN_MASK)
                  {
              #if HAS_CLKDIST_LD_DISABLE
                      uint16 oldDivider;
              
                      CLK_DIST_LD = 0;
              
                      /* Clear all the mask bits except ours. */
              #if defined(ADC_DelSig_1_Ext_CP_Clk__CFG3)
                      CLK_DIST_AMASK = ADC_DelSig_1_Ext_CP_Clk_CLKEN_MASK;
                      CLK_DIST_DMASK = 0x00u;
              #else
                      CLK_DIST_DMASK = ADC_DelSig_1_Ext_CP_Clk_CLKEN_MASK;
                      CLK_DIST_AMASK = 0x00u;
              #endif
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 3   

              
                      /* Clear mask of bus clock. */
                      CLK_DIST_BCFG2 &= ~BCFG2_MASK;
              
                      oldDivider = CY_GET_REG16(ADC_DelSig_1_Ext_CP_Clk_DIV_PTR);
                      CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
                      CLK_DIST_LD = CYCLK_LD_DISABLE | CYCLK_LD_SYNC_EN | CYCLK_LD_LOAD;
              
                      /* Wait for clock to be disabled */
                      while (CLK_DIST_LD & CYCLK_LD_LOAD) { }
              #endif
              
                      /* Clear the bit to disable the clock. */
                      ADC_DelSig_1_Ext_CP_Clk_CLKEN &= ~ADC_DelSig_1_Ext_CP_Clk_CLKEN_MASK;
              
              #if HAS_CLKDIST_LD_DISABLE
                      /* Clear the disable bit */
                      CLK_DIST_LD = 0x00u;
                      CY_SET_REG16(ADC_DelSig_1_Ext_CP_Clk_DIV_PTR, oldDivider);
              #endif
                  }
              }
              #endif
 139          
 140          /*******************************************************************************
 141          * Function Name: ADC_DelSig_1_Ext_CP_Clk_StandbyPower
 142          ********************************************************************************
 143          * Summary:
 144          *  Sets whether the clock is active in standby mode.
 145          *
 146          * Parameters:
 147          *  state:  0 to disable clock during standby, nonzero to enable.
 148          *
 149          * Returns:
 150          *  void
 151          *
 152          *******************************************************************************/
 153          void ADC_DelSig_1_Ext_CP_Clk_StandbyPower(uint8 state) 
 154          {
 155   1          if(state == 0)
 156   1          {
 157   2              ADC_DelSig_1_Ext_CP_Clk_CLKSTBY &= ~ADC_DelSig_1_Ext_CP_Clk_CLKSTBY_MASK;
 158   2          }
 159   1          else
 160   1          {
 161   2              ADC_DelSig_1_Ext_CP_Clk_CLKSTBY |= ADC_DelSig_1_Ext_CP_Clk_CLKSTBY_MASK;
 162   2          }
 163   1      }
 164          
 165          
 166          /*******************************************************************************
 167          * Function Name: ADC_DelSig_1_Ext_CP_Clk_SetDividerRegister
 168          ********************************************************************************
 169          * Summary:
 170          *  Modifies the clock divider and, thus, the frequency. When the clock divider
 171          *  register is set to zero or changed from zero, the clock will be temporarily
 172          *  disabled in order to change the SSS mode bit. If the clock is enabled when
 173          *  SetDividerRegister is called, then the source clock must be running.
 174          *
 175          * Parameters:
 176          *  clkDivider:  Divider register value (0-65,535). This value is NOT the
 177          *    divider; the clock hardware divides by clkDivider plus one. For example,
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 4   

 178          *    to divide the clock by 2, this parameter should be set to 1.
 179          *  restart:  If nonzero, restarts the clock divider: the current clock cycle
 180          *   will be truncated and the new divide value will take effect immediately. If
 181          *   zero, the new divide value will take effect at the end of the current clock
 182          *   cycle.
 183          *
 184          * Returns:
 185          *  void
 186          *
 187          *******************************************************************************/
 188          void ADC_DelSig_1_Ext_CP_Clk_SetDividerRegister(uint16 clkDivider, uint8 restart) 
 189          {
 190   1          uint8 enabled;
 191   1      
 192   1          uint8 currSrc = ADC_DelSig_1_Ext_CP_Clk_GetSourceRegister();
 193   1          uint16 oldDivider = ADC_DelSig_1_Ext_CP_Clk_GetDividerRegister();
 194   1      
 195   1          if (clkDivider != oldDivider)
 196   1          {
 197   2              enabled = ADC_DelSig_1_Ext_CP_Clk_CLKEN & ADC_DelSig_1_Ext_CP_Clk_CLKEN_MASK;
 198   2      
 199   2              if (currSrc == CYCLK_SRC_SEL_CLK_SYNC_D && (oldDivider == 0 || clkDivider == 0))
 200   2              {
 201   3                  /* Moving to/from SSS requires correct ordering to prevent halting the clock    */
 202   3                  if (oldDivider == 0 && clkDivider != 0)
 203   3                  {
 204   4                      /* Moving away from SSS, set the divider first so when SSS is cleared we    */
 205   4                      /* don't halt the clock.  Using the shadow load isn't required as the       */
 206   4                      /* divider is ignored while SSS is set.                                     */
 207   4                      CY_SET_REG16(ADC_DelSig_1_Ext_CP_Clk_DIV_PTR, clkDivider);
 208   4                      ADC_DelSig_1_Ext_CP_Clk_MOD_SRC &= ~CYCLK_SSS;
 209   4                  }
 210   3                  else
 211   3                  {
 212   4                      /* Moving to SSS, set SSS which then ignores the divider and we can set     */
 213   4                      /* it without bothering with the shadow load.                               */
 214   4                      ADC_DelSig_1_Ext_CP_Clk_MOD_SRC |= CYCLK_SSS;
 215   4                      CY_SET_REG16(ADC_DelSig_1_Ext_CP_Clk_DIV_PTR, clkDivider);
 216   4                  }
 217   3              }
 218   2              else
 219   2              {
 220   3                  if (enabled)
 221   3                  {
 222   4                      CLK_DIST_LD = 0x00u;
 223   4      
 224   4                      /* Clear all the mask bits except ours. */
 225   4      #if defined(ADC_DelSig_1_Ext_CP_Clk__CFG3)
                              CLK_DIST_AMASK = ADC_DelSig_1_Ext_CP_Clk_CLKEN_MASK;
                              CLK_DIST_DMASK = 0x00u;
              #else
 229   4                      CLK_DIST_DMASK = ADC_DelSig_1_Ext_CP_Clk_CLKEN_MASK;
 230   4                      CLK_DIST_AMASK = 0x00u;
 231   4      #endif
 232   4                      /* Clear mask of bus clock. */
 233   4                      CLK_DIST_BCFG2 &= ~BCFG2_MASK;
 234   4      
 235   4      #if HAS_CLKDIST_LD_DISABLE
                              CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
                              CLK_DIST_LD = CYCLK_LD_DISABLE|CYCLK_LD_SYNC_EN|CYCLK_LD_LOAD;
              
                              /* Wait for clock to be disabled */
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 5   

                              while (CLK_DIST_LD & CYCLK_LD_LOAD) { }
              #endif
 242   4      
 243   4                      ADC_DelSig_1_Ext_CP_Clk_CLKEN &= ~ADC_DelSig_1_Ext_CP_Clk_CLKEN_MASK;
 244   4      
 245   4      #if HAS_CLKDIST_LD_DISABLE
                              /* Clear the disable bit */
                              CLK_DIST_LD = 0x00u;
              #endif
 249   4                  }
 250   3      
 251   3                  /* Load divide value. */
 252   3                  if (ADC_DelSig_1_Ext_CP_Clk_CLKEN & ADC_DelSig_1_Ext_CP_Clk_CLKEN_MASK)
 253   3                  {
 254   4                      /* If the clock is still enabled, use the shadow registers */
 255   4                      CY_SET_REG16(CYREG_CLKDIST_WRK0, clkDivider);
 256   4      
 257   4                      CLK_DIST_LD = (CYCLK_LD_LOAD | (restart ? CYCLK_LD_SYNC_EN : 0x00u));
 258   4                      while (CLK_DIST_LD & CYCLK_LD_LOAD) { }
 259   4                  }
 260   3                  else
 261   3                  {
 262   4                      /* If the clock is disabled, set the divider directly */
 263   4                      CY_SET_REG16(ADC_DelSig_1_Ext_CP_Clk_DIV_PTR, clkDivider);
 264   4                  }
 265   3      
 266   3                  ADC_DelSig_1_Ext_CP_Clk_CLKEN |= enabled;
 267   3              }
 268   2          }
 269   1      }
 270          
 271          
 272          /*******************************************************************************
 273          * Function Name: ADC_DelSig_1_Ext_CP_Clk_GetDividerRegister
 274          ********************************************************************************
 275          * Summary:
 276          *  Gets the clock divider register value.
 277          *
 278          * Parameters:
 279          *  void
 280          *
 281          * Returns:
 282          *  Divide value of the clock minus 1. For example, if the clock is set to
 283          *  divide by 2, the return value will be 1.
 284          *
 285          *******************************************************************************/
 286          uint16 ADC_DelSig_1_Ext_CP_Clk_GetDividerRegister(void) 
 287          {
 288   1          return CY_GET_REG16(ADC_DelSig_1_Ext_CP_Clk_DIV_PTR);
 289   1      }
 290          
 291          
 292          /*******************************************************************************
 293          * Function Name: ADC_DelSig_1_Ext_CP_Clk_SetModeRegister
 294          ********************************************************************************
 295          * Summary:
 296          *  Sets flags that control the operating mode of the clock. This function only
 297          *  changes flags from 0 to 1; flags that are already 1 will remain unchanged.
 298          *  To clear flags, use the ClearModeRegister function. The clock must be
 299          *  disabled before changing the mode.
 300          *
 301          * Parameters:
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 6   

 302          *  clkMode: Bit mask containing the bits to set. For PSoC 3 and PSoC 5,
 303          *   clkMode should be a set of the following optional bits or'ed together.
 304          *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 305          *                 occur when the divider count reaches half of the divide
 306          *                 value.
 307          *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 308          *                 is asserted for approximately half of its period. When
 309          *                 disabled, the output clock is asserted for one period of the
 310          *                 source clock.
 311          *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 312          *                 be enabled for all synchronous clocks.
 313          *   See the Technical Reference Manual for details about setting the mode of
 314          *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 315          *
 316          * Returns:
 317          *  void
 318          *
 319          *******************************************************************************/
 320          void ADC_DelSig_1_Ext_CP_Clk_SetModeRegister(uint8 clkMode) 
 321          {
 322   1          ADC_DelSig_1_Ext_CP_Clk_MOD_SRC |= clkMode & ADC_DelSig_1_Ext_CP_Clk_MODE_MASK;
 323   1      }
 324          
 325          
 326          /*******************************************************************************
 327          * Function Name: ADC_DelSig_1_Ext_CP_Clk_ClearModeRegister
 328          ********************************************************************************
 329          * Summary:
 330          *  Clears flags that control the operating mode of the clock. This function
 331          *  only changes flags from 1 to 0; flags that are already 0 will remain
 332          *  unchanged. To set flags, use the SetModeRegister function. The clock must be
 333          *  disabled before changing the mode.
 334          *
 335          * Parameters:
 336          *  clkMode: Bit mask containing the bits to clear. For PSoC 3 and PSoC 5,
 337          *   clkMode should be a set of the following optional bits or'ed together.
 338          *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 339          *                 occur when the divider count reaches half of the divide
 340          *                 value.
 341          *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 342          *                 is asserted for approximately half of its period. When
 343          *                 disabled, the output clock is asserted for one period of the
 344          *                 source clock.
 345          *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 346          *                 be enabled for all synchronous clocks.
 347          *   See the Technical Reference Manual for details about setting the mode of
 348          *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 349          *
 350          * Returns:
 351          *  void
 352          *
 353          *******************************************************************************/
 354          void ADC_DelSig_1_Ext_CP_Clk_ClearModeRegister(uint8 clkMode) 
 355          {
 356   1          ADC_DelSig_1_Ext_CP_Clk_MOD_SRC &= ~clkMode | ~ADC_DelSig_1_Ext_CP_Clk_MODE_MASK;
 357   1      }
 358          
 359          
 360          /*******************************************************************************
 361          * Function Name: ADC_DelSig_1_Ext_CP_Clk_GetModeRegister
 362          ********************************************************************************
 363          * Summary:
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 7   

 364          *  Gets the clock mode register value.
 365          *
 366          * Parameters:
 367          *  void
 368          *
 369          * Returns:
 370          *  Bit mask representing the enabled mode bits. See the SetModeRegister and
 371          *  ClearModeRegister descriptions for details about the mode bits.
 372          *
 373          *******************************************************************************/
 374          uint8 ADC_DelSig_1_Ext_CP_Clk_GetModeRegister(void) 
 375          {
 376   1          return ADC_DelSig_1_Ext_CP_Clk_MOD_SRC & ADC_DelSig_1_Ext_CP_Clk_MODE_MASK;
 377   1      }
 378          
 379          
 380          /*******************************************************************************
 381          * Function Name: ADC_DelSig_1_Ext_CP_Clk_SetSourceRegister
 382          ********************************************************************************
 383          * Summary:
 384          *  Sets the input source of the clock. The clock must be disabled before
 385          *  changing the source. The old and new clock sources must be running.
 386          *
 387          * Parameters:
 388          *  clkSource:  For PSoC 3 and PSoC 5 devices, clkSource should be one of the
 389          *   following input sources:
 390          *   - CYCLK_SRC_SEL_SYNC_DIG
 391          *   - CYCLK_SRC_SEL_IMO
 392          *   - CYCLK_SRC_SEL_XTALM
 393          *   - CYCLK_SRC_SEL_ILO
 394          *   - CYCLK_SRC_SEL_PLL
 395          *   - CYCLK_SRC_SEL_XTALK
 396          *   - CYCLK_SRC_SEL_DSI_G
 397          *   - CYCLK_SRC_SEL_DSI_D/CYCLK_SRC_SEL_DSI_A
 398          *   See the Technical Reference Manual for details on clock sources.
 399          *
 400          * Returns:
 401          *  void
 402          *
 403          *******************************************************************************/
 404          void ADC_DelSig_1_Ext_CP_Clk_SetSourceRegister(uint8 clkSource) 
 405          {
 406   1          uint16 currDiv = ADC_DelSig_1_Ext_CP_Clk_GetDividerRegister();
 407   1          uint8 oldSrc = ADC_DelSig_1_Ext_CP_Clk_GetSourceRegister();
 408   1      
 409   1          if (oldSrc != CYCLK_SRC_SEL_CLK_SYNC_D && clkSource == CYCLK_SRC_SEL_CLK_SYNC_D && currDiv == 0)
 410   1          {
 411   2              /* Switching to Master and divider is 1, set SSS, which will output master, */
 412   2              /* then set the source so we are consistent.                                */
 413   2              ADC_DelSig_1_Ext_CP_Clk_MOD_SRC |= CYCLK_SSS;
 414   2              ADC_DelSig_1_Ext_CP_Clk_MOD_SRC =
 415   2                  (ADC_DelSig_1_Ext_CP_Clk_MOD_SRC & ~ADC_DelSig_1_Ext_CP_Clk_SRC_SEL_MSK) | clkSource;
 416   2          }
 417   1          else if (oldSrc == CYCLK_SRC_SEL_CLK_SYNC_D && clkSource != CYCLK_SRC_SEL_CLK_SYNC_D && currDiv == 0)
 418   1          {
 419   2              /* Switching from Master to not and divider is 1, set source, so we don't   */
 420   2              /* lock when we clear SSS.                                                  */
 421   2              ADC_DelSig_1_Ext_CP_Clk_MOD_SRC =
 422   2                  (ADC_DelSig_1_Ext_CP_Clk_MOD_SRC & ~ADC_DelSig_1_Ext_CP_Clk_SRC_SEL_MSK) | clkSource;
 423   2              ADC_DelSig_1_Ext_CP_Clk_MOD_SRC &= ~CYCLK_SSS;
 424   2          }
 425   1          else
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 8   

 426   1          {
 427   2              ADC_DelSig_1_Ext_CP_Clk_MOD_SRC =
 428   2                  (ADC_DelSig_1_Ext_CP_Clk_MOD_SRC & ~ADC_DelSig_1_Ext_CP_Clk_SRC_SEL_MSK) | clkSource;
 429   2          }
 430   1      }
 431          
 432          
 433          /*******************************************************************************
 434          * Function Name: ADC_DelSig_1_Ext_CP_Clk_GetSourceRegister
 435          ********************************************************************************
 436          * Summary:
 437          *  Gets the input source of the clock.
 438          *
 439          * Parameters:
 440          *  void
 441          *
 442          * Returns:
 443          *  The input source of the clock. See SetSourceRegister for details.
 444          *
 445          *******************************************************************************/
 446          uint8 ADC_DelSig_1_Ext_CP_Clk_GetSourceRegister(void) 
 447          {
 448   1          return ADC_DelSig_1_Ext_CP_Clk_MOD_SRC & ADC_DelSig_1_Ext_CP_Clk_SRC_SEL_MSK;
 449   1      }
 450          
 451          
 452          #if defined(ADC_DelSig_1_Ext_CP_Clk__CFG3)
              
              
              /*******************************************************************************
              * Function Name: ADC_DelSig_1_Ext_CP_Clk_SetPhaseRegister
              ********************************************************************************
              * Summary:
              *  Sets the phase delay of the analog clock. This function is only available
              *  for analog clocks. The clock must be disabled before changing the phase
              *  delay to avoid glitches.
              *
              *
              * Parameters:
              *  clkPhase: Amount to delay the phase of the clock, in 1.0ns increments.
              *   clkPhase must be from 1 to 11 inclusive. Other values, including 0,
              *   disable the clock. Note that in PSoC 3 ES2 and earlier, there is a fixed
              *   1.5ns offset such that clkPhase = 1 produces a 2.5ns delay and clkPhase =
              *   11 produces a 12.5ns delay. For PSoC 3 ES3 and later, clkPhase = 1
              *   produces a 0ns delay and clkPhase = 11 produces a 10ns delay.
              *
              * Returns:
              *  void
              *
              *******************************************************************************/
              void ADC_DelSig_1_Ext_CP_Clk_SetPhaseRegister(uint8 clkPhase) 
              {
                  ADC_DelSig_1_Ext_CP_Clk_PHASE = clkPhase & ADC_DelSig_1_Ext_CP_Clk_PHASE_MASK;
              }
              
              
              /*******************************************************************************
              * Function Name: ADC_DelSig_1_Ext_CP_Clk_GetPhase
              ********************************************************************************
              * Summary:
              *  Gets the phase delay of the analog clock. This function is only available
              *  for analog clocks.
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 9   

              *
              * Parameters:
              *  void
              *
              * Returns:
              *  Phase of the analog clock. See SetPhaseRegister for details.
              *
              *******************************************************************************/
              uint8 ADC_DelSig_1_Ext_CP_Clk_GetPhaseRegister(void) 
              {
                  return ADC_DelSig_1_Ext_CP_Clk_PHASE & ADC_DelSig_1_Ext_CP_Clk_PHASE_MASK;
              }
              
              #endif
 502          
 503          
 504          /* [] END OF FILE */
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 10  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION ADC_DelSig_1_Ext_CP_Clk_Start (BEGIN)
                                           ; SOURCE LINE # 47
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 50
0000 9043A2            MOV     DPTR,#043A2H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 4404              ORL     A,#04H
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 51
000B 22                RET     
             ; FUNCTION ADC_DelSig_1_Ext_CP_Clk_Start (END)

             ; FUNCTION ADC_DelSig_1_Ext_CP_Clk_Stop (BEGIN)
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 74
0000 9043A2            MOV     DPTR,#043A2H
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54FB              ANL     A,#0FBH
0008 FF                MOV     R7,A
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 75
000B 22                RET     
             ; FUNCTION ADC_DelSig_1_Ext_CP_Clk_Stop (END)

             ; FUNCTION _ADC_DelSig_1_Ext_CP_Clk_StandbyPower (BEGIN)
                                           ; SOURCE LINE # 153
0000 900000      R     MOV     DPTR,#state
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 154
                                           ; SOURCE LINE # 155
0005 900000      R     MOV     DPTR,#state
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A EF                MOV     A,R7
000B 700C              JNZ     ?C0003
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
000D 9043B2            MOV     DPTR,#043B2H
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 EF                MOV     A,R7
0013 54FB              ANL     A,#0FBH
0015 FF                MOV     R7,A
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 158
0018 22                RET     
0019         ?C0003:
                                           ; SOURCE LINE # 160
                                           ; SOURCE LINE # 161
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 11  

0019 9043B2            MOV     DPTR,#043B2H
001C E0                MOVX    A,@DPTR
001D FF                MOV     R7,A
001E EF                MOV     A,R7
001F 4404              ORL     A,#04H
0021 FF                MOV     R7,A
0022 EF                MOV     A,R7
0023 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
0024         ?C0005:
0024 22                RET     
             ; FUNCTION _ADC_DelSig_1_Ext_CP_Clk_StandbyPower (END)

             ; FUNCTION _ADC_DelSig_1_Ext_CP_Clk_SetDividerRegister (BEGIN)
                                           ; SOURCE LINE # 188
0000 900000      R     MOV     DPTR,#clkDivider
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
0008 900000      R     MOV     DPTR,#restart
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
                                           ; SOURCE LINE # 192
000D 120000      R     LCALL   ADC_DelSig_1_Ext_CP_Clk_GetSourceRegister
0010 900000      R     MOV     DPTR,#currSrc
0013 EF                MOV     A,R7
0014 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 193
0015 120000      R     LCALL   ADC_DelSig_1_Ext_CP_Clk_GetDividerRegister
0018 900000      R     MOV     DPTR,#oldDivider
001B EE                MOV     A,R6
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 195
0020 900000      R     MOV     DPTR,#oldDivider
0023 E0                MOVX    A,@DPTR
0024 FE                MOV     R6,A
0025 A3                INC     DPTR
0026 E0                MOVX    A,@DPTR
0027 FF                MOV     R7,A
0028 900000      R     MOV     DPTR,#clkDivider
002B E0                MOVX    A,@DPTR
002C FC                MOV     R4,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FD                MOV     R5,A
0030 ED                MOV     A,R5
0031 6F                XRL     A,R7
0032 7002              JNZ     ?C0030
0034 EC                MOV     A,R4
0035 6E                XRL     A,R6
0036         ?C0030:
0036 7003              JNZ     $ + 5H
0038 020000      R     LJMP    ?C0019
                                           ; SOURCE LINE # 196
                                           ; SOURCE LINE # 197
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 12  

003B 9043A2            MOV     DPTR,#043A2H
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 EF                MOV     A,R7
0041 5404              ANL     A,#04H
0043 FF                MOV     R7,A
0044 900000      R     MOV     DPTR,#enabled
0047 EF                MOV     A,R7
0048 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
0049 900000      R     MOV     DPTR,#currSrc
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E EF                MOV     A,R7
004F 706A              JNZ     ?C0007
0051 900000      R     MOV     DPTR,#oldDivider
0054 E0                MOVX    A,@DPTR
0055 FE                MOV     R6,A
0056 A3                INC     DPTR
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 EF                MOV     A,R7
005A 4E                ORL     A,R6
005B 600C              JZ      ?C0008
005D 900000      R     MOV     DPTR,#clkDivider
0060 E0                MOVX    A,@DPTR
0061 FE                MOV     R6,A
0062 A3                INC     DPTR
0063 E0                MOVX    A,@DPTR
0064 FF                MOV     R7,A
0065 EF                MOV     A,R7
0066 4E                ORL     A,R6
0067 7052              JNZ     ?C0007
0069         ?C0008:
                                           ; SOURCE LINE # 200
                                           ; SOURCE LINE # 202
0069 900000      R     MOV     DPTR,#oldDivider
006C E0                MOVX    A,@DPTR
006D FE                MOV     R6,A
006E A3                INC     DPTR
006F E0                MOVX    A,@DPTR
0070 FF                MOV     R7,A
0071 EF                MOV     A,R7
0072 4E                ORL     A,R6
0073 7029              JNZ     ?C0009
0075 900000      R     MOV     DPTR,#clkDivider
0078 E0                MOVX    A,@DPTR
0079 FE                MOV     R6,A
007A A3                INC     DPTR
007B E0                MOVX    A,@DPTR
007C FF                MOV     R7,A
007D EF                MOV     A,R7
007E 4E                ORL     A,R6
007F 601D              JZ      ?C0009
                                           ; SOURCE LINE # 203
                                           ; SOURCE LINE # 207
0081 7B02              MOV     R3,#02H
0083 7A40              MOV     R2,#040H
0085 7988              MOV     R1,#088H
0087 900000      R     MOV     DPTR,#clkDivider
008A E0                MOVX    A,@DPTR
008B FC                MOV     R4,A
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 13  

008C A3                INC     DPTR
008D E0                MOVX    A,@DPTR
008E FD                MOV     R5,A
008F 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 208
0092 90408A            MOV     DPTR,#0408AH
0095 E0                MOVX    A,@DPTR
0096 FF                MOV     R7,A
0097 EF                MOV     A,R7
0098 54BF              ANL     A,#0BFH
009A FF                MOV     R7,A
009B EF                MOV     A,R7
009C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 209
009D 22                RET     
009E         ?C0009:
                                           ; SOURCE LINE # 211
                                           ; SOURCE LINE # 214
009E 90408A            MOV     DPTR,#0408AH
00A1 E0                MOVX    A,@DPTR
00A2 FF                MOV     R7,A
00A3 EF                MOV     A,R7
00A4 4440              ORL     A,#040H
00A6 FF                MOV     R7,A
00A7 EF                MOV     A,R7
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 215
00A9 7B02              MOV     R3,#02H
00AB 7A40              MOV     R2,#040H
00AD 7988              MOV     R1,#088H
00AF 900000      R     MOV     DPTR,#clkDivider
00B2 E0                MOVX    A,@DPTR
00B3 FC                MOV     R4,A
00B4 A3                INC     DPTR
00B5 E0                MOVX    A,@DPTR
00B6 FD                MOV     R5,A
00B7 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 216
                                           ; SOURCE LINE # 217
00BA 22                RET     
00BB         ?C0007:
                                           ; SOURCE LINE # 219
                                           ; SOURCE LINE # 220
00BB 900000      R     MOV     DPTR,#enabled
00BE E0                MOVX    A,@DPTR
00BF FF                MOV     R7,A
00C0 EF                MOV     A,R7
00C1 6026              JZ      ?C0012
                                           ; SOURCE LINE # 221
                                           ; SOURCE LINE # 222
00C3 904001            MOV     DPTR,#04001H
00C6 E4                CLR     A
00C7 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 229
00C8 904010            MOV     DPTR,#04010H
00CB 7404              MOV     A,#04H
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 230
00CE 904014            MOV     DPTR,#04014H
00D1 E4                CLR     A
00D2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 233
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 14  

00D3 904008            MOV     DPTR,#04008H
00D6 E0                MOVX    A,@DPTR
00D7 FF                MOV     R7,A
00D8 EF                MOV     A,R7
00D9 547F              ANL     A,#07FH
00DB FF                MOV     R7,A
00DC EF                MOV     A,R7
00DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 243
00DE 9043A2            MOV     DPTR,#043A2H
00E1 E0                MOVX    A,@DPTR
00E2 FF                MOV     R7,A
00E3 EF                MOV     A,R7
00E4 54FB              ANL     A,#0FBH
00E6 FF                MOV     R7,A
00E7 EF                MOV     A,R7
00E8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 249
00E9         ?C0012:
                                           ; SOURCE LINE # 252
00E9 9043A2            MOV     DPTR,#043A2H
00EC E0                MOVX    A,@DPTR
00ED FF                MOV     R7,A
00EE EF                MOV     A,R7
00EF 30E235            JNB     ACC.2,?C0013
                                           ; SOURCE LINE # 253
                                           ; SOURCE LINE # 255
00F2 7B02              MOV     R3,#02H
00F4 7A40              MOV     R2,#040H
00F6 7902              MOV     R1,#02H
00F8 900000      R     MOV     DPTR,#clkDivider
00FB E0                MOVX    A,@DPTR
00FC FC                MOV     R4,A
00FD A3                INC     DPTR
00FE E0                MOVX    A,@DPTR
00FF FD                MOV     R5,A
0100 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 257
0103 900000      R     MOV     DPTR,#restart
0106 E0                MOVX    A,@DPTR
0107 FF                MOV     R7,A
0108 EF                MOV     A,R7
0109 6004              JZ      ?C0014
010B 7F02              MOV     R7,#02H
010D 8002              SJMP    ?C0015
010F         ?C0014:
010F 7F00              MOV     R7,#00H
0111         ?C0015:
0111 EF                MOV     A,R7
0112 4401              ORL     A,#01H
0114 FF                MOV     R7,A
0115 904001            MOV     DPTR,#04001H
0118 EF                MOV     A,R7
0119 F0                MOVX    @DPTR,A
011A         ?C0016:
                                           ; SOURCE LINE # 258
011A 904001            MOV     DPTR,#04001H
011D E0                MOVX    A,@DPTR
011E FF                MOV     R7,A
011F EF                MOV     A,R7
0120 30E015            JNB     ACC.0,?C0018
0123 80F5              SJMP    ?C0016
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 15  

0125         ?C0017:
                                           ; SOURCE LINE # 259
0125 8011              SJMP    ?C0018
0127         ?C0013:
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 263
0127 7B02              MOV     R3,#02H
0129 7A40              MOV     R2,#040H
012B 7988              MOV     R1,#088H
012D 900000      R     MOV     DPTR,#clkDivider
0130 E0                MOVX    A,@DPTR
0131 FC                MOV     R4,A
0132 A3                INC     DPTR
0133 E0                MOVX    A,@DPTR
0134 FD                MOV     R5,A
0135 120000      E     LCALL   _cywrite16_nodpx
                                           ; SOURCE LINE # 264
0138         ?C0018:
                                           ; SOURCE LINE # 266
0138 9043A2            MOV     DPTR,#043A2H
013B C083              PUSH    DPH
013D C082              PUSH    DPL
013F E0                MOVX    A,@DPTR
0140 FF                MOV     R7,A
0141 900000      R     MOV     DPTR,#enabled
0144 E0                MOVX    A,@DPTR
0145 FE                MOV     R6,A
0146 EF                MOV     A,R7
0147 4E                ORL     A,R6
0148 FF                MOV     R7,A
0149 D082              POP     DPL
014B D083              POP     DPH
014D EF                MOV     A,R7
014E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 267
                                           ; SOURCE LINE # 268
                                           ; SOURCE LINE # 269
014F         ?C0019:
014F 22                RET     
             ; FUNCTION _ADC_DelSig_1_Ext_CP_Clk_SetDividerRegister (END)

             ; FUNCTION ADC_DelSig_1_Ext_CP_Clk_GetDividerRegister (BEGIN)
                                           ; SOURCE LINE # 286
                                           ; SOURCE LINE # 287
                                           ; SOURCE LINE # 288
0000 7B02              MOV     R3,#02H
0002 7A40              MOV     R2,#040H
0004 7988              MOV     R1,#088H
0006 120000      E     LCALL   _cyread16_nodpx
                                           ; SOURCE LINE # 289
0009         ?C0020:
0009 22                RET     
             ; FUNCTION ADC_DelSig_1_Ext_CP_Clk_GetDividerRegister (END)

             ; FUNCTION _ADC_DelSig_1_Ext_CP_Clk_SetModeRegister (BEGIN)
                                           ; SOURCE LINE # 320
0000 900000      R     MOV     DPTR,#clkMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 321
                                           ; SOURCE LINE # 322
0005 90408A            MOV     DPTR,#0408AH
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 16  

0008 C083              PUSH    DPH
000A C082              PUSH    DPL
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#clkMode
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 54F8              ANL     A,#0F8H
0016 FE                MOV     R6,A
0017 EF                MOV     A,R7
0018 4E                ORL     A,R6
0019 FF                MOV     R7,A
001A D082              POP     DPL
001C D083              POP     DPH
001E EF                MOV     A,R7
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 323
0020 22                RET     
             ; FUNCTION _ADC_DelSig_1_Ext_CP_Clk_SetModeRegister (END)

             ; FUNCTION _ADC_DelSig_1_Ext_CP_Clk_ClearModeRegister (BEGIN)
                                           ; SOURCE LINE # 354
0000 900000      R     MOV     DPTR,#clkMode
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
                                           ; SOURCE LINE # 356
0005 90408A            MOV     DPTR,#0408AH
0008 C083              PUSH    DPH
000A C082              PUSH    DPL
000C E0                MOVX    A,@DPTR
000D FF                MOV     R7,A
000E 900000      R     MOV     DPTR,#clkMode
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 EE                MOV     A,R6
0014 F4                CPL     A
0015 FE                MOV     R6,A
0016 EE                MOV     A,R6
0017 4407              ORL     A,#07H
0019 FE                MOV     R6,A
001A EF                MOV     A,R7
001B 5E                ANL     A,R6
001C FF                MOV     R7,A
001D D082              POP     DPL
001F D083              POP     DPH
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 357
0023 22                RET     
             ; FUNCTION _ADC_DelSig_1_Ext_CP_Clk_ClearModeRegister (END)

             ; FUNCTION ADC_DelSig_1_Ext_CP_Clk_GetModeRegister (BEGIN)
                                           ; SOURCE LINE # 374
                                           ; SOURCE LINE # 375
                                           ; SOURCE LINE # 376
0000 90408A            MOV     DPTR,#0408AH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 54F8              ANL     A,#0F8H
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 17  

0008 FF                MOV     R7,A
                                           ; SOURCE LINE # 377
0009         ?C0023:
0009 22                RET     
             ; FUNCTION ADC_DelSig_1_Ext_CP_Clk_GetModeRegister (END)

             ; FUNCTION _ADC_DelSig_1_Ext_CP_Clk_SetSourceRegister (BEGIN)
                                           ; SOURCE LINE # 404
0000 900000      R     MOV     DPTR,#clkSource
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 405
                                           ; SOURCE LINE # 406
0005 120000      R     LCALL   ADC_DelSig_1_Ext_CP_Clk_GetDividerRegister
0008 900000      R     MOV     DPTR,#currDiv
000B EE                MOV     A,R6
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E EF                MOV     A,R7
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 407
0010 120000      R     LCALL   ADC_DelSig_1_Ext_CP_Clk_GetSourceRegister
0013 900000      R     MOV     DPTR,#oldSrc
0016 EF                MOV     A,R7
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 409
0018 900000      R     MOV     DPTR,#oldSrc
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 6036              JZ      ?C0024
0020 900000      R     MOV     DPTR,#clkSource
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 EF                MOV     A,R7
0026 702E              JNZ     ?C0024
0028 900000      R     MOV     DPTR,#currDiv
002B E0                MOVX    A,@DPTR
002C FE                MOV     R6,A
002D A3                INC     DPTR
002E E0                MOVX    A,@DPTR
002F FF                MOV     R7,A
0030 EF                MOV     A,R7
0031 4E                ORL     A,R6
0032 7022              JNZ     ?C0024
                                           ; SOURCE LINE # 410
                                           ; SOURCE LINE # 413
0034 90408A            MOV     DPTR,#0408AH
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A 4440              ORL     A,#040H
003C FF                MOV     R7,A
003D EF                MOV     A,R7
003E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 415
003F 90408A            MOV     DPTR,#0408AH
0042 E0                MOVX    A,@DPTR
0043 FF                MOV     R7,A
0044 EF                MOV     A,R7
0045 54F8              ANL     A,#0F8H
0047 FF                MOV     R7,A
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 18  

0048 900000      R     MOV     DPTR,#clkSource
004B E0                MOVX    A,@DPTR
004C FE                MOV     R6,A
004D EF                MOV     A,R7
004E 4E                ORL     A,R6
004F FF                MOV     R7,A
0050 90408A            MOV     DPTR,#0408AH
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 416
0055 22                RET     
0056         ?C0024:
                                           ; SOURCE LINE # 417
0056 900000      R     MOV     DPTR,#oldSrc
0059 E0                MOVX    A,@DPTR
005A FF                MOV     R7,A
005B EF                MOV     A,R7
005C 7036              JNZ     ?C0026
005E 900000      R     MOV     DPTR,#clkSource
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 EF                MOV     A,R7
0064 602E              JZ      ?C0026
0066 900000      R     MOV     DPTR,#currDiv
0069 E0                MOVX    A,@DPTR
006A FE                MOV     R6,A
006B A3                INC     DPTR
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E EF                MOV     A,R7
006F 4E                ORL     A,R6
0070 7022              JNZ     ?C0026
                                           ; SOURCE LINE # 418
                                           ; SOURCE LINE # 422
0072 90408A            MOV     DPTR,#0408AH
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 EF                MOV     A,R7
0078 54F8              ANL     A,#0F8H
007A FF                MOV     R7,A
007B 900000      R     MOV     DPTR,#clkSource
007E E0                MOVX    A,@DPTR
007F FE                MOV     R6,A
0080 EF                MOV     A,R7
0081 4E                ORL     A,R6
0082 FF                MOV     R7,A
0083 90408A            MOV     DPTR,#0408AH
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 423
0088 90408A            MOV     DPTR,#0408AH
008B E0                MOVX    A,@DPTR
008C FF                MOV     R7,A
008D EF                MOV     A,R7
008E 54BF              ANL     A,#0BFH
0090 FF                MOV     R7,A
0091 EF                MOV     A,R7
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 424
0093 22                RET     
0094         ?C0026:
                                           ; SOURCE LINE # 426
C51 COMPILER V9.03   ADC_DELSIG_1_EXT_CP_CLK                                               07/11/2012 14:12:37 PAGE 19  

                                           ; SOURCE LINE # 428
0094 90408A            MOV     DPTR,#0408AH
0097 E0                MOVX    A,@DPTR
0098 FF                MOV     R7,A
0099 EF                MOV     A,R7
009A 54F8              ANL     A,#0F8H
009C FF                MOV     R7,A
009D 900000      R     MOV     DPTR,#clkSource
00A0 E0                MOVX    A,@DPTR
00A1 FE                MOV     R6,A
00A2 EF                MOV     A,R7
00A3 4E                ORL     A,R6
00A4 FF                MOV     R7,A
00A5 90408A            MOV     DPTR,#0408AH
00A8 EF                MOV     A,R7
00A9 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 429
                                           ; SOURCE LINE # 430
00AA         ?C0028:
00AA 22                RET     
             ; FUNCTION _ADC_DelSig_1_Ext_CP_Clk_SetSourceRegister (END)

             ; FUNCTION ADC_DelSig_1_Ext_CP_Clk_GetSourceRegister (BEGIN)
                                           ; SOURCE LINE # 446
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
0000 90408A            MOV     DPTR,#0408AH
0003 E0                MOVX    A,@DPTR
0004 FF                MOV     R7,A
0005 EF                MOV     A,R7
0006 5407              ANL     A,#07H
0008 FF                MOV     R7,A
                                           ; SOURCE LINE # 449
0009         ?C0029:
0009 22                RET     
             ; FUNCTION ADC_DelSig_1_Ext_CP_Clk_GetSourceRegister (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    667    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      14
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
